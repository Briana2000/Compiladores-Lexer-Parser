
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ParserLexer;

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\217\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\006\010\000\002\004\003\000\002\004\004" +
    "\000\002\005\011\000\002\005\010\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\010\004\000\002" +
    "\011\003\000\002\011\003\000\002\013\003\000\002\013" +
    "\005\000\002\014\004\000\002\014\004\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\012\003\000" +
    "\002\015\003\000\002\015\004\000\002\016\004\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\022\004\000\002\022\005\000" +
    "\002\022\005\000\002\017\004\000\002\017\004\000\002" +
    "\020\004\000\002\020\006\000\002\020\006\000\002\020" +
    "\006\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\040\003\000\002\041\003\000\002\041\004\000\002" +
    "\041\004\000\002\041\005\000\002\041\005\000\002\041" +
    "\004\000\002\042\003\000\002\042\003\000\002\042\003" +
    "\000\002\042\003\000\002\042\003\000\002\042\003\000" +
    "\002\043\003\000\002\043\003\000\002\043\003\000\002" +
    "\050\005\000\002\051\003\000\002\051\003\000\002\051" +
    "\003\000\002\051\003\000\002\051\003\000\002\051\003" +
    "\000\002\044\003\000\002\044\003\000\002\044\003\000" +
    "\002\044\005\000\002\044\005\000\002\044\004\000\002" +
    "\046\003\000\002\046\003\000\002\045\003\000\002\045" +
    "\003\000\002\047\003\000\002\047\003\000\002\024\007" +
    "\000\002\024\006\000\002\025\003\000\002\025\005\000" +
    "\002\026\003\000\002\031\003\000\002\031\003\000\002" +
    "\032\006\000\002\033\006\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\035\007\000\002\035\007" +
    "\000\002\036\007\000\002\036\007\000\002\037\007\000" +
    "\002\037\007\000\002\052\003\000\002\052\003\000\002" +
    "\054\005\000\002\054\004\000\002\054\004\000\002\054" +
    "\003\000\002\055\011\000\002\056\003\000\002\056\004" +
    "\000\002\057\011\000\002\060\006\000\002\053\003\000" +
    "\002\053\003\000\002\061\013\000\002\062\015\000\002" +
    "\063\003\000\002\064\003\000\002\064\004\000\002\065" +
    "\003\000\002\065\003\000\002\066\004\000\002\027\005" +
    "\000\002\073\004\000\002\073\004\000\002\067\006\000" +
    "\002\077\004\000\002\076\007\000\002\076\007\000\002" +
    "\075\004\000\002\074\003\000\002\074\005\000\002\073" +
    "\003\000\002\073\003\000\002\073\003\000\002\072\003" +
    "\000\002\072\003\000\002\100\003\000\002\100\003\000" +
    "\002\070\005\000\002\070\005\000\002\070\005\000\002" +
    "\071\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0116\000\010\004\012\007\010\010\011\001\002\000" +
    "\004\002\u0118\001\002\000\012\002\000\004\012\007\010" +
    "\010\011\001\002\000\006\014\u0102\070\u0100\001\002\000" +
    "\004\054\013\001\002\000\006\014\ufff8\070\ufff8\001\002" +
    "\000\006\014\ufff7\070\ufff7\001\002\000\006\014\ufff9\070" +
    "\ufff9\001\002\000\004\055\014\001\002\000\004\060\015" +
    "\001\002\000\044\004\026\005\021\006\066\007\063\010" +
    "\044\013\047\015\040\020\072\022\031\026\024\027\025" +
    "\030\071\037\056\040\060\064\023\067\034\070\042\001" +
    "\002\000\050\004\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3" +
    "\013\uffa3\015\uffa3\020\uffa3\022\uffa3\023\uffa3\026\uffa3\027" +
    "\uffa3\030\uffa3\037\uffa3\040\uffa3\061\uffa3\064\uffa3\067\uffa3" +
    "\070\uffa3\001\002\000\050\004\uffe3\005\uffe3\006\uffe3\007" +
    "\uffe3\010\uffe3\013\uffe3\015\uffe3\020\uffe3\022\uffe3\023\uffe3" +
    "\026\uffe3\027\uffe3\030\uffe3\037\uffe3\040\uffe3\061\uffe3\064" +
    "\uffe3\067\uffe3\070\uffe3\001\002\000\004\063\377\001\002" +
    "\000\004\070\uff77\001\002\000\050\004\uff9b\005\uff9b\006" +
    "\uff9b\007\uff9b\010\uff9b\013\uff9b\015\uff9b\020\uff9b\022\uff9b" +
    "\023\uff9b\026\uff9b\027\uff9b\030\uff9b\037\uff9b\040\uff9b\061" +
    "\uff9b\064\uff9b\067\uff9b\070\uff9b\001\002\000\052\004\uff7c" +
    "\005\uff7c\006\uff7c\007\uff7c\010\uff7c\013\uff7c\015\uff7c\020" +
    "\uff7c\022\uff7c\023\uff7c\026\uff7c\027\uff7c\030\uff7c\037\uff7c" +
    "\040\uff7c\061\uff7c\062\uff7c\064\uff7c\067\uff7c\070\uff7c\001" +
    "\002\000\004\054\370\001\002\000\004\054\361\001\002" +
    "\000\004\070\uff78\001\002\000\050\004\uffa5\005\uffa5\006" +
    "\uffa5\007\uffa5\010\uffa5\013\uffa5\015\uffa5\020\uffa5\022\uffa5" +
    "\023\uffa5\026\uffa5\027\uffa5\030\uffa5\037\uffa5\040\uffa5\061" +
    "\uffa5\064\uffa5\067\uffa5\070\uffa5\001\002\000\004\063\360" +
    "\001\002\000\004\054\342\001\002\000\004\061\341\001" +
    "\002\000\050\004\uff91\005\uff91\006\uff91\007\uff91\010\uff91" +
    "\013\uff91\015\uff91\020\uff91\022\uff91\023\uff91\026\uff91\027" +
    "\uff91\030\uff91\037\uff91\040\uff91\061\uff91\064\uff91\067\uff91" +
    "\070\uff91\001\002\000\052\004\uff7d\005\uff7d\006\uff7d\007" +
    "\uff7d\010\uff7d\013\uff7d\015\uff7d\020\uff7d\022\uff7d\023\uff7d" +
    "\026\uff7d\027\uff7d\030\uff7d\037\uff7d\040\uff7d\061\uff7d\062" +
    "\uff7d\064\uff7d\067\uff7d\070\uff7d\001\002\000\054\004\uff97" +
    "\005\uff97\006\uff97\007\uff97\010\uff97\013\uff97\015\uff97\016" +
    "\322\017\321\020\uff97\022\uff97\023\uff97\026\uff97\027\uff97" +
    "\030\uff97\037\uff97\040\uff97\061\uff97\064\uff97\067\uff97\070" +
    "\uff97\001\002\000\004\070\320\001\002\000\050\004\uffe2" +
    "\005\uffe2\006\uffe2\007\uffe2\010\uffe2\013\uffe2\015\uffe2\020" +
    "\uffe2\022\uffe2\023\uffe2\026\uffe2\027\uffe2\030\uffe2\037\uffe2" +
    "\040\uffe2\061\uffe2\064\uffe2\067\uffe2\070\uffe2\001\002\000" +
    "\004\054\312\001\002\000\006\053\305\063\306\001\002" +
    "\000\060\004\uff7b\005\uff7b\006\uff7b\007\uff7b\010\uff7b\013" +
    "\uff7b\015\uff7b\020\uff7b\022\uff7b\023\uff7b\026\uff7b\027\uff7b" +
    "\030\uff7b\037\uff7b\040\uff7b\053\250\054\252\056\214\061" +
    "\uff7b\063\251\064\uff7b\067\uff7b\070\uff7b\001\002\000\004" +
    "\061\uffec\001\002\000\004\070\uffed\001\002\000\050\004" +
    "\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\013\uffe4\015\uffe4" +
    "\020\uffe4\022\uffe4\023\uffe4\026\uffe4\027\uffe4\030\uffe4\037" +
    "\uffe4\040\uffe4\061\uffe4\064\uffe4\067\uffe4\070\uffe4\001\002" +
    "\000\004\053\244\001\002\000\034\011\114\012\120\032" +
    "\105\037\116\040\111\043\122\044\107\054\125\064\113" +
    "\065\106\066\236\067\237\070\121\001\002\000\050\004" +
    "\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\013\uffe5\015\uffe5" +
    "\020\uffe5\022\uffe5\023\uffe5\026\uffe5\027\uffe5\030\uffe5\037" +
    "\uffe5\040\uffe5\061\uffe5\064\uffe5\067\uffe5\070\uffe5\001\002" +
    "\000\050\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\013" +
    "\uffe1\015\uffe1\020\uffe1\022\uffe1\023\uffe1\026\uffe1\027\uffe1" +
    "\030\uffe1\037\uffe1\040\uffe1\061\uffe1\064\uffe1\067\uffe1\070" +
    "\uffe1\001\002\000\004\070\235\001\002\000\050\004\uff90" +
    "\005\uff90\006\uff90\007\uff90\010\uff90\013\uff90\015\uff90\020" +
    "\uff90\022\uff90\023\uff90\026\uff90\027\uff90\030\uff90\037\uff90" +
    "\040\uff90\061\uff90\064\uff90\067\uff90\070\uff90\001\002\000" +
    "\050\004\uff9c\005\uff9c\006\uff9c\007\uff9c\010\uff9c\013\uff9c" +
    "\015\uff9c\020\uff9c\022\uff9c\023\uff9c\026\uff9c\027\uff9c\030" +
    "\uff9c\037\uff9c\040\uff9c\061\uff9c\064\uff9c\067\uff9c\070\uff9c" +
    "\001\002\000\050\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010" +
    "\uffe6\013\uffe6\015\uffe6\020\uffe6\022\uffe6\023\uffe6\026\uffe6" +
    "\027\uffe6\030\uffe6\037\uffe6\040\uffe6\061\uffe6\064\uffe6\067" +
    "\uffe6\070\uffe6\001\002\000\004\070\233\001\002\000\004" +
    "\063\232\001\002\000\004\070\230\001\002\000\050\004" +
    "\uffa4\005\uffa4\006\uffa4\007\uffa4\010\uffa4\013\uffa4\015\uffa4" +
    "\020\uffa4\022\uffa4\023\uffa4\026\uffa4\027\uffa4\030\uffa4\037" +
    "\uffa4\040\uffa4\061\uffa4\064\uffa4\067\uffa4\070\uffa4\001\002" +
    "\000\006\053\204\063\205\001\002\000\004\070\uffef\001" +
    "\002\000\004\053\200\001\002\000\046\004\026\005\021" +
    "\006\066\007\063\010\044\013\047\015\040\020\072\022" +
    "\031\026\024\027\025\030\071\037\056\040\060\061\uffeb" +
    "\064\023\067\034\070\042\001\002\000\004\070\uffee\001" +
    "\002\000\050\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8" +
    "\013\uffe8\015\uffe8\020\uffe8\022\uffe8\023\uffe8\026\uffe8\027" +
    "\uffe8\030\uffe8\037\uffe8\040\uffe8\061\uffe8\064\uffe8\067\uffe8" +
    "\070\uffe8\001\002\000\050\004\uffe7\005\uffe7\006\uffe7\007" +
    "\uffe7\010\uffe7\013\uffe7\015\uffe7\020\uffe7\022\uffe7\023\uffe7" +
    "\026\uffe7\027\uffe7\030\uffe7\037\uffe7\040\uffe7\061\uffe7\064" +
    "\uffe7\067\uffe7\070\uffe7\001\002\000\004\054\170\001\002" +
    "\000\004\060\073\001\002\000\046\004\026\005\021\006" +
    "\066\007\063\010\044\013\047\015\040\020\072\022\031" +
    "\023\077\026\024\027\025\030\071\037\056\040\060\064" +
    "\023\067\034\070\042\001\002\000\050\004\uff89\005\uff89" +
    "\006\uff89\007\uff89\010\uff89\013\uff89\015\uff89\020\uff89\022" +
    "\uff89\023\uff89\026\uff89\027\uff89\030\uff89\037\uff89\040\uff89" +
    "\061\uff89\064\uff89\067\uff89\070\uff89\001\002\000\050\004" +
    "\026\005\021\006\066\007\063\010\044\013\047\015\040" +
    "\020\072\022\031\023\077\026\024\027\025\030\071\037" +
    "\056\040\060\061\uff8c\064\023\067\034\070\042\001\002" +
    "\000\004\061\uff8d\001\002\000\004\063\166\001\002\000" +
    "\004\061\102\001\002\000\050\004\uff8a\005\uff8a\006\uff8a" +
    "\007\uff8a\010\uff8a\013\uff8a\015\uff8a\020\uff8a\022\uff8a\023" +
    "\uff8a\026\uff8a\027\uff8a\030\uff8a\037\uff8a\040\uff8a\061\uff8a" +
    "\064\uff8a\067\uff8a\070\uff8a\001\002\000\004\021\103\001" +
    "\002\000\004\054\104\001\002\000\030\011\114\012\120" +
    "\032\105\037\116\040\111\043\122\044\107\054\125\064" +
    "\113\065\106\070\121\001\002\000\020\032\105\037\116" +
    "\040\111\054\150\064\113\065\106\070\121\001\002\000" +
    "\044\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3" +
    "\041\uffc3\042\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051" +
    "\uffc3\052\uffc3\055\uffc3\062\uffc3\063\uffc3\001\002\000\030" +
    "\011\uffaf\012\uffaf\032\uffaf\037\uffaf\040\uffaf\043\uffaf\044" +
    "\uffaf\054\uffaf\064\uffaf\065\uffaf\070\uffaf\001\002\000\014" +
    "\041\uffba\042\uffba\055\uffba\062\uffba\063\uffba\001\002\000" +
    "\010\064\113\065\106\070\121\001\002\000\044\031\uffd0" +
    "\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\041\uffd0\042" +
    "\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0" +
    "\055\uffd0\062\uffd0\063\uffd0\001\002\000\044\031\uffc4\032" +
    "\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\041\uffc4\042\uffc4" +
    "\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\055" +
    "\uffc4\062\uffc4\063\uffc4\001\002\000\014\041\uffb4\042\uffb4" +
    "\055\uffb4\062\uffb4\063\uffb4\001\002\000\010\041\155\042" +
    "\156\055\162\001\002\000\010\064\113\065\106\070\121" +
    "\001\002\000\014\041\uffb9\042\uffb9\055\uffb9\062\uffb9\063" +
    "\uffb9\001\002\000\014\041\uffb3\042\uffb3\055\uffb3\062\uffb3" +
    "\063\uffb3\001\002\000\044\031\uffc2\032\uffc2\033\uffc2\034" +
    "\uffc2\035\uffc2\036\uffc2\041\uffc2\042\uffc2\045\uffc2\046\uffc2" +
    "\047\uffc2\050\uffc2\051\uffc2\052\uffc2\055\uffc2\062\uffc2\063" +
    "\uffc2\001\002\000\030\011\uffb0\012\uffb0\032\uffb0\037\uffb0" +
    "\040\uffb0\043\uffb0\044\uffb0\054\uffb0\064\uffb0\065\uffb0\070" +
    "\uffb0\001\002\000\030\011\114\012\120\032\105\037\116" +
    "\040\111\043\122\044\107\054\125\064\113\065\106\070" +
    "\121\001\002\000\044\031\137\032\131\033\142\034\141" +
    "\035\143\036\133\041\uffb8\042\uffb8\045\134\046\135\047" +
    "\140\050\145\051\144\052\136\055\uffb8\062\uffb8\063\uffb8" +
    "\001\002\000\030\011\114\012\120\032\105\037\116\040" +
    "\111\043\122\044\107\054\125\064\113\065\106\070\121" +
    "\001\002\000\010\041\155\042\156\055\154\001\002\000" +
    "\040\031\137\032\131\033\142\034\141\035\143\036\133" +
    "\041\uffb8\042\uffb8\045\134\046\135\047\140\050\145\051" +
    "\144\052\136\055\132\001\002\000\020\032\105\037\116" +
    "\040\111\054\150\064\113\065\106\070\121\001\002\000" +
    "\020\032\uffc9\037\uffc9\040\uffc9\054\uffc9\064\uffc9\065\uffc9" +
    "\070\uffc9\001\002\000\044\031\uffcc\032\uffcc\033\uffcc\034" +
    "\uffcc\035\uffcc\036\uffcc\041\uffcc\042\uffcc\045\uffcc\046\uffcc" +
    "\047\uffcc\050\uffcc\051\uffcc\052\uffcc\055\uffcc\062\uffcc\063" +
    "\uffcc\001\002\000\020\032\uffc5\037\uffc5\040\uffc5\054\uffc5" +
    "\064\uffc5\065\uffc5\070\uffc5\001\002\000\020\032\uffc0\037" +
    "\uffc0\040\uffc0\054\uffc0\064\uffc0\065\uffc0\070\uffc0\001\002" +
    "\000\020\032\uffbf\037\uffbf\040\uffbf\054\uffbf\064\uffbf\065" +
    "\uffbf\070\uffbf\001\002\000\020\032\uffbb\037\uffbb\040\uffbb" +
    "\054\uffbb\064\uffbb\065\uffbb\070\uffbb\001\002\000\020\032" +
    "\uffca\037\uffca\040\uffca\054\uffca\064\uffca\065\uffca\070\uffca" +
    "\001\002\000\020\032\uffbe\037\uffbe\040\uffbe\054\uffbe\064" +
    "\uffbe\065\uffbe\070\uffbe\001\002\000\020\032\uffc7\037\uffc7" +
    "\040\uffc7\054\uffc7\064\uffc7\065\uffc7\070\uffc7\001\002\000" +
    "\020\032\uffc8\037\uffc8\040\uffc8\054\uffc8\064\uffc8\065\uffc8" +
    "\070\uffc8\001\002\000\020\032\uffc6\037\uffc6\040\uffc6\054" +
    "\uffc6\064\uffc6\065\uffc6\070\uffc6\001\002\000\020\032\uffbc" +
    "\037\uffbc\040\uffbc\054\uffbc\064\uffbc\065\uffbc\070\uffbc\001" +
    "\002\000\020\032\uffbd\037\uffbd\040\uffbd\054\uffbd\064\uffbd" +
    "\065\uffbd\070\uffbd\001\002\000\020\032\105\037\116\040" +
    "\111\054\150\064\113\065\106\070\121\001\002\000\030" +
    "\031\137\032\131\033\142\034\141\035\143\036\133\041" +
    "\uffc1\042\uffc1\055\uffc1\062\uffc1\063\uffc1\001\002\000\020" +
    "\032\105\037\116\040\111\054\150\064\113\065\106\070" +
    "\121\001\002\000\020\031\137\032\131\033\142\034\141" +
    "\035\143\036\133\055\132\001\002\000\044\031\137\032" +
    "\131\033\142\034\141\035\143\036\133\041\uffcd\042\uffcd" +
    "\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\055" +
    "\uffcd\062\uffcd\063\uffcd\001\002\000\030\011\114\012\120" +
    "\032\105\037\116\040\111\043\122\044\107\054\125\064" +
    "\113\065\106\070\121\001\002\000\014\041\uffb6\042\uffb6" +
    "\055\uffb6\062\uffb6\063\uffb6\001\002\000\030\011\uffb2\012" +
    "\uffb2\032\uffb2\037\uffb2\040\uffb2\043\uffb2\044\uffb2\054\uffb2" +
    "\064\uffb2\065\uffb2\070\uffb2\001\002\000\030\011\uffb1\012" +
    "\uffb1\032\uffb1\037\uffb1\040\uffb1\043\uffb1\044\uffb1\054\uffb1" +
    "\064\uffb1\065\uffb1\070\uffb1\001\002\000\014\041\155\042" +
    "\156\055\uffb7\062\uffb7\063\uffb7\001\002\000\014\041\155" +
    "\042\156\055\uffb5\062\uffb5\063\uffb5\001\002\000\044\031" +
    "\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\041\uffcf" +
    "\042\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052" +
    "\uffcf\055\uffcf\062\uffcf\063\uffcf\001\002\000\004\063\163" +
    "\001\002\000\050\004\uff8f\005\uff8f\006\uff8f\007\uff8f\010" +
    "\uff8f\013\uff8f\015\uff8f\020\uff8f\022\uff8f\023\uff8f\026\uff8f" +
    "\027\uff8f\030\uff8f\037\uff8f\040\uff8f\061\uff8f\064\uff8f\067" +
    "\uff8f\070\uff8f\001\002\000\044\031\uffce\032\uffce\033\uffce" +
    "\034\uffce\035\uffce\036\uffce\041\uffce\042\uffce\045\uffce\046" +
    "\uffce\047\uffce\050\uffce\051\uffce\052\uffce\055\uffce\062\uffce" +
    "\063\uffce\001\002\000\044\031\uffcb\032\uffcb\033\142\034" +
    "\141\035\143\036\133\041\uffcb\042\uffcb\045\uffcb\046\uffcb" +
    "\047\uffcb\050\uffcb\051\uffcb\052\uffcb\055\uffcb\062\uffcb\063" +
    "\uffcb\001\002\000\050\004\uff88\005\uff88\006\uff88\007\uff88" +
    "\010\uff88\013\uff88\015\uff88\020\uff88\022\uff88\023\uff88\026" +
    "\uff88\027\uff88\030\uff88\037\uff88\040\uff88\061\uff88\064\uff88" +
    "\067\uff88\070\uff88\001\002\000\004\061\uff8b\001\002\000" +
    "\006\066\172\070\171\001\002\000\004\055\175\001\002" +
    "\000\004\055\173\001\002\000\004\063\174\001\002\000" +
    "\050\004\uff9d\005\uff9d\006\uff9d\007\uff9d\010\uff9d\013\uff9d" +
    "\015\uff9d\020\uff9d\022\uff9d\023\uff9d\026\uff9d\027\uff9d\030" +
    "\uff9d\037\uff9d\040\uff9d\061\uff9d\064\uff9d\067\uff9d\070\uff9d" +
    "\001\002\000\004\063\176\001\002\000\050\004\uff9e\005" +
    "\uff9e\006\uff9e\007\uff9e\010\uff9e\013\uff9e\015\uff9e\020\uff9e" +
    "\022\uff9e\023\uff9e\026\uff9e\027\uff9e\030\uff9e\037\uff9e\040" +
    "\uff9e\061\uff9e\064\uff9e\067\uff9e\070\uff9e\001\002\000\004" +
    "\061\uffea\001\002\000\010\064\203\067\202\070\201\001" +
    "\002\000\004\063\uff74\001\002\000\004\063\uff75\001\002" +
    "\000\004\063\uff76\001\002\000\004\060\206\001\002\000" +
    "\050\004\uff83\005\uff83\006\uff83\007\uff83\010\uff83\013\uff83" +
    "\015\uff83\020\uff83\022\uff83\023\uff83\026\uff83\027\uff83\030" +
    "\uff83\037\uff83\040\uff83\061\uff83\064\uff83\067\uff83\070\uff83" +
    "\001\002\000\014\004\026\005\021\064\023\067\034\070" +
    "\213\001\002\000\004\053\204\001\002\000\004\061\227" +
    "\001\002\000\006\061\uff7f\062\225\001\002\000\004\070" +
    "\221\001\002\000\010\056\214\061\uff7b\062\uff7b\001\002" +
    "\000\006\064\217\070\215\001\002\000\004\057\uff79\001" +
    "\002\000\004\057\220\001\002\000\004\057\uff7a\001\002" +
    "\000\006\053\uff73\063\uff73\001\002\000\004\056\223\001" +
    "\002\000\006\053\uff80\063\uff80\001\002\000\010\057\224" +
    "\064\217\070\215\001\002\000\004\053\uff84\001\002\000" +
    "\014\004\026\005\021\064\023\067\034\070\213\001\002" +
    "\000\004\061\uff7e\001\002\000\004\063\uff82\001\002\000" +
    "\004\063\231\001\002\000\050\004\uffde\005\uffde\006\uffde" +
    "\007\uffde\010\uffde\013\uffde\015\uffde\020\uffde\022\uffde\023" +
    "\uffde\026\uffde\027\uffde\030\uffde\037\uffde\040\uffde\061\uffde" +
    "\064\uffde\067\uffde\070\uffde\001\002\000\052\004\uff86\005" +
    "\uff86\006\uff86\007\uff86\010\uff86\013\uff86\015\uff86\020\uff86" +
    "\022\uff86\023\uff86\026\uff86\027\uff86\030\uff86\037\uff86\040" +
    "\uff86\061\uff86\062\uff86\064\uff86\067\uff86\070\uff86\001\002" +
    "\000\004\063\234\001\002\000\050\004\uffdf\005\uffdf\006" +
    "\uffdf\007\uffdf\010\uffdf\013\uffdf\015\uffdf\020\uffdf\022\uffdf" +
    "\023\uffdf\026\uffdf\027\uffdf\030\uffdf\037\uffdf\040\uffdf\061" +
    "\uffdf\064\uffdf\067\uffdf\070\uffdf\001\002\000\006\053\uffdd" +
    "\063\uffdd\001\002\000\010\055\uffd3\062\uffd3\063\uffd3\001" +
    "\002\000\010\055\uffd2\062\uffd2\063\uffd2\001\002\000\004" +
    "\063\243\001\002\000\010\055\uffd4\062\uffd4\063\uffd4\001" +
    "\002\000\014\041\155\042\156\055\uffd1\062\uffd1\063\uffd1" +
    "\001\002\000\050\004\uff87\005\uff87\006\uff87\007\uff87\010" +
    "\uff87\013\uff87\015\uff87\020\uff87\022\uff87\023\uff87\026\uff87" +
    "\027\uff87\030\uff87\037\uff87\040\uff87\061\uff87\064\uff87\067" +
    "\uff87\070\uff87\001\002\000\004\060\245\001\002\000\014" +
    "\004\026\005\021\064\023\067\034\070\213\001\002\000" +
    "\004\061\247\001\002\000\004\063\uff81\001\002\000\040" +
    "\011\114\012\120\024\270\025\265\032\105\037\116\040" +
    "\111\043\122\044\107\054\125\064\113\065\106\066\236" +
    "\067\237\070\264\001\002\000\050\004\uffe0\005\uffe0\006" +
    "\uffe0\007\uffe0\010\uffe0\013\uffe0\015\uffe0\020\uffe0\022\uffe0" +
    "\023\uffe0\026\uffe0\027\uffe0\030\uffe0\037\uffe0\040\uffe0\061" +
    "\uffe0\064\uffe0\067\uffe0\070\uffe0\001\002\000\036\011\114" +
    "\012\120\032\105\037\116\040\111\043\122\044\107\054" +
    "\125\055\253\064\113\065\106\066\236\067\237\070\121" +
    "\001\002\000\004\063\263\001\002\000\004\055\261\001" +
    "\002\000\006\055\uffaa\062\uffaa\001\002\000\006\055\uffac" +
    "\062\257\001\002\000\034\011\114\012\120\032\105\037" +
    "\116\040\111\043\122\044\107\054\125\064\113\065\106" +
    "\066\236\067\237\070\121\001\002\000\004\055\uffab\001" +
    "\002\000\004\063\262\001\002\000\052\004\uffae\005\uffae" +
    "\006\uffae\007\uffae\010\uffae\013\uffae\015\uffae\020\uffae\022" +
    "\uffae\023\uffae\026\uffae\027\uffae\030\uffae\037\uffae\040\uffae" +
    "\061\uffae\063\uffae\064\uffae\067\uffae\070\uffae\001\002\000" +
    "\052\004\uffad\005\uffad\006\uffad\007\uffad\010\uffad\013\uffad" +
    "\015\uffad\020\uffad\022\uffad\023\uffad\026\uffad\027\uffad\030" +
    "\uffad\037\uffad\040\uffad\061\uffad\063\uffad\064\uffad\067\uffad" +
    "\070\uffad\001\002\000\042\031\uffc2\032\uffc2\033\uffc2\034" +
    "\uffc2\035\uffc2\036\uffc2\041\uffc2\042\uffc2\045\uffc2\046\uffc2" +
    "\047\uffc2\050\uffc2\051\uffc2\052\uffc2\054\252\063\uffc2\001" +
    "\002\000\004\054\302\001\002\000\004\063\301\001\002" +
    "\000\004\063\uffa8\001\002\000\004\054\276\001\002\000" +
    "\004\063\275\001\002\000\004\063\274\001\002\000\004" +
    "\063\uffa9\001\002\000\052\004\uffd9\005\uffd9\006\uffd9\007" +
    "\uffd9\010\uffd9\013\uffd9\015\uffd9\020\uffd9\022\uffd9\023\uffd9" +
    "\026\uffd9\027\uffd9\030\uffd9\037\uffd9\040\uffd9\055\uffd9\061" +
    "\uffd9\064\uffd9\067\uffd9\070\uffd9\001\002\000\052\004\uffda" +
    "\005\uffda\006\uffda\007\uffda\010\uffda\013\uffda\015\uffda\020" +
    "\uffda\022\uffda\023\uffda\026\uffda\027\uffda\030\uffda\037\uffda" +
    "\040\uffda\055\uffda\061\uffda\064\uffda\067\uffda\070\uffda\001" +
    "\002\000\004\055\277\001\002\000\004\063\300\001\002" +
    "\000\004\063\uffa7\001\002\000\052\004\uffd8\005\uffd8\006" +
    "\uffd8\007\uffd8\010\uffd8\013\uffd8\015\uffd8\020\uffd8\022\uffd8" +
    "\023\uffd8\026\uffd8\027\uffd8\030\uffd8\037\uffd8\040\uffd8\055" +
    "\uffd8\061\uffd8\064\uffd8\067\uffd8\070\uffd8\001\002\000\004" +
    "\055\303\001\002\000\004\063\304\001\002\000\004\063" +
    "\uffa6\001\002\000\040\011\114\012\120\024\270\025\265" +
    "\032\105\037\116\040\111\043\122\044\107\054\125\064" +
    "\113\065\106\066\236\067\237\070\264\001\002\000\050" +
    "\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\013\uffe9\015" +
    "\uffe9\020\uffe9\022\uffe9\023\uffe9\026\uffe9\027\uffe9\030\uffe9" +
    "\037\uffe9\040\uffe9\061\uffe9\064\uffe9\067\uffe9\070\uffe9\001" +
    "\002\000\004\063\uffd5\001\002\000\004\063\uffd7\001\002" +
    "\000\004\063\uffd6\001\002\000\030\011\114\012\120\032" +
    "\105\037\116\040\111\043\122\044\107\054\125\064\113" +
    "\065\106\070\121\001\002\000\010\041\155\042\156\055" +
    "\314\001\002\000\004\060\315\001\002\000\044\004\026" +
    "\005\021\006\066\007\063\010\044\013\047\015\040\020" +
    "\072\022\031\026\024\027\025\030\071\037\056\040\060" +
    "\064\023\067\034\070\042\001\002\000\004\061\317\001" +
    "\002\000\054\004\uff96\005\uff96\006\uff96\007\uff96\010\uff96" +
    "\013\uff96\015\uff96\016\uff96\017\uff96\020\uff96\022\uff96\023" +
    "\uff96\026\uff96\027\uff96\030\uff96\037\uff96\040\uff96\061\uff96" +
    "\064\uff96\067\uff96\070\uff96\001\002\000\010\053\uffdc\056" +
    "\223\063\uffdc\001\002\000\004\060\336\001\002\000\004" +
    "\054\330\001\002\000\050\004\uff98\005\uff98\006\uff98\007" +
    "\uff98\010\uff98\013\uff98\015\uff98\020\uff98\022\uff98\023\uff98" +
    "\026\uff98\027\uff98\030\uff98\037\uff98\040\uff98\061\uff98\064" +
    "\uff98\067\uff98\070\uff98\001\002\000\054\004\uff95\005\uff95" +
    "\006\uff95\007\uff95\010\uff95\013\uff95\015\uff95\016\322\017" +
    "\uff95\020\uff95\022\uff95\023\uff95\026\uff95\027\uff95\030\uff95" +
    "\037\uff95\040\uff95\061\uff95\064\uff95\067\uff95\070\uff95\001" +
    "\002\000\052\004\uff99\005\uff99\006\uff99\007\uff99\010\uff99" +
    "\013\uff99\015\uff99\017\321\020\uff99\022\uff99\023\uff99\026" +
    "\uff99\027\uff99\030\uff99\037\uff99\040\uff99\061\uff99\064\uff99" +
    "\067\uff99\070\uff99\001\002\000\050\004\uff9a\005\uff9a\006" +
    "\uff9a\007\uff9a\010\uff9a\013\uff9a\015\uff9a\020\uff9a\022\uff9a" +
    "\023\uff9a\026\uff9a\027\uff9a\030\uff9a\037\uff9a\040\uff9a\061" +
    "\uff9a\064\uff9a\067\uff9a\070\uff9a\001\002\000\052\004\uff94" +
    "\005\uff94\006\uff94\007\uff94\010\uff94\013\uff94\015\uff94\017" +
    "\uff94\020\uff94\022\uff94\023\uff94\026\uff94\027\uff94\030\uff94" +
    "\037\uff94\040\uff94\061\uff94\064\uff94\067\uff94\070\uff94\001" +
    "\002\000\030\011\114\012\120\032\105\037\116\040\111" +
    "\043\122\044\107\054\125\064\113\065\106\070\121\001" +
    "\002\000\010\041\155\042\156\055\332\001\002\000\004" +
    "\060\333\001\002\000\044\004\026\005\021\006\066\007" +
    "\063\010\044\013\047\015\040\020\072\022\031\026\024" +
    "\027\025\030\071\037\056\040\060\064\023\067\034\070" +
    "\042\001\002\000\004\061\335\001\002\000\054\004\uff93" +
    "\005\uff93\006\uff93\007\uff93\010\uff93\013\uff93\015\uff93\016" +
    "\uff93\017\uff93\020\uff93\022\uff93\023\uff93\026\uff93\027\uff93" +
    "\030\uff93\037\uff93\040\uff93\061\uff93\064\uff93\067\uff93\070" +
    "\uff93\001\002\000\044\004\026\005\021\006\066\007\063" +
    "\010\044\013\047\015\040\020\072\022\031\026\024\027" +
    "\025\030\071\037\056\040\060\064\023\067\034\070\042" +
    "\001\002\000\004\061\340\001\002\000\050\004\uff92\005" +
    "\uff92\006\uff92\007\uff92\010\uff92\013\uff92\015\uff92\020\uff92" +
    "\022\uff92\023\uff92\026\uff92\027\uff92\030\uff92\037\uff92\040" +
    "\uff92\061\uff92\064\uff92\067\uff92\070\uff92\001\002\000\012" +
    "\002\ufffe\004\ufffe\007\ufffe\010\ufffe\001\002\000\014\004" +
    "\026\005\021\006\066\007\063\010\044\001\002\000\004" +
    "\063\347\001\002\000\004\053\305\001\002\000\004\070" +
    "\346\001\002\000\004\053\uffdc\001\002\000\030\011\114" +
    "\012\120\032\105\037\116\040\111\043\122\044\107\054" +
    "\125\064\113\065\106\070\121\001\002\000\010\041\155" +
    "\042\156\063\351\001\002\000\016\004\026\005\021\006" +
    "\066\007\063\010\044\070\353\001\002\000\004\055\354" +
    "\001\002\000\004\053\250\001\002\000\004\060\355\001" +
    "\002\000\046\004\026\005\021\006\066\007\063\010\044" +
    "\013\047\015\040\020\072\022\031\023\077\026\024\027" +
    "\025\030\071\037\056\040\060\064\023\067\034\070\042" +
    "\001\002\000\004\061\357\001\002\000\050\004\uff8e\005" +
    "\uff8e\006\uff8e\007\uff8e\010\uff8e\013\uff8e\015\uff8e\020\uff8e" +
    "\022\uff8e\023\uff8e\026\uff8e\027\uff8e\030\uff8e\037\uff8e\040" +
    "\uff8e\061\uff8e\064\uff8e\067\uff8e\070\uff8e\001\002\000\052" +
    "\004\uff85\005\uff85\006\uff85\007\uff85\010\uff85\013\uff85\015" +
    "\uff85\020\uff85\022\uff85\023\uff85\026\uff85\027\uff85\030\uff85" +
    "\037\uff85\040\uff85\061\uff85\062\uff85\064\uff85\067\uff85\070" +
    "\uff85\001\002\000\006\065\363\070\362\001\002\000\004" +
    "\055\366\001\002\000\004\055\364\001\002\000\004\063" +
    "\365\001\002\000\050\004\uff9f\005\uff9f\006\uff9f\007\uff9f" +
    "\010\uff9f\013\uff9f\015\uff9f\020\uff9f\022\uff9f\023\uff9f\026" +
    "\uff9f\027\uff9f\030\uff9f\037\uff9f\040\uff9f\061\uff9f\064\uff9f" +
    "\067\uff9f\070\uff9f\001\002\000\004\063\367\001\002\000" +
    "\050\004\uffa0\005\uffa0\006\uffa0\007\uffa0\010\uffa0\013\uffa0" +
    "\015\uffa0\020\uffa0\022\uffa0\023\uffa0\026\uffa0\027\uffa0\030" +
    "\uffa0\037\uffa0\040\uffa0\061\uffa0\064\uffa0\067\uffa0\070\uffa0" +
    "\001\002\000\006\064\372\070\371\001\002\000\004\055" +
    "\375\001\002\000\004\055\373\001\002\000\004\063\374" +
    "\001\002\000\050\004\uffa1\005\uffa1\006\uffa1\007\uffa1\010" +
    "\uffa1\013\uffa1\015\uffa1\020\uffa1\022\uffa1\023\uffa1\026\uffa1" +
    "\027\uffa1\030\uffa1\037\uffa1\040\uffa1\061\uffa1\064\uffa1\067" +
    "\uffa1\070\uffa1\001\002\000\004\063\376\001\002\000\050" +
    "\004\uffa2\005\uffa2\006\uffa2\007\uffa2\010\uffa2\013\uffa2\015" +
    "\uffa2\020\uffa2\022\uffa2\023\uffa2\026\uffa2\027\uffa2\030\uffa2" +
    "\037\uffa2\040\uffa2\061\uffa2\064\uffa2\067\uffa2\070\uffa2\001" +
    "\002\000\052\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb" +
    "\013\uffdb\015\uffdb\020\uffdb\022\uffdb\023\uffdb\026\uffdb\027" +
    "\uffdb\030\uffdb\037\uffdb\040\uffdb\055\uffdb\061\uffdb\064\uffdb" +
    "\067\uffdb\070\uffdb\001\002\000\004\054\ufff4\001\002\000" +
    "\004\054\ufff6\001\002\000\004\054\ufff5\001\002\000\012" +
    "\002\ufffd\004\ufffd\007\ufffd\010\ufffd\001\002\000\004\054" +
    "\u0107\001\002\000\012\002\uffff\004\012\007\010\010\011" +
    "\001\002\000\012\002\ufffc\004\ufffc\007\ufffc\010\ufffc\001" +
    "\002\000\016\004\026\005\021\006\066\007\063\010\044" +
    "\055\u0108\001\002\000\004\060\u0115\001\002\000\006\055" +
    "\ufff3\062\u0113\001\002\000\004\070\u0112\001\002\000\004" +
    "\070\u0111\001\002\000\004\055\u010d\001\002\000\004\060" +
    "\u010e\001\002\000\044\004\026\005\021\006\066\007\063" +
    "\010\044\013\047\015\040\020\072\022\031\026\024\027" +
    "\025\030\071\037\056\040\060\064\023\067\034\070\042" +
    "\001\002\000\004\061\u0110\001\002\000\012\002\ufffb\004" +
    "\ufffb\007\ufffb\010\ufffb\001\002\000\006\055\ufff0\062\ufff0" +
    "\001\002\000\006\055\ufff1\062\ufff1\001\002\000\014\004" +
    "\026\005\021\006\066\007\063\010\044\001\002\000\004" +
    "\055\ufff2\001\002\000\044\004\026\005\021\006\066\007" +
    "\063\010\044\013\047\015\040\020\072\022\031\026\024" +
    "\027\025\030\071\037\056\040\060\064\023\067\034\070" +
    "\042\001\002\000\004\061\u0117\001\002\000\012\002\ufffa" +
    "\004\ufffa\007\ufffa\010\ufffa\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0116\000\012\002\003\006\004\007\005\010\006\001" +
    "\001\000\002\001\001\000\012\004\u0104\005\u0102\007\005" +
    "\010\u0103\001\001\000\004\011\u0100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\072\003\051\012" +
    "\031\015\042\016\064\017\040\020\067\021\017\022\066" +
    "\024\054\027\016\034\047\035\026\036\060\037\015\052" +
    "\044\053\021\054\053\055\034\061\032\062\052\067\045" +
    "\070\056\071\063\073\050\075\061\076\027\077\036\100" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\056\324\057\323\060\322\001\001\000\004\071\221\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\030\237\040\240" +
    "\041\123\043\111\044\241\046\107\047\122\050\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\070\003\051\015\176\016\064\017\040\020\067" +
    "\021\017\022\066\024\054\027\016\034\047\035\026\036" +
    "\060\037\015\052\044\053\021\054\053\055\034\061\032" +
    "\062\052\067\045\070\056\071\063\073\050\075\061\076" +
    "\027\077\036\100\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\076\003\051\016\100\017\040\020\067\021\017" +
    "\022\066\024\054\027\016\034\047\035\026\036\060\037" +
    "\015\052\044\053\021\054\053\055\034\061\032\062\052" +
    "\063\077\064\075\065\074\066\073\067\045\070\056\071" +
    "\063\073\050\075\061\076\027\077\036\100\035\001\001" +
    "\000\002\001\001\000\074\003\051\016\100\017\040\020" +
    "\067\021\017\022\066\024\054\027\016\034\047\035\026" +
    "\036\060\037\015\052\044\053\021\054\053\055\034\061" +
    "\032\062\052\064\166\065\074\066\073\067\045\070\056" +
    "\071\063\073\050\075\061\076\027\077\036\100\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\041\123\043\111\044\114\046\107\047\122\050\116" +
    "\001\001\000\006\041\164\043\111\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\043\163" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\045\152\001\001\000\004\043\160\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\041\123\043\111\044\157\046\107" +
    "\047\122\050\116\001\001\000\006\042\127\051\145\001" +
    "\001\000\016\041\126\043\111\044\125\046\107\047\122" +
    "\050\116\001\001\000\004\045\152\001\001\000\006\042" +
    "\127\051\145\001\001\000\006\041\151\043\111\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\041\146\043\111\001\001\000\004\042\127\001" +
    "\001\000\006\041\150\043\111\001\001\000\004\042\127" +
    "\001\001\000\004\042\127\001\001\000\016\041\123\043" +
    "\111\044\156\046\107\047\122\050\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\045" +
    "\152\001\001\000\004\045\152\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\067\045\070\056\071\063\073" +
    "\210\074\207\075\206\076\027\100\211\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\071" +
    "\221\001\001\000\002\001\001\000\004\072\215\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\072\215\001\001\000\002\001\001\000\022\067\045\070" +
    "\056\071\063\073\210\074\225\075\206\076\027\100\211" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\045\152\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\067\045\070\056\071\063\073\210\074\245\075\206" +
    "\076\027\100\211\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\024\271\030\270\031\265\032\272\033\266" +
    "\040\240\041\123\043\111\044\241\046\107\047\122\050" +
    "\116\001\001\000\002\001\001\000\026\025\253\026\255" +
    "\030\254\040\240\041\123\043\111\044\241\046\107\047" +
    "\122\050\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\025\257\026" +
    "\255\030\254\040\240\041\123\043\111\044\241\046\107" +
    "\047\122\050\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\024\310\030\307\031\306\032\272\033\266\040\240" +
    "\041\123\043\111\044\241\046\107\047\122\050\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\041\123\043\111\044\312\046" +
    "\107\047\122\050\116\001\001\000\004\045\152\001\001" +
    "\000\002\001\001\000\072\003\051\012\315\015\042\016" +
    "\064\017\040\020\067\021\017\022\066\024\054\027\016" +
    "\034\047\035\026\036\060\037\015\052\044\053\021\054" +
    "\053\055\034\061\032\062\052\067\045\070\056\071\063" +
    "\073\050\075\061\076\027\077\036\100\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\056" +
    "\326\057\323\001\001\000\004\060\325\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\041\123\043\111\044" +
    "\330\046\107\047\122\050\116\001\001\000\004\045\152" +
    "\001\001\000\002\001\001\000\072\003\051\012\333\015" +
    "\042\016\064\017\040\020\067\021\017\022\066\024\054" +
    "\027\016\034\047\035\026\036\060\037\015\052\044\053" +
    "\021\054\053\055\034\061\032\062\052\067\045\070\056" +
    "\071\063\073\050\075\061\076\027\077\036\100\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\072\003\051" +
    "\012\336\015\042\016\064\017\040\020\067\021\017\022" +
    "\066\024\054\027\016\034\047\035\026\036\060\037\015" +
    "\052\044\053\021\054\053\055\034\061\032\062\052\067" +
    "\045\070\056\071\063\073\050\075\061\076\027\077\036" +
    "\100\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\051\017\343\021\342\100\344" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\041\123\043\111\044\347" +
    "\046\107\047\122\050\116\001\001\000\004\045\152\001" +
    "\001\000\014\003\051\017\343\020\351\021\017\100\344" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\076\003\051\016\100\017\040\020\067\021\017" +
    "\022\066\024\054\027\016\034\047\035\026\036\060\037" +
    "\015\052\044\053\021\054\053\055\034\061\032\062\052" +
    "\063\355\064\075\065\074\066\073\067\045\070\056\071" +
    "\063\073\050\075\061\076\027\077\036\100\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\u0105\007\005\010\u0103\001\001\000\002" +
    "\001\001\000\012\003\u0109\013\u010b\014\u0108\100\u010a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\072\003\051\012\u010e\015\042\016\064\017\040\020\067" +
    "\021\017\022\066\024\054\027\016\034\047\035\026\036" +
    "\060\037\015\052\044\053\021\054\053\055\034\061\032" +
    "\062\052\067\045\070\056\071\063\073\050\075\061\076" +
    "\027\077\036\100\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\u0109\013\u0113\014\u0108\100\u010a\001\001\000\002\001\001" +
    "\000\072\003\051\012\u0115\015\042\016\064\017\040\020" +
    "\067\021\017\022\066\024\054\027\016\034\047\035\026" +
    "\036\060\037\015\052\044\053\021\054\053\055\034\061" +
    "\032\062\052\067\045\070\056\071\063\073\050\075\061" +
    "\076\027\077\036\100\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


    Lexer lex;

    @SuppressWarnings("deprecation")
    public parser(Lexer lex){
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    private HashMap<String, ArrayList<String>> listaTablaSimbolos = new HashMap<String, ArrayList<String>>();
    String currentHash;

    private void imprimirTablaSimbolos(){
        for(String key: listaTablaSimbolos.keySet()){
            System.out.println("-------------------------");
            System.out.println("");
            System.out.println("Tabla de símbolos: "+key);
            System.out.println("Valores: ");
            for(String item: listaTablaSimbolos.get(key)){
                System.out.println(item);
            }

            System.out.println("");
        }

    }


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= nuevoLenguaje EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // nuevoLenguaje ::= funcionMain 
            {
              Object RESULT =null;
		System.out.println("Funcion main"); imprimirTablaSimbolos(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nuevoLenguaje",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // nuevoLenguaje ::= funcionMain funciones 
            {
              Object RESULT =null;
		System.out.println("Funciones y funcion main"); imprimirTablaSimbolos();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nuevoLenguaje",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // funcionMain ::= iniFun LPARENT RPARENT INIBLOQUE bloque FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionMain",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // funciones ::= funcion 
            {
              Object RESULT =null;
		 System.out.println("funcion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // funciones ::= funciones funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // funcion ::= iniFun LPARENT parametros RPARENT INIBLOQUE bloque FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // funcion ::= iniFun LPARENT RPARENT INIBLOQUE bloque FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipoRet ::= INT 
            {
              Object RESULT =null;
		 RESULT = "int";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoRet",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipoRet ::= FLOAT 
            {
              Object RESULT =null;
		 RESULT = "float";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoRet",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipoRet ::= BOOLEAN 
            {
              Object RESULT =null;
		 RESULT = "boolean";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoRet",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // iniFun ::= tipoRet identifier 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
           String tipoTabla;
           if(id.toString().equals("main")){
            tipoTabla = "tipo:main: "+tip.toString();
           }
           else{
            tipoTabla = "tipo:funcion: "+tip.toString();
           }
           ArrayList<String> listaSimbolos = new ArrayList<String>();
           currentHash = id.toString();
           listaSimbolos.add(tipoTabla);
           listaTablaSimbolos.put(currentHash, listaSimbolos);
           RESULT = tip.toString()+" "+id.toString();


              CUP$parser$result = parser.getSymbolFactory().newSymbol("iniFun",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // identifier ::= MAIN 
            {
              Object RESULT =null;
		 RESULT = "main";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // identifier ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = id.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parametros ::= parametro COMA parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parametro ::= tipoVar ID 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 listaTablaSimbolos.get(currentHash).add("Parámetro: "+id.toString()+": "+tip.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parametro ::= tipoSubset ID 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 listaTablaSimbolos.get(currentHash).add("Parámetro: "+id.toString()+": "+tip.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipoVar ::= FLOAT 
            {
              Object RESULT =null;
		 RESULT = "float";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVar",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipoVar ::= STRING 
            {
              Object RESULT =null;
		 RESULT = "string";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVar",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipoVar ::= BOOLEAN 
            {
              Object RESULT =null;
		 RESULT = "boolean";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVar",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bloque ::= sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencias ::= sentencia sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentencia ::= creaVar FINEXP 
            {
              Object RESULT =null;
		int cvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  System.out.println("Sentencia Crea variable"); 
                        listaTablaSimbolos.get(currentHash).add(cv.toString()); 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencia ::= usaVar 
            {
              Object RESULT =null;
		System.out.println("Sentencia Usa variable");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentencia ::= asignacion 
            {
              Object RESULT =null;
		int asignleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asignright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object asign = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Sentencia Asignacion");
                        if(asign != null){
                            listaTablaSimbolos.get(currentHash).add(asign.toString());
                        }  
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentencia ::= llamaFunc 
            {
              Object RESULT =null;
		System.out.println("Sentencia Llamada a funcion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentencia ::= output 
            {
              Object RESULT =null;
		System.out.println("Sentencia Salida");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentencia ::= control 
            {
              Object RESULT =null;
		System.out.println("Sentencia Control");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentencia ::= returnFunc 
            {
              Object RESULT =null;
		System.out.println("Sentencia Return");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentencia ::= creaArreglo 
            {
              Object RESULT =null;
		int creaArrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int creaArrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object creaArr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Sentencia Creacion de arreglo");
                      listaTablaSimbolos.get(currentHash).add(creaArr.toString()); 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentencia ::= asignaArreglo 
            {
              Object RESULT =null;
		int asigArrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asigArrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object asigArr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Sentencia Asignacion de arreglo");
                        if(asigArr != null){
                            listaTablaSimbolos.get(currentHash).add(asigArr.toString());
                        }  
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // usaVar ::= ID FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("usaVar",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // usaVar ::= PLUS_UN ID FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("usaVar",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // usaVar ::= MINUS_UN ID FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("usaVar",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // creaVar ::= tipoVar ID 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Variable: "+ n); RESULT = n.toString()+": "+tip.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaVar",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // creaVar ::= tipoSubset ID 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Variable: "+ n); RESULT = n.toString()+": "+tip.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaVar",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // asignacion ::= creaAsignaVar FINEXP 
            {
              Object RESULT =null;
		int cvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = cv.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // asignacion ::= ID EQUIV literal FINEXP 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("Asignacion: "+ n + " = " + n3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // asignacion ::= ID EQUIV llamaFunc FINEXP 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("Asignacion: "+ n + " = " + n3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // asignacion ::= ID EQUIV input FINEXP 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("Asignacion: "+ n + " = " + n3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // creaAsignaVar ::= creaVar EQUIV literal 
            {
              Object RESULT =null;
		int cvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object cv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = cv.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaAsignaVar",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // creaAsignaVar ::= creaVar EQUIV llamaFunc 
            {
              Object RESULT =null;
		int cvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object cv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = cv.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaAsignaVar",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // creaAsignaVar ::= creaVar EQUIV input 
            {
              Object RESULT =null;
		int cvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object cv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = cv.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaAsignaVar",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // literal ::= operacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // literal ::= CADENA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Cadena: "+ n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // literal ::= CARACTER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Caracter: "+ n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operacion ::= operacionLogica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operacionAritmetica ::= operandoArit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operacionAritmetica ::= PLUS_UN operandoArit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // operacionAritmetica ::= MINUS_UN operandoArit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // operacionAritmetica ::= operacionAritmetica operadorArit operacionAritmetica 
            {
              Object RESULT =null;
		System.out.println("Operacion Arit +-*/ Arit");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // operacionAritmetica ::= LPARENT operacionAritmetica RPARENT 
            {
              Object RESULT =null;
		System.out.println("Operacion Arit (Arit)");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // operacionAritmetica ::= MINUS operacionAritmetica 
            {
              Object RESULT =null;
		System.out.println("Operacion Arit -Arit"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // operadorArit ::= PLUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // operadorArit ::= MINUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // operadorArit ::= TIMES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operadorArit ::= DIV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // operadorArit ::= POWER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // operadorArit ::= MODULE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // operandoArit ::= ENTERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Entero: "+ n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operandoArit ::= DECIMAL 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Decimal: "+ n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // operandoArit ::= ID 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("ID: "+ n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // operacionRelacional ::= operacionAritmetica operadorRel operacionAritmetica 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println( "Operacion Relacional");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionRelacional",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // operadorRel ::= MAYOR_QUE 
            {
              Object RESULT =null;
		System.out.println(">");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // operadorRel ::= MAYOR_IGUAL 
            {
              Object RESULT =null;
		System.out.println(">=");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operadorRel ::= MENOR_QUE 
            {
              Object RESULT =null;
		System.out.println("<");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operadorRel ::= MENOR_IGUAL 
            {
              Object RESULT =null;
		System.out.println("<=");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operadorRel ::= DEQUIV 
            {
              Object RESULT =null;
		System.out.println("==");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // operadorRel ::= DIF 
            {
              Object RESULT =null;
		System.out.println("!=");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operacionLogica ::= operandoLog 
            {
              Object RESULT =null;
		int opLogicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opLogicright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opLogic = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = opLogic.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionLogica",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operacionLogica ::= operacionRelacional 
            {
              Object RESULT =null;
		System.out.println("Operacion Rel");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionLogica",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // operacionLogica ::= operacionAritmetica 
            {
              Object RESULT =null;
		System.out.println("Operacion Arit");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionLogica",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // operacionLogica ::= operacionLogica operadorLog operacionLogica 
            {
              Object RESULT =null;
		System.out.println("Operacion Logica");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionLogica",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // operacionLogica ::= LPARENT operacionLogica RPARENT 
            {
              Object RESULT =null;
		System.out.println("Parentesis");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionLogica",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // operacionLogica ::= negacion operacionLogica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionLogica",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // operandoLog ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoLog",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // operandoLog ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoLog",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // operadorLog ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLog",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // operadorLog ::= OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLog",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // negacion ::= NOT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("negacion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // negacion ::= EXCLAMACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("negacion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // llamaFunc ::= ID LPARENT parametrosLlamada RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamaFunc",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // llamaFunc ::= ID LPARENT RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamaFunc",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // parametrosLlamada ::= parametroLlamada 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosLlamada",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // parametrosLlamada ::= parametroLlamada COMA parametrosLlamada 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosLlamada",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // parametroLlamada ::= literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroLlamada",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // input ::= leeInt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("input",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // input ::= leeFloat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("input",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // leeInt ::= READ_INT LPARENT RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leeInt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // leeFloat ::= READ_FLOAT LPARENT RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leeFloat",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // output ::= escribeInt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("output",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // output ::= escribeFloat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("output",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // output ::= escribeString 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("output",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // escribeInt ::= PRINT_INT LPARENT ID RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribeInt",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // escribeInt ::= PRINT_INT LPARENT ENTERO RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribeInt",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // escribeFloat ::= PRINT_FLOAT LPARENT ID RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribeFloat",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // escribeFloat ::= PRINT_FLOAT LPARENT DECIMAL RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribeFloat",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // escribeString ::= PRINT_STRING LPARENT ID RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribeString",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // escribeString ::= PRINT_STRING LPARENT CADENA RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribeString",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // control ::= condicional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // control ::= ciclo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // condicional ::= condIf condsElif condElse 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // condicional ::= condIf condsElif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // condicional ::= condIf condElse 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // condicional ::= condIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // condIf ::= IF LPARENT operacionLogica RPARENT INIBLOQUE bloque FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condIf",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // condsElif ::= condElif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condsElif",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // condsElif ::= condElif condsElif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condsElif",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // condElif ::= ELIF LPARENT operacionLogica RPARENT INIBLOQUE bloque FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condElif",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // condElse ::= ELSE INIBLOQUE bloque FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condElse",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ciclo ::= cicloDoWhile 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ciclo ::= cicloFor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // cicloDoWhile ::= DO INIBLOQUE bloqueCiclo FINBLOQUE WHILE LPARENT operacionLogica RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cicloDoWhile",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // cicloFor ::= FOR LPARENT creaAsignaVar FINEXP operacionLogica FINEXP asignacion RPARENT INIBLOQUE bloqueCiclo FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cicloFor",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // bloqueCiclo ::= sentenciasCiclo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueCiclo",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // sentenciasCiclo ::= sentenciaCiclo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasCiclo",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // sentenciasCiclo ::= sentenciaCiclo sentenciasCiclo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasCiclo",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // sentenciaCiclo ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaCiclo",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // sentenciaCiclo ::= breakCiclo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaCiclo",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // breakCiclo ::= BREAK FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("breakCiclo",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // returnFunc ::= RETURN literal FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnFunc",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // asignaArreglo ::= asignaElementoArreglo FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaArreglo",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // asignaArreglo ::= creaAsignaArreglo FINEXP 
            {
              Object RESULT =null;
		int creaArrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int creaArrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object creaArr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = creaArr.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaArreglo",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // arregloSinTam ::= tipoSubset ID LPARENT_CUAD RPARENT_CUAD 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = id.toString()+": "+tip.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arregloSinTam",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // creaArreglo ::= tipoArreglo FINEXP 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = tip.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaArreglo",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // creaAsignaArreglo ::= tipoArreglo EQUIV INIBLOQUE asignaArreglos FINBLOQUE 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = tip.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaAsignaArreglo",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // creaAsignaArreglo ::= arregloSinTam EQUIV INIBLOQUE asignaArreglos FINBLOQUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = a.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaAsignaArreglo",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // tipoArreglo ::= tipoSubset expArreglo 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp.toString()+": "+tip.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoArreglo",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // asignaArreglos ::= asignaArreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaArreglos",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // asignaArreglos ::= asignaArreglo COMA asignaArreglos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaArreglos",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // asignaArreglo ::= CARACTER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaArreglo",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // asignaArreglo ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaArreglo",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // asignaArreglo ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaArreglo",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // cantidadArreglo ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cantidadArreglo",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // cantidadArreglo ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cantidadArreglo",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // tipoSubset ::= INT 
            {
              Object RESULT =null;
		 RESULT = "int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoSubset",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // tipoSubset ::= CHAR 
            {
              Object RESULT =null;
		 RESULT = "char"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoSubset",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // asignaElementoArreglo ::= expArreglo EQUIV ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaElementoArreglo",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // asignaElementoArreglo ::= expArreglo EQUIV CARACTER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaElementoArreglo",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // asignaElementoArreglo ::= expArreglo EQUIV ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaElementoArreglo",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // expArreglo ::= ID LPARENT_CUAD cantidadArreglo RPARENT_CUAD 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = id.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArreglo",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
