
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ParserLexer;

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Collection;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\254\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\006\011\000\002\006\003\000\002\004\003" +
    "\000\002\004\004\000\002\005\012\000\002\005\011\000" +
    "\002\005\011\000\002\005\010\000\002\005\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\010" +
    "\004\000\002\011\002\000\002\012\003\000\002\012\003" +
    "\000\002\014\003\000\002\014\005\000\002\015\004\000" +
    "\002\015\004\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\076\003\000\002\076\003\000\002\013" +
    "\003\000\002\016\003\000\002\016\004\000\002\017\004" +
    "\000\002\017\003\000\002\017\003\000\002\017\004\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\023\004\000\002\023\005\000\002\023\005" +
    "\000\002\020\004\000\002\020\004\000\002\021\004\000" +
    "\002\021\006\000\002\021\006\000\002\022\005\000\002" +
    "\022\005\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\040\003" +
    "\000\002\041\003\000\002\041\004\000\002\041\004\000" +
    "\002\041\005\000\002\041\005\000\002\041\004\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\042\003\000\002\042\003\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\050\005\000\002\051\003\000\002" +
    "\051\003\000\002\051\003\000\002\051\003\000\002\051" +
    "\003\000\002\051\003\000\002\044\003\000\002\044\003" +
    "\000\002\044\003\000\002\044\005\000\002\044\005\000" +
    "\002\044\004\000\002\046\003\000\002\046\003\000\002" +
    "\045\003\000\002\045\003\000\002\047\003\000\002\047" +
    "\003\000\002\024\006\000\002\024\005\000\002\025\003" +
    "\000\002\025\005\000\002\026\003\000\002\031\003\000" +
    "\002\031\003\000\002\032\005\000\002\033\005\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\035" +
    "\007\000\002\035\007\000\002\036\007\000\002\036\007" +
    "\000\002\037\007\000\002\037\007\000\002\052\003\000" +
    "\002\052\003\000\002\054\006\000\002\054\005\000\002" +
    "\054\005\000\002\054\004\000\002\055\015\000\002\115" +
    "\002\000\002\121\002\000\002\116\002\000\002\117\002" +
    "\000\002\120\002\000\002\056\003\000\002\056\004\000" +
    "\002\057\015\000\002\124\002\000\002\125\002\000\002" +
    "\126\002\000\002\127\002\000\002\060\010\000\002\122" +
    "\002\000\002\123\002\000\002\053\003\000\002\053\003" +
    "\000\002\061\021\000\002\107\002\000\002\110\002\000" +
    "\002\111\002\000\002\112\002\000\002\113\002\000\002" +
    "\114\002\000\002\062\025\000\002\062\025\000\002\077" +
    "\002\000\002\100\002\000\002\101\002\000\002\102\002" +
    "\000\002\103\002\000\002\106\002\000\002\104\002\000" +
    "\002\105\002\000\002\063\004\000\002\027\005\000\002" +
    "\070\004\000\002\070\004\000\002\064\006\000\002\075" +
    "\004\000\002\074\007\000\002\074\007\000\002\074\005" +
    "\000\002\073\004\000\002\071\003\000\002\071\005\000" +
    "\002\072\003\000\002\072\003\000\002\072\003\000\002" +
    "\067\003\000\002\067\003\000\002\065\005\000\002\066" +
    "\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0134\000\012\003\012\004\004\007\014\010\010\001" +
    "\002\000\006\014\ufff5\070\ufff5\001\002\000\006\014\u0136" +
    "\070\u0134\001\002\000\012\003\ufffc\004\ufffc\007\ufffc\010" +
    "\ufffc\001\002\000\004\002\000\001\002\000\006\014\ufff3" +
    "\070\ufff3\001\002\000\004\002\u0133\001\002\000\014\002" +
    "\ufffd\003\ufff6\004\ufff6\007\ufff6\010\ufff6\001\002\000\012" +
    "\003\012\004\004\007\014\010\010\001\002\000\006\014" +
    "\ufff4\070\ufff4\001\002\000\004\054\016\001\002\000\016" +
    "\004\020\005\030\006\023\007\027\010\021\055\017\001" +
    "\002\000\004\060\u012b\001\002\000\004\070\uffe7\001\002" +
    "\000\004\070\uffe8\001\002\000\006\055\uffee\062\u0129\001" +
    "\002\000\004\070\uffe9\001\002\000\004\070\u0128\001\002" +
    "\000\004\055\032\001\002\000\004\070\031\001\002\000" +
    "\004\070\uffea\001\002\000\004\070\uffe6\001\002\000\006" +
    "\055\uffeb\062\uffeb\001\002\000\004\060\033\001\002\000" +
    "\046\003\060\004\020\005\030\006\023\007\027\010\021" +
    "\013\056\015\uff8a\020\uff78\022\uff70\023\065\026\040\027" +
    "\042\030\105\037\071\040\073\061\062\070\052\001\002" +
    "\000\046\003\uffdc\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010" +
    "\uffdc\013\uffdc\015\uffdc\020\uffdc\022\uffdc\023\uffdc\026\uffdc" +
    "\027\uffdc\030\uffdc\037\uffdc\040\uffdc\061\uffdc\070\uffdc\001" +
    "\002\000\046\003\uff98\004\uff98\005\uff98\006\uff98\007\uff98" +
    "\010\uff98\013\uff98\015\uff98\020\uff98\022\uff98\023\uff98\026" +
    "\uff98\027\uff98\030\uff98\037\uff98\040\uff98\061\uff98\070\uff98" +
    "\001\002\000\004\063\u0127\001\002\000\046\003\uff90\004" +
    "\uff90\005\uff90\006\uff90\007\uff90\010\uff90\013\uff90\015\uff90" +
    "\020\uff90\022\uff90\023\uff90\026\uff90\027\uff90\030\uff90\037" +
    "\uff90\040\uff90\061\uff90\070\uff90\001\002\000\004\054\u0120" +
    "\001\002\000\046\003\uffd9\004\uffd9\005\uffd9\006\uffd9\007" +
    "\uffd9\010\uffd9\013\uffd9\015\uffd9\020\uffd9\022\uffd9\023\uffd9" +
    "\026\uffd9\027\uffd9\030\uffd9\037\uffd9\040\uffd9\061\uffd9\070" +
    "\uffd9\001\002\000\004\054\u0119\001\002\000\046\003\uff9a" +
    "\004\uff9a\005\uff9a\006\uff9a\007\uff9a\010\uff9a\013\uff9a\015" +
    "\uff9a\020\uff9a\022\uff9a\023\uff9a\026\uff9a\027\uff9a\030\uff9a" +
    "\037\uff9a\040\uff9a\061\uff9a\070\uff9a\001\002\000\004\063" +
    "\u0118\001\002\000\004\061\u0116\001\002\000\046\003\uff7b" +
    "\004\uff7b\005\uff7b\006\uff7b\007\uff7b\010\uff7b\013\uff7b\015" +
    "\uff7b\020\uff7b\022\uff7b\023\uff7b\026\uff7b\027\uff7b\030\uff7b" +
    "\037\uff7b\040\uff7b\061\uff7b\070\uff7b\001\002\000\052\003" +
    "\uff89\004\uff89\005\uff89\006\uff89\007\uff89\010\uff89\013\uff89" +
    "\015\uff89\016\uff82\017\uff7d\020\uff89\022\uff89\023\uff89\026" +
    "\uff89\027\uff89\030\uff89\037\uff89\040\uff89\061\uff89\070\uff89" +
    "\001\002\000\046\003\uffdb\004\uffdb\005\uffdb\006\uffdb\007" +
    "\uffdb\010\uffdb\013\uffdb\015\uffdb\020\uffdb\022\uffdb\023\uffdb" +
    "\026\uffdb\027\uffdb\030\uffdb\037\uffdb\040\uffdb\061\uffdb\070" +
    "\uffdb\001\002\000\006\053\123\063\373\001\002\000\012" +
    "\053\252\054\223\056\222\063\372\001\002\000\004\061" +
    "\uffe5\001\002\000\046\003\uffdd\004\uffdd\005\uffdd\006\uffdd" +
    "\007\uffdd\010\uffdd\013\uffdd\015\uffdd\020\uffdd\022\uffdd\023" +
    "\uffdd\026\uffdd\027\uffdd\030\uffdd\037\uffdd\040\uffdd\061\uffdd" +
    "\070\uffdd\001\002\000\006\053\364\061\365\001\002\000" +
    "\040\003\152\010\140\011\133\012\150\032\147\037\126" +
    "\040\132\043\130\044\145\054\143\064\156\065\127\066" +
    "\125\067\136\070\134\001\002\000\046\003\uffde\004\uffde" +
    "\005\uffde\006\uffde\007\uffde\010\uffde\013\uffde\015\uffde\020" +
    "\uffde\022\uffde\023\uffde\026\uffde\027\uffde\030\uffde\037\uffde" +
    "\040\uffde\061\uffde\070\uffde\001\002\000\046\003\uffd8\004" +
    "\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\013\uffd8\015\uffd8" +
    "\020\uffd8\022\uffd8\023\uffd8\026\uffd8\027\uffd8\030\uffd8\037" +
    "\uffd8\040\uffd8\061\uffd8\070\uffd8\001\002\000\046\003\uffda" +
    "\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda\013\uffda\015" +
    "\uffda\020\uffda\022\uffda\023\uffda\026\uffda\027\uffda\030\uffda" +
    "\037\uffda\040\uffda\061\uffda\070\uffda\001\002\000\004\003" +
    "\361\001\002\000\004\070\360\001\002\000\046\003\uff7a" +
    "\004\uff7a\005\uff7a\006\uff7a\007\uff7a\010\uff7a\013\uff7a\015" +
    "\uff7a\020\uff7a\022\uff7a\023\uff7a\026\uff7a\027\uff7a\030\uff7a" +
    "\037\uff7a\040\uff7a\061\uff7a\070\uff7a\001\002\000\004\063" +
    "\357\001\002\000\046\003\uff91\004\uff91\005\uff91\006\uff91" +
    "\007\uff91\010\uff91\013\uff91\015\uff91\020\uff91\022\uff91\023" +
    "\uff91\026\uff91\027\uff91\030\uff91\037\uff91\040\uff91\061\uff91" +
    "\070\uff91\001\002\000\004\015\345\001\002\000\004\063" +
    "\344\001\002\000\004\070\342\001\002\000\004\063\341" +
    "\001\002\000\004\070\337\001\002\000\046\003\uff99\004" +
    "\uff99\005\uff99\006\uff99\007\uff99\010\uff99\013\uff99\015\uff99" +
    "\020\uff99\022\uff99\023\uff99\026\uff99\027\uff99\030\uff99\037" +
    "\uff99\040\uff99\061\uff99\070\uff99\001\002\000\006\053\324" +
    "\063\325\001\002\000\004\053\322\001\002\000\046\003" +
    "\060\004\020\005\030\006\023\007\027\010\021\013\056" +
    "\015\uff8a\020\uff78\022\uff70\023\065\026\040\027\042\030" +
    "\105\037\071\040\073\061\uffe4\070\052\001\002\000\004" +
    "\020\303\001\002\000\046\003\uffe1\004\uffe1\005\uffe1\006" +
    "\uffe1\007\uffe1\010\uffe1\013\uffe1\015\uffe1\020\uffe1\022\uffe1" +
    "\023\uffe1\026\uffe1\027\uffe1\030\uffe1\037\uffe1\040\uffe1\061" +
    "\uffe1\070\uffe1\001\002\000\004\070\277\001\002\000\046" +
    "\003\uffe0\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\013" +
    "\uffe0\015\uffe0\020\uffe0\022\uffe0\023\uffe0\026\uffe0\027\uffe0" +
    "\030\uffe0\037\uffe0\040\uffe0\061\uffe0\070\uffe0\001\002\000" +
    "\004\022\115\001\002\000\004\054\106\001\002\000\006" +
    "\066\110\070\107\001\002\000\004\055\113\001\002\000" +
    "\004\055\111\001\002\000\004\063\112\001\002\000\046" +
    "\003\uff92\004\uff92\005\uff92\006\uff92\007\uff92\010\uff92\013" +
    "\uff92\015\uff92\020\uff92\022\uff92\023\uff92\026\uff92\027\uff92" +
    "\030\uff92\037\uff92\040\uff92\061\uff92\070\uff92\001\002\000" +
    "\004\063\114\001\002\000\046\003\uff93\004\uff93\005\uff93" +
    "\006\uff93\007\uff93\010\uff93\013\uff93\015\uff93\020\uff93\022" +
    "\uff93\023\uff93\026\uff93\027\uff93\030\uff93\037\uff93\040\uff93" +
    "\061\uff93\070\uff93\001\002\000\004\054\116\001\002\000" +
    "\014\004\020\005\030\006\023\007\027\010\021\001\002" +
    "\000\004\063\241\001\002\000\004\053\123\001\002\000" +
    "\004\070\122\001\002\000\004\053\uffd3\001\002\000\044" +
    "\003\152\010\140\011\133\012\150\024\144\025\135\032" +
    "\147\037\126\040\132\043\130\044\145\054\143\064\156" +
    "\065\127\066\125\067\136\070\134\001\002\000\014\041" +
    "\uffae\042\uffae\055\uffae\062\uffae\063\uffae\001\002\000\010" +
    "\055\uffcc\062\uffcc\063\uffcc\001\002\000\010\064\156\065" +
    "\127\070\134\001\002\000\044\031\uffba\032\uffba\033\uffba" +
    "\034\uffba\035\uffba\036\uffba\041\uffba\042\uffba\045\uffba\046" +
    "\uffba\047\uffba\050\uffba\051\uffba\052\uffba\055\uffba\062\uffba" +
    "\063\uffba\001\002\000\030\011\uffa5\012\uffa5\032\uffa5\037" +
    "\uffa5\040\uffa5\043\uffa5\044\uffa5\054\uffa5\064\uffa5\065\uffa5" +
    "\070\uffa5\001\002\000\044\031\173\032\175\033\177\034" +
    "\176\035\174\036\171\041\uffad\042\uffad\045\210\046\211" +
    "\047\213\050\215\051\214\052\212\055\uffad\062\uffad\063" +
    "\uffad\001\002\000\010\064\156\065\127\070\134\001\002" +
    "\000\014\041\uffa9\042\uffa9\055\uffa9\062\uffa9\063\uffa9\001" +
    "\002\000\050\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9" +
    "\036\uffb9\041\uffb9\042\uffb9\045\uffb9\046\uffb9\047\uffb9\050" +
    "\uffb9\051\uffb9\052\uffb9\054\223\055\uffb9\056\222\062\uffb9" +
    "\063\uffb9\001\002\000\004\054\220\001\002\000\010\055" +
    "\uffcb\062\uffcb\063\uffcb\001\002\000\004\063\uffce\001\002" +
    "\000\010\055\uffca\062\uffca\063\uffca\001\002\000\004\063" +
    "\uff9d\001\002\000\044\031\uffb7\032\uffb7\033\uffb7\034\uffb7" +
    "\035\uffb7\036\uffb7\041\uffb7\042\uffb7\045\uffb7\046\uffb7\047" +
    "\uffb7\050\uffb7\051\uffb7\052\uffb7\055\uffb7\062\uffb7\063\uffb7" +
    "\001\002\000\030\011\133\012\150\032\147\037\126\040" +
    "\132\043\130\044\145\054\143\064\156\065\127\070\134" +
    "\001\002\000\004\054\203\001\002\000\030\011\uffa4\012" +
    "\uffa4\032\uffa4\037\uffa4\040\uffa4\043\uffa4\044\uffa4\054\uffa4" +
    "\064\uffa4\065\uffa4\070\uffa4\001\002\000\030\011\133\012" +
    "\150\032\147\037\126\040\132\043\130\044\145\054\143" +
    "\064\156\065\127\070\134\001\002\000\020\032\147\037" +
    "\126\040\132\054\167\064\156\065\127\070\134\001\002" +
    "\000\014\041\uffa8\042\uffa8\055\uffa8\062\uffa8\063\uffa8\001" +
    "\002\000\044\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7" +
    "\036\uffc7\041\uffc7\042\uffc7\045\uffc7\046\uffc7\047\uffc7\050" +
    "\uffc7\051\uffc7\052\uffc7\055\uffc7\062\uffc7\063\uffc7\001\002" +
    "\000\010\055\uffc9\062\uffc9\063\uffc9\001\002\000\014\041" +
    "\uffaf\042\uffaf\055\uffaf\062\uffaf\063\uffaf\001\002\000\004" +
    "\063\uffcf\001\002\000\044\031\uffb8\032\uffb8\033\uffb8\034" +
    "\uffb8\035\uffb8\036\uffb8\041\uffb8\042\uffb8\045\uffb8\046\uffb8" +
    "\047\uffb8\050\uffb8\051\uffb8\052\uffb8\055\uffb8\062\uffb8\063" +
    "\uffb8\001\002\000\044\031\uffbb\032\uffbb\033\uffbb\034\uffbb" +
    "\035\uffbb\036\uffbb\041\uffbb\042\uffbb\045\uffbb\046\uffbb\047" +
    "\uffbb\050\uffbb\051\uffbb\052\uffbb\055\uffbb\062\uffbb\063\uffbb" +
    "\001\002\000\010\055\uffcd\062\uffcd\063\uffcd\001\002\000" +
    "\004\063\uff9e\001\002\000\014\041\163\042\164\055\uffc8" +
    "\062\uffc8\063\uffc8\001\002\000\030\011\133\012\150\032" +
    "\147\037\126\040\132\043\130\044\145\054\143\064\156" +
    "\065\127\070\134\001\002\000\030\011\uffa7\012\uffa7\032" +
    "\uffa7\037\uffa7\040\uffa7\043\uffa7\044\uffa7\054\uffa7\064\uffa7" +
    "\065\uffa7\070\uffa7\001\002\000\030\011\uffa6\012\uffa6\032" +
    "\uffa6\037\uffa6\040\uffa6\043\uffa6\044\uffa6\054\uffa6\064\uffa6" +
    "\065\uffa6\070\uffa6\001\002\000\014\041\163\042\164\055" +
    "\uffac\062\uffac\063\uffac\001\002\000\044\031\uffc2\032\uffc2" +
    "\033\177\034\176\035\174\036\171\041\uffc2\042\uffc2\045" +
    "\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\055\uffc2" +
    "\062\uffc2\063\uffc2\001\002\000\020\032\147\037\126\040" +
    "\132\054\167\064\156\065\127\070\134\001\002\000\020" +
    "\031\173\032\175\033\177\034\176\035\174\036\171\055" +
    "\172\001\002\000\020\032\uffbc\037\uffbc\040\uffbc\054\uffbc" +
    "\064\uffbc\065\uffbc\070\uffbc\001\002\000\044\031\uffc3\032" +
    "\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\041\uffc3\042\uffc3" +
    "\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\055" +
    "\uffc3\062\uffc3\063\uffc3\001\002\000\020\032\uffc1\037\uffc1" +
    "\040\uffc1\054\uffc1\064\uffc1\065\uffc1\070\uffc1\001\002\000" +
    "\020\032\uffbd\037\uffbd\040\uffbd\054\uffbd\064\uffbd\065\uffbd" +
    "\070\uffbd\001\002\000\020\032\uffc0\037\uffc0\040\uffc0\054" +
    "\uffc0\064\uffc0\065\uffc0\070\uffc0\001\002\000\020\032\uffbe" +
    "\037\uffbe\040\uffbe\054\uffbe\064\uffbe\065\uffbe\070\uffbe\001" +
    "\002\000\020\032\uffbf\037\uffbf\040\uffbf\054\uffbf\064\uffbf" +
    "\065\uffbf\070\uffbf\001\002\000\020\032\147\037\126\040" +
    "\132\054\167\064\156\065\127\070\134\001\002\000\044" +
    "\031\173\032\175\033\177\034\176\035\174\036\171\041" +
    "\uffc4\042\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4" +
    "\052\uffc4\055\uffc4\062\uffc4\063\uffc4\001\002\000\014\041" +
    "\163\042\164\055\uffaa\062\uffaa\063\uffaa\001\002\000\004" +
    "\055\204\001\002\000\004\063\uff9c\001\002\000\040\031" +
    "\173\032\175\033\177\034\176\035\174\036\171\041\uffad" +
    "\042\uffad\045\210\046\211\047\213\050\215\051\214\052" +
    "\212\055\172\001\002\000\010\041\163\042\164\055\207" +
    "\001\002\000\014\041\uffab\042\uffab\055\uffab\062\uffab\063" +
    "\uffab\001\002\000\020\032\uffb5\037\uffb5\040\uffb5\054\uffb5" +
    "\064\uffb5\065\uffb5\070\uffb5\001\002\000\020\032\uffb4\037" +
    "\uffb4\040\uffb4\054\uffb4\064\uffb4\065\uffb4\070\uffb4\001\002" +
    "\000\020\032\uffb0\037\uffb0\040\uffb0\054\uffb0\064\uffb0\065" +
    "\uffb0\070\uffb0\001\002\000\020\032\uffb3\037\uffb3\040\uffb3" +
    "\054\uffb3\064\uffb3\065\uffb3\070\uffb3\001\002\000\020\032" +
    "\uffb1\037\uffb1\040\uffb1\054\uffb1\064\uffb1\065\uffb1\070\uffb1" +
    "\001\002\000\020\032\uffb2\037\uffb2\040\uffb2\054\uffb2\064" +
    "\uffb2\065\uffb2\070\uffb2\001\002\000\020\032\147\037\126" +
    "\040\132\054\167\064\156\065\127\070\134\001\002\000" +
    "\030\031\173\032\175\033\177\034\176\035\174\036\171" +
    "\041\uffb6\042\uffb6\055\uffb6\062\uffb6\063\uffb6\001\002\000" +
    "\004\055\221\001\002\000\004\063\uff9b\001\002\000\006" +
    "\064\235\070\233\001\002\000\042\003\152\010\140\011" +
    "\133\012\150\032\147\037\126\040\132\043\130\044\145" +
    "\054\143\055\224\064\156\065\127\066\125\067\136\070" +
    "\134\001\002\000\044\031\uffa2\032\uffa2\033\uffa2\034\uffa2" +
    "\035\uffa2\036\uffa2\041\uffa2\042\uffa2\045\uffa2\046\uffa2\047" +
    "\uffa2\050\uffa2\051\uffa2\052\uffa2\055\uffa2\062\uffa2\063\uffa2" +
    "\001\002\000\004\055\232\001\002\000\006\055\uff9f\062" +
    "\uff9f\001\002\000\006\055\uffa1\062\230\001\002\000\040" +
    "\003\152\010\140\011\133\012\150\032\147\037\126\040" +
    "\132\043\130\044\145\054\143\064\156\065\127\066\125" +
    "\067\136\070\134\001\002\000\004\055\uffa0\001\002\000" +
    "\044\031\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3" +
    "\041\uffa3\042\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3\051" +
    "\uffa3\052\uffa3\055\uffa3\062\uffa3\063\uffa3\001\002\000\004" +
    "\057\uff58\001\002\000\004\057\236\001\002\000\004\057" +
    "\uff59\001\002\000\046\031\uff56\032\uff56\033\uff56\034\uff56" +
    "\035\uff56\036\uff56\041\uff56\042\uff56\045\uff56\046\uff56\047" +
    "\uff56\050\uff56\051\uff56\052\uff56\053\uff56\055\uff56\062\uff56" +
    "\063\uff56\001\002\000\044\031\uffc5\032\uffc5\033\uffc5\034" +
    "\uffc5\035\uffc5\036\uffc5\041\uffc5\042\uffc5\045\uffc5\046\uffc5" +
    "\047\uffc5\050\uffc5\051\uffc5\052\uffc5\055\uffc5\062\uffc5\063" +
    "\uffc5\001\002\000\044\031\uffc6\032\uffc6\033\uffc6\034\uffc6" +
    "\035\uffc6\036\uffc6\041\uffc6\042\uffc6\045\uffc6\046\uffc6\047" +
    "\uffc6\050\uffc6\051\uffc6\052\uffc6\055\uffc6\062\uffc6\063\uffc6" +
    "\001\002\000\030\011\uff6c\012\uff6c\032\uff6c\037\uff6c\040" +
    "\uff6c\043\uff6c\044\uff6c\054\uff6c\064\uff6c\065\uff6c\070\uff6c" +
    "\001\002\000\030\011\133\012\150\032\147\037\126\040" +
    "\132\043\130\044\145\054\143\064\156\065\127\070\134" +
    "\001\002\000\010\041\163\042\164\063\uff6b\001\002\000" +
    "\004\063\245\001\002\000\032\004\uff6a\005\uff6a\006\uff6a" +
    "\007\uff6a\010\uff6a\032\uff6a\037\uff6a\040\uff6a\054\uff6a\064" +
    "\uff6a\065\uff6a\070\uff6a\001\002\000\032\004\020\005\030" +
    "\006\023\007\027\010\021\032\147\037\126\040\132\054" +
    "\167\064\156\065\127\070\251\001\002\000\020\031\173" +
    "\032\175\033\177\034\176\035\174\036\171\055\uff69\001" +
    "\002\000\004\055\uff69\001\002\000\026\031\uffb9\032\uffb9" +
    "\033\uffb9\034\uffb9\035\uffb9\036\uffb9\053\252\054\223\055" +
    "\uffb9\056\222\001\002\000\044\003\152\010\140\011\133" +
    "\012\150\024\144\025\135\032\147\037\126\040\132\043" +
    "\130\044\145\054\143\064\156\065\127\066\125\067\136" +
    "\070\134\001\002\000\004\063\256\001\002\000\004\063" +
    "\255\001\002\000\050\003\uffd1\004\uffd1\005\uffd1\006\uffd1" +
    "\007\uffd1\010\uffd1\013\uffd1\015\uffd1\020\uffd1\022\uffd1\023" +
    "\uffd1\026\uffd1\027\uffd1\030\uffd1\037\uffd1\040\uffd1\055\uffd1" +
    "\061\uffd1\070\uffd1\001\002\000\050\003\uffd0\004\uffd0\005" +
    "\uffd0\006\uffd0\007\uffd0\010\uffd0\013\uffd0\015\uffd0\020\uffd0" +
    "\022\uffd0\023\uffd0\026\uffd0\027\uffd0\030\uffd0\037\uffd0\040" +
    "\uffd0\055\uffd0\061\uffd0\070\uffd0\001\002\000\004\055\260" +
    "\001\002\000\004\060\261\001\002\000\044\003\uff6e\004" +
    "\uff6e\005\uff6e\006\uff6e\007\uff6e\010\uff6e\013\uff6e\015\uff6e" +
    "\020\uff6e\022\uff6e\023\uff6e\026\uff6e\027\uff6e\030\uff6e\037" +
    "\uff6e\040\uff6e\070\uff6e\001\002\000\044\003\060\004\020" +
    "\005\030\006\023\007\027\010\021\013\056\015\uff8a\020" +
    "\uff78\022\uff70\023\065\026\040\027\042\030\105\037\071" +
    "\040\073\070\052\001\002\000\004\061\uff6d\001\002\000" +
    "\004\061\265\001\002\000\046\003\uff6f\004\uff6f\005\uff6f" +
    "\006\uff6f\007\uff6f\010\uff6f\013\uff6f\015\uff6f\020\uff6f\022" +
    "\uff6f\023\uff6f\026\uff6f\027\uff6f\030\uff6f\037\uff6f\040\uff6f" +
    "\061\uff6f\070\uff6f\001\002\000\046\003\uff71\004\uff71\005" +
    "\uff71\006\uff71\007\uff71\010\uff71\013\uff71\015\uff71\020\uff71" +
    "\022\uff71\023\uff71\026\uff71\027\uff71\030\uff71\037\uff71\040" +
    "\uff71\061\uff71\070\uff71\001\002\000\004\055\270\001\002" +
    "\000\004\060\271\001\002\000\044\003\uff6e\004\uff6e\005" +
    "\uff6e\006\uff6e\007\uff6e\010\uff6e\013\uff6e\015\uff6e\020\uff6e" +
    "\022\uff6e\023\uff6e\026\uff6e\027\uff6e\030\uff6e\037\uff6e\040" +
    "\uff6e\070\uff6e\001\002\000\044\003\060\004\020\005\030" +
    "\006\023\007\027\010\021\013\056\015\uff8a\020\uff78\022" +
    "\uff70\023\065\026\040\027\042\030\105\037\071\040\073" +
    "\070\052\001\002\000\004\061\uff6d\001\002\000\004\061" +
    "\275\001\002\000\046\003\uff6f\004\uff6f\005\uff6f\006\uff6f" +
    "\007\uff6f\010\uff6f\013\uff6f\015\uff6f\020\uff6f\022\uff6f\023" +
    "\uff6f\026\uff6f\027\uff6f\030\uff6f\037\uff6f\040\uff6f\061\uff6f" +
    "\070\uff6f\001\002\000\046\003\uff72\004\uff72\005\uff72\006" +
    "\uff72\007\uff72\010\uff72\013\uff72\015\uff72\020\uff72\022\uff72" +
    "\023\uff72\026\uff72\027\uff72\030\uff72\037\uff72\040\uff72\061" +
    "\uff72\070\uff72\001\002\000\010\053\uffd3\056\301\063\uffd3" +
    "\001\002\000\006\053\uff5f\063\uff5f\001\002\000\010\057" +
    "\302\064\235\070\233\001\002\000\006\053\uff64\061\uff64" +
    "\001\002\000\004\060\304\001\002\000\044\003\uff76\004" +
    "\uff76\005\uff76\006\uff76\007\uff76\010\uff76\013\uff76\015\uff76" +
    "\020\uff76\022\uff76\023\uff76\026\uff76\027\uff76\030\uff76\037" +
    "\uff76\040\uff76\070\uff76\001\002\000\044\003\060\004\020" +
    "\005\030\006\023\007\027\010\021\013\056\015\uff8a\020" +
    "\uff78\022\uff70\023\065\026\040\027\042\030\105\037\071" +
    "\040\073\070\052\001\002\000\004\061\uff75\001\002\000" +
    "\004\061\310\001\002\000\004\021\311\001\002\000\004" +
    "\054\312\001\002\000\030\011\uff74\012\uff74\032\uff74\037" +
    "\uff74\040\uff74\043\uff74\044\uff74\054\uff74\064\uff74\065\uff74" +
    "\070\uff74\001\002\000\030\011\133\012\150\032\147\037" +
    "\126\040\132\043\130\044\145\054\143\064\156\065\127" +
    "\070\134\001\002\000\010\041\163\042\164\055\uff73\001" +
    "\002\000\004\055\316\001\002\000\004\063\317\001\002" +
    "\000\046\003\uff77\004\uff77\005\uff77\006\uff77\007\uff77\010" +
    "\uff77\013\uff77\015\uff77\020\uff77\022\uff77\023\uff77\026\uff77" +
    "\027\uff77\030\uff77\037\uff77\040\uff77\061\uff77\070\uff77\001" +
    "\002\000\046\003\uff79\004\uff79\005\uff79\006\uff79\007\uff79" +
    "\010\uff79\013\uff79\015\uff79\020\uff79\022\uff79\023\uff79\026" +
    "\uff79\027\uff79\030\uff79\037\uff79\040\uff79\061\uff79\070\uff79" +
    "\001\002\000\004\061\uffe3\001\002\000\020\032\147\037" +
    "\126\040\132\054\167\064\156\065\127\070\134\001\002" +
    "\000\020\031\173\032\175\033\177\034\176\035\174\036" +
    "\171\063\uff57\001\002\000\004\060\326\001\002\000\046" +
    "\003\uff63\004\uff63\005\uff63\006\uff63\007\uff63\010\uff63\013" +
    "\uff63\015\uff63\020\uff63\022\uff63\023\uff63\026\uff63\027\uff63" +
    "\030\uff63\037\uff63\040\uff63\061\uff63\070\uff63\001\002\000" +
    "\010\064\333\067\332\070\327\001\002\000\006\061\uff5a" +
    "\062\uff5a\001\002\000\006\061\uff5e\062\335\001\002\000" +
    "\004\061\334\001\002\000\006\061\uff5c\062\uff5c\001\002" +
    "\000\006\061\uff5b\062\uff5b\001\002\000\004\063\uff62\001" +
    "\002\000\010\064\333\067\332\070\327\001\002\000\004" +
    "\061\uff5d\001\002\000\004\063\340\001\002\000\046\003" +
    "\uffd5\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5\013\uffd5" +
    "\015\uffd5\020\uffd5\022\uffd5\023\uffd5\026\uffd5\027\uffd5\030" +
    "\uffd5\037\uffd5\040\uffd5\061\uffd5\070\uffd5\001\002\000\046" +
    "\003\uff66\004\uff66\005\uff66\006\uff66\007\uff66\010\uff66\013" +
    "\uff66\015\uff66\020\uff66\022\uff66\023\uff66\026\uff66\027\uff66" +
    "\030\uff66\037\uff66\040\uff66\061\uff66\070\uff66\001\002\000" +
    "\004\063\343\001\002\000\046\003\uffd6\004\uffd6\005\uffd6" +
    "\006\uffd6\007\uffd6\010\uffd6\013\uffd6\015\uffd6\020\uffd6\022" +
    "\uffd6\023\uffd6\026\uffd6\027\uffd6\030\uffd6\037\uffd6\040\uffd6" +
    "\061\uffd6\070\uffd6\001\002\000\046\003\uffdf\004\uffdf\005" +
    "\uffdf\006\uffdf\007\uffdf\010\uffdf\013\uffdf\015\uffdf\020\uffdf" +
    "\022\uffdf\023\uffdf\026\uffdf\027\uffdf\030\uffdf\037\uffdf\040" +
    "\uffdf\061\uffdf\070\uffdf\001\002\000\004\054\346\001\002" +
    "\000\030\011\133\012\150\032\147\037\126\040\132\043" +
    "\130\044\145\054\143\064\156\065\127\070\134\001\002" +
    "\000\010\041\163\042\164\055\uff88\001\002\000\004\055" +
    "\351\001\002\000\004\060\352\001\002\000\044\003\uff87" +
    "\004\uff87\005\uff87\006\uff87\007\uff87\010\uff87\013\uff87\015" +
    "\uff87\020\uff87\022\uff87\023\uff87\026\uff87\027\uff87\030\uff87" +
    "\037\uff87\040\uff87\070\uff87\001\002\000\044\003\060\004" +
    "\020\005\030\006\023\007\027\010\021\013\056\015\uff8a" +
    "\020\uff78\022\uff70\023\065\026\040\027\042\030\105\037" +
    "\071\040\073\070\052\001\002\000\004\061\uff86\001\002" +
    "\000\004\061\356\001\002\000\052\003\uff8b\004\uff8b\005" +
    "\uff8b\006\uff8b\007\uff8b\010\uff8b\013\uff8b\015\uff8b\016\uff8b" +
    "\017\uff8b\020\uff8b\022\uff8b\023\uff8b\026\uff8b\027\uff8b\030" +
    "\uff8b\037\uff8b\040\uff8b\061\uff8b\070\uff8b\001\002\000\046" +
    "\003\uff68\004\uff68\005\uff68\006\uff68\007\uff68\010\uff68\013" +
    "\uff68\015\uff68\020\uff68\022\uff68\023\uff68\026\uff68\027\uff68" +
    "\030\uff68\037\uff68\040\uff68\061\uff68\070\uff68\001\002\000" +
    "\006\053\uffd4\063\uffd4\001\002\000\012\003\ufff8\004\ufff8" +
    "\007\ufff8\010\ufff8\001\002\000\004\063\363\001\002\000" +
    "\046\003\uff67\004\uff67\005\uff67\006\uff67\007\uff67\010\uff67" +
    "\013\uff67\015\uff67\020\uff67\022\uff67\023\uff67\026\uff67\027" +
    "\uff67\030\uff67\037\uff67\040\uff67\061\uff67\070\uff67\001\002" +
    "\000\004\060\367\001\002\000\004\003\366\001\002\000" +
    "\004\063\uff60\001\002\000\010\064\333\067\332\070\327" +
    "\001\002\000\004\061\371\001\002\000\004\063\uff61\001" +
    "\002\000\046\003\uffd7\004\uffd7\005\uffd7\006\uffd7\007\uffd7" +
    "\010\uffd7\013\uffd7\015\uffd7\020\uffd7\022\uffd7\023\uffd7\026" +
    "\uffd7\027\uffd7\030\uffd7\037\uffd7\040\uffd7\061\uffd7\070\uffd7" +
    "\001\002\000\046\003\uffe2\004\uffe2\005\uffe2\006\uffe2\007" +
    "\uffe2\010\uffe2\013\uffe2\015\uffe2\020\uffe2\022\uffe2\023\uffe2" +
    "\026\uffe2\027\uffe2\030\uffe2\037\uffe2\040\uffe2\061\uffe2\070" +
    "\uffe2\001\002\000\004\017\u0111\001\002\000\004\016\u0107" +
    "\001\002\000\046\003\uff89\004\uff89\005\uff89\006\uff89\007" +
    "\uff89\010\uff89\013\uff89\015\uff89\020\uff89\022\uff89\023\uff89" +
    "\026\uff89\027\uff89\030\uff89\037\uff89\040\uff89\061\uff89\070" +
    "\uff89\001\002\000\052\003\uff85\004\uff85\005\uff85\006\uff85" +
    "\007\uff85\010\uff85\013\uff85\015\uff85\016\uff82\017\uff85\020" +
    "\uff85\022\uff85\023\uff85\026\uff85\027\uff85\030\uff85\037\uff85" +
    "\040\uff85\061\uff85\070\uff85\001\002\000\046\003\uff8c\004" +
    "\uff8c\005\uff8c\006\uff8c\007\uff8c\010\uff8c\013\uff8c\015\uff8c" +
    "\020\uff8c\022\uff8c\023\uff8c\026\uff8c\027\uff8c\030\uff8c\037" +
    "\uff8c\040\uff8c\061\uff8c\070\uff8c\001\002\000\050\003\uff89" +
    "\004\uff89\005\uff89\006\uff89\007\uff89\010\uff89\013\uff89\015" +
    "\uff89\017\uff7d\020\uff89\022\uff89\023\uff89\026\uff89\027\uff89" +
    "\030\uff89\037\uff89\040\uff89\061\uff89\070\uff89\001\002\000" +
    "\046\003\uff89\004\uff89\005\uff89\006\uff89\007\uff89\010\uff89" +
    "\013\uff89\015\uff89\020\uff89\022\uff89\023\uff89\026\uff89\027" +
    "\uff89\030\uff89\037\uff89\040\uff89\061\uff89\070\uff89\001\002" +
    "\000\046\003\uff8e\004\uff8e\005\uff8e\006\uff8e\007\uff8e\010" +
    "\uff8e\013\uff8e\015\uff8e\020\uff8e\022\uff8e\023\uff8e\026\uff8e" +
    "\027\uff8e\030\uff8e\037\uff8e\040\uff8e\061\uff8e\070\uff8e\001" +
    "\002\000\046\003\uff8f\004\uff8f\005\uff8f\006\uff8f\007\uff8f" +
    "\010\uff8f\013\uff8f\015\uff8f\020\uff8f\022\uff8f\023\uff8f\026" +
    "\uff8f\027\uff8f\030\uff8f\037\uff8f\040\uff8f\061\uff8f\070\uff8f" +
    "\001\002\000\050\003\uff84\004\uff84\005\uff84\006\uff84\007" +
    "\uff84\010\uff84\013\uff84\015\uff84\017\uff84\020\uff84\022\uff84" +
    "\023\uff84\026\uff84\027\uff84\030\uff84\037\uff84\040\uff84\061" +
    "\uff84\070\uff84\001\002\000\046\003\uff8d\004\uff8d\005\uff8d" +
    "\006\uff8d\007\uff8d\010\uff8d\013\uff8d\015\uff8d\020\uff8d\022" +
    "\uff8d\023\uff8d\026\uff8d\027\uff8d\030\uff8d\037\uff8d\040\uff8d" +
    "\061\uff8d\070\uff8d\001\002\000\004\054\u0108\001\002\000" +
    "\030\011\133\012\150\032\147\037\126\040\132\043\130" +
    "\044\145\054\143\064\156\065\127\070\134\001\002\000" +
    "\010\041\163\042\164\055\uff81\001\002\000\004\055\u010b" +
    "\001\002\000\004\060\u010c\001\002\000\044\003\uff80\004" +
    "\uff80\005\uff80\006\uff80\007\uff80\010\uff80\013\uff80\015\uff80" +
    "\020\uff80\022\uff80\023\uff80\026\uff80\027\uff80\030\uff80\037" +
    "\uff80\040\uff80\070\uff80\001\002\000\044\003\060\004\020" +
    "\005\030\006\023\007\027\010\021\013\056\015\uff8a\020" +
    "\uff78\022\uff70\023\065\026\040\027\042\030\105\037\071" +
    "\040\073\070\052\001\002\000\004\061\uff7f\001\002\000" +
    "\004\061\u0110\001\002\000\052\003\uff83\004\uff83\005\uff83" +
    "\006\uff83\007\uff83\010\uff83\013\uff83\015\uff83\016\uff83\017" +
    "\uff83\020\uff83\022\uff83\023\uff83\026\uff83\027\uff83\030\uff83" +
    "\037\uff83\040\uff83\061\uff83\070\uff83\001\002\000\004\060" +
    "\u0112\001\002\000\044\003\060\004\020\005\030\006\023" +
    "\007\027\010\021\013\056\015\uff8a\020\uff78\022\uff70\023" +
    "\065\026\040\027\042\030\105\037\071\040\073\070\052" +
    "\001\002\000\004\061\u0114\001\002\000\046\003\uff7c\004" +
    "\uff7c\005\uff7c\006\uff7c\007\uff7c\010\uff7c\013\uff7c\015\uff7c" +
    "\020\uff7c\022\uff7c\023\uff7c\026\uff7c\027\uff7c\030\uff7c\037" +
    "\uff7c\040\uff7c\061\uff7c\070\uff7c\001\002\000\046\003\uff7e" +
    "\004\uff7e\005\uff7e\006\uff7e\007\uff7e\010\uff7e\013\uff7e\015" +
    "\uff7e\020\uff7e\022\uff7e\023\uff7e\026\uff7e\027\uff7e\030\uff7e" +
    "\037\uff7e\040\uff7e\061\uff7e\070\uff7e\001\002\000\012\003" +
    "\ufff1\004\ufff1\007\ufff1\010\ufff1\001\002\000\012\003\ufffa" +
    "\004\ufffa\007\ufffa\010\ufffa\001\002\000\046\003\uff65\004" +
    "\uff65\005\uff65\006\uff65\007\uff65\010\uff65\013\uff65\015\uff65" +
    "\020\uff65\022\uff65\023\uff65\026\uff65\027\uff65\030\uff65\037" +
    "\uff65\040\uff65\061\uff65\070\uff65\001\002\000\006\065\u011b" +
    "\070\u011a\001\002\000\004\055\u011e\001\002\000\004\055" +
    "\u011c\001\002\000\004\063\u011d\001\002\000\046\003\uff94" +
    "\004\uff94\005\uff94\006\uff94\007\uff94\010\uff94\013\uff94\015" +
    "\uff94\020\uff94\022\uff94\023\uff94\026\uff94\027\uff94\030\uff94" +
    "\037\uff94\040\uff94\061\uff94\070\uff94\001\002\000\004\063" +
    "\u011f\001\002\000\046\003\uff95\004\uff95\005\uff95\006\uff95" +
    "\007\uff95\010\uff95\013\uff95\015\uff95\020\uff95\022\uff95\023" +
    "\uff95\026\uff95\027\uff95\030\uff95\037\uff95\040\uff95\061\uff95" +
    "\070\uff95\001\002\000\006\064\u0122\070\u0121\001\002\000" +
    "\004\055\u0125\001\002\000\004\055\u0123\001\002\000\004" +
    "\063\u0124\001\002\000\046\003\uff96\004\uff96\005\uff96\006" +
    "\uff96\007\uff96\010\uff96\013\uff96\015\uff96\020\uff96\022\uff96" +
    "\023\uff96\026\uff96\027\uff96\030\uff96\037\uff96\040\uff96\061" +
    "\uff96\070\uff96\001\002\000\004\063\u0126\001\002\000\046" +
    "\003\uff97\004\uff97\005\uff97\006\uff97\007\uff97\010\uff97\013" +
    "\uff97\015\uff97\020\uff97\022\uff97\023\uff97\026\uff97\027\uff97" +
    "\030\uff97\037\uff97\040\uff97\061\uff97\070\uff97\001\002\000" +
    "\050\003\uffd2\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2" +
    "\013\uffd2\015\uffd2\020\uffd2\022\uffd2\023\uffd2\026\uffd2\027" +
    "\uffd2\030\uffd2\037\uffd2\040\uffd2\055\uffd2\061\uffd2\070\uffd2" +
    "\001\002\000\006\055\uffec\062\uffec\001\002\000\014\004" +
    "\020\005\030\006\023\007\027\010\021\001\002\000\004" +
    "\055\uffed\001\002\000\046\003\060\004\020\005\030\006" +
    "\023\007\027\010\021\013\056\015\uff8a\020\uff78\022\uff70" +
    "\023\065\026\040\027\042\030\105\037\071\040\073\061" +
    "\u012d\070\052\001\002\000\004\061\u012f\001\002\000\004" +
    "\003\u012e\001\002\000\012\003\ufff7\004\ufff7\007\ufff7\010" +
    "\ufff7\001\002\000\014\002\ufff1\003\ufff1\004\ufff1\007\ufff1" +
    "\010\ufff1\001\002\000\014\002\ufffe\003\ufff9\004\ufff9\007" +
    "\ufff9\010\ufff9\001\002\000\004\002\uffff\001\002\000\012" +
    "\003\ufffb\004\ufffb\007\ufffb\010\ufffb\001\002\000\004\002" +
    "\001\001\002\000\004\054\uffef\001\002\000\004\054\ufff2" +
    "\001\002\000\004\054\ufff0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0134\000\016\002\010\004\012\005\005\006\006\007" +
    "\004\010\014\001\001\000\002\001\001\000\004\012\u0134" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\005\u0131" +
    "\006\u0130\007\004\010\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\023\014\024\015\021\076\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\102" +
    "\003\062\013\044\016\052\017\076\020\050\021\102\022" +
    "\035\023\100\024\067\027\033\034\056\035\042\036\073" +
    "\037\034\052\053\053\036\054\065\055\046\061\045\062" +
    "\063\063\040\064\054\065\071\066\075\070\060\073\074" +
    "\074\043\075\047\076\101\077\103\107\077\115\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\056\u0100\057\376\060" +
    "\375\121\377\122\373\124\374\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\024\154\030\361" +
    "\040\156\041\130\043\150\044\160\046\152\047\145\050" +
    "\123\066\141\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\100\003\062\016\320\017\076\020" +
    "\050\021\102\022\035\023\100\024\067\027\033\034\056" +
    "\035\042\036\073\037\034\052\053\053\036\054\065\055" +
    "\046\061\045\062\063\063\040\064\054\065\071\066\075" +
    "\070\060\073\074\074\043\075\047\076\101\077\103\107" +
    "\077\115\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\066\277\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\062\020\117\022\116\076\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\024\154\030\153\031\136\032\157\033\140\040" +
    "\156\041\130\043\150\044\160\046\152\047\145\050\123" +
    "\066\141\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\024\154\043\237\066\141\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\042\177\051\215\001\001\000" +
    "\010\024\154\043\236\066\141\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\024\154\041\204\043\150\044\205\046" +
    "\152\047\145\050\123\066\141\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\024\154\041\130\043\150\044" +
    "\201\046\152\047\145\050\123\066\141\001\001\000\012" +
    "\024\154\041\165\043\150\066\141\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\045\161\001\001" +
    "\000\022\024\154\041\130\043\150\044\164\046\152\047" +
    "\145\050\123\066\141\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\045\161\001\001\000\004\042\177\001" +
    "\001\000\012\024\154\041\167\043\150\066\141\001\001" +
    "\000\004\042\177\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\024\154\041" +
    "\200\043\150\066\141\001\001\000\004\042\177\001\001" +
    "\000\004\045\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\042\177\051\215\001\001\000\004\045\161" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\024\154\041\216\043\150\066" +
    "\141\001\001\000\004\042\177\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\067\233\001\001\000\032\024" +
    "\154\025\224\026\226\030\225\040\156\041\130\043\150" +
    "\044\160\046\152\047\145\050\123\066\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\024\154\025\230\026\226\030\225\040" +
    "\156\041\130\043\150\044\160\046\152\047\145\050\123" +
    "\066\141\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\103" +
    "\241\001\001\000\022\024\154\041\130\043\150\044\242" +
    "\046\152\047\145\050\123\066\141\001\001\000\006\045" +
    "\161\106\243\001\001\000\002\001\001\000\004\104\245" +
    "\001\001\000\024\003\062\020\117\021\247\022\035\024" +
    "\154\041\246\043\150\066\141\076\120\001\001\000\006" +
    "\042\177\105\266\001\001\000\004\105\256\001\001\000" +
    "\002\001\001\000\034\024\154\030\253\031\252\032\157" +
    "\033\140\040\156\041\130\043\150\044\160\046\152\047" +
    "\145\050\123\066\141\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\101\261\001\001\000\102" +
    "\003\062\013\262\016\052\017\076\020\050\021\102\022" +
    "\035\023\100\024\067\027\033\034\056\035\042\036\073" +
    "\037\034\052\053\053\036\054\065\055\046\061\045\062" +
    "\063\063\040\064\054\065\071\066\075\070\060\073\074" +
    "\074\043\075\047\076\101\077\103\107\077\115\066\001" +
    "\001\000\004\102\263\001\001\000\002\001\001\000\004" +
    "\100\265\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\101\271\001\001\000\102\003\062" +
    "\013\272\016\052\017\076\020\050\021\102\022\035\023" +
    "\100\024\067\027\033\034\056\035\042\036\073\037\034" +
    "\052\053\053\036\054\065\055\046\061\045\062\063\063" +
    "\040\064\054\065\071\066\075\070\060\073\074\074\043" +
    "\075\047\076\101\077\103\107\077\115\066\001\001\000" +
    "\004\102\273\001\001\000\002\001\001\000\004\100\275" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\067\233\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\111\304\001\001\000\102\003\062\013" +
    "\305\016\052\017\076\020\050\021\102\022\035\023\100" +
    "\024\067\027\033\034\056\035\042\036\073\037\034\052" +
    "\053\053\036\054\065\055\046\061\045\062\063\063\040" +
    "\064\054\065\071\066\075\070\060\073\074\074\043\075" +
    "\047\076\101\077\103\107\077\115\066\001\001\000\004" +
    "\112\306\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\113\312\001\001\000\022\024\154" +
    "\041\130\043\150\044\313\046\152\047\145\050\123\066" +
    "\141\001\001\000\006\045\161\114\314\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\110\317\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\024\154\041\322" +
    "\043\150\066\141\001\001\000\004\042\177\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\071\330\072\327" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\071\335\072\327\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\024\154\041\130\043\150\044\346\046\152" +
    "\047\145\050\123\066\141\001\001\000\006\045\161\116" +
    "\347\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\117\352\001\001\000\102\003\062\013\353\016\052\017" +
    "\076\020\050\021\102\022\035\023\100\024\067\027\033" +
    "\034\056\035\042\036\073\037\034\052\053\053\036\054" +
    "\065\055\046\061\045\062\063\063\040\064\054\065\071" +
    "\066\075\070\060\073\074\074\043\075\047\076\101\077" +
    "\103\107\077\115\066\001\001\000\004\120\354\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\071\367\072\327\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\121\u0105\001\001" +
    "\000\010\056\u0104\057\376\124\374\001\001\000\002\001" +
    "\001\000\010\060\u0101\121\u0102\122\373\001\001\000\004" +
    "\121\u0103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\024\154\041\130\043\150\044\u0108\046\152\047\145\050" +
    "\123\066\141\001\001\000\006\045\161\125\u0109\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\126\u010c\001" +
    "\001\000\102\003\062\013\u010d\016\052\017\076\020\050" +
    "\021\102\022\035\023\100\024\067\027\033\034\056\035" +
    "\042\036\073\037\034\052\053\053\036\054\065\055\046" +
    "\061\045\062\063\063\040\064\054\065\071\066\075\070" +
    "\060\073\074\074\043\075\047\076\101\077\103\107\077" +
    "\115\066\001\001\000\004\127\u010e\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\102\003\062" +
    "\013\u0112\016\052\017\076\020\050\021\102\022\035\023" +
    "\100\024\067\027\033\034\056\035\042\036\073\037\034" +
    "\052\053\053\036\054\065\055\046\061\045\062\063\063" +
    "\040\064\054\065\071\066\075\070\060\073\074\074\043" +
    "\075\047\076\101\077\103\107\077\115\066\001\001\000" +
    "\002\001\001\000\004\123\u0114\001\001\000\002\001\001" +
    "\000\004\011\u0116\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\023\014\u0129\015\021\076\025\001\001\000" +
    "\002\001\001\000\102\003\062\013\u012b\016\052\017\076" +
    "\020\050\021\102\022\035\023\100\024\067\027\033\034" +
    "\056\035\042\036\073\037\034\052\053\053\036\054\065" +
    "\055\046\061\045\062\063\063\040\064\054\065\071\066" +
    "\075\070\060\073\074\074\043\075\047\076\101\077\103" +
    "\107\077\115\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\u012f\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return token = lex.next_token(); 
    }


    Lexer lex;
    Symbol token;
    Boolean errores = false;
    private HashMap<String, ArrayList<String>> listaTablaSimbolos = new HashMap<String, ArrayList<String>>();
    String currentHash;
    int currentTemp = 0;
    StringBuilder codIn3D = new StringBuilder();
    ArrayList<String> elementosArray = new ArrayList<>();
    ArrayList<String> elementosParametros = new ArrayList<>();
    int contador_for = 0;
    int contador_while = 0;
    int contador_if = 0;
    int contador_else = 0;
    int contador_elif = 0;
    String fatherCurrentHash = null;
    LinkedList<String> hashTree = new LinkedList<>();
    int currentHashPos = 0;


    /* Constructor del parser, recibe como parámetro el lexer que se va a utilizar 
        Entradas: Lexer lex
        Salidas: Ninguna
        Restricciones: Ninguna
    */

    @SuppressWarnings("deprecation")
    public parser(Lexer lex){
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }
    
    /* Método que se encarga de retornar el valor booleao de errores. Indicando si hubo errores o no
        Entradas: Ninguna
        Salidas: errores
        Restricciones: Ninguna
    */
    public boolean getErrores(){
        return errores;
    }

    /* Método que se encarga de imprimir la tabla de símbolos
        Entradas: Ninguna
        Salidas: Ninguna
        Restricciones: Ninguna
    */
    private void imprimirTablaSimbolos(){
        for(String key: listaTablaSimbolos.keySet()){
            System.out.println("-------------------------");
            System.out.println("");
            System.out.println("Tabla de símbolos: "+key);
            System.out.println("Valores: ");
            for(String item: listaTablaSimbolos.get(key)){
                System.out.println(item);
            }

            System.out.println("");
        }

    }

     /* Método que se encarga de imprimir el string buffer del código intermedio 3 direcciones en la terminal.
        Entradas: Ninguna
        Salidas: Ninguna
        Restricciones: Ninguna
    */
    private void imprimirCodigo3D(){
        System.out.println("++++++++ CODIGO 3D +++++++++");
        System.out.println("");
        System.out.println(codIn3D.toString());
    }

    /*
        Método que se encarga de retornar la tabla de símbolos
        Entradas: Ninguna
        Salidas: tabla de símbolos
        Restricciones: Ninguna
    */
    public HashMap<String, ArrayList<String>> getTablaSimbolos(){
        return listaTablaSimbolos;
    }

    /* Método que se encarga de imprimir en consola el error sintáctico
        Entradas: String error. Error que se va a imprimir
        Salidas: Ninguna. Imprime en consola el error
        Restricciones: Ninguna
    */
    private void manejoError(String error, String tipoError){
        errores = true;
        int linea = lex.getLine();
        int columna = lex.getColumn();
        System.out.println("Error "+tipoError+": "+ error +" (en la linea: " + linea + " y columna: " + columna+")");
        System.out.println("Se continua con el análisis "+tipoError);
    } 

    /* Método que se encarga de buscar en la tabla de símbolos actual un ID y devolver su tipo.
        Entradas: lista: lista de elementos de la tabla de símbolos actual, idBuscado: ID que se requiere buscar y queBusca: si busca el ID de una variable o de una función. 
        Salidas: String o null
        Restricciones: Ninguna
    */
     private String buscarID_o_tipoID(ArrayList<String> tablaSimbolos, String idBuscado, String queBusca) {
        int treeSize = hashTree.indexOf(hashTree.get(currentHashPos));
        for (int i = treeSize; i >= 0; i--) {
            tablaSimbolos = listaTablaSimbolos.get(hashTree.get(i));
            if(queBusca.equals("id")){
                // Recorre los elementos del ArrayList
                for (String elemento : tablaSimbolos) {
                    // Divide el elemento en ID y tipo
                    String[] partes = elemento.split(": ");
                    if (partes[0].equals(idBuscado)) { // Verifica si el ID coincide con el ID buscado
                        return partes[1]; // Se encontró el ID y se envía el tipo del ID
                    }
                    if (partes[0].equals("Parámetro") && partes[1].equals(idBuscado)) { // Verifica si el ID coincide con el ID buscado
                        return partes[1].trim(); // Se encontró el ID y se envía el tipo del ID
                    }	
                }
            }
            else if(queBusca.equals("funcion")){
                // Recorre los elementos del ArrayList
                for (String elemento : tablaSimbolos) {
                    // Divide el elemento en ID y tipo
                    String[] partes = elemento.split(":");
                
                    if (partes[1].equals(idBuscado)) { // Verifica si el ID coincide con el ID buscado
                        return partes[2]; // Se encontró el ID de la función y se envía el tipo de la función
                    }
                }
            }
            else if(queBusca.equals("tamañoArray")){
                // Recorre los elementos del ArrayList
                for (String elemento : tablaSimbolos) {
                    // Divide el elemento en ID y tipo
                    String[] partes = elemento.split(": ");
                
                    if (partes[0].equals(idBuscado)) { // Verifica si el ID coincide con el ID buscado
                        return partes[2]; // Se encontró el ID de la función y se envía el tipo de la función
                    }
                }

            }
        }
        return null;       
    }


    private String existeFuncion(String idBuscado){
        Collection<ArrayList<String>> valores = listaTablaSimbolos.values();
        for (ArrayList<String> tablaSimbolos : valores){
            // Recorre los elementos del ArrayList
            for (String elemento : tablaSimbolos) {
                // Divide el elemento en ID y tipo
                String[] partes = elemento.split(":");
                if (partes[0].equals("tipo") && partes[2].equals(idBuscado)) { // Verifica si el ID coincide con el ID buscado
                    return partes[3].trim(); // Se encontró el ID de la función y se envía el tipo de la función
                }
            }
        }
        return null;   
    }

    private ArrayList<String> obtenerParametrosFuncion(String funcion){
        Collection<ArrayList<String>> valores = listaTablaSimbolos.values();
        ArrayList<String> parametros = new ArrayList<String>();
        for (ArrayList<String> tablaSimbolos : valores){
            // Recorre los elementos del ArrayList
            for (int i = 0; i < tablaSimbolos.size(); i++) {
                String elemento = tablaSimbolos.get(i);
                // Divide el elemento en ID y tipo
                String[] partes = elemento.split(":");
                if (partes[0].equals("tipo") && partes[2].equals(funcion)) { // Verifica si el ID coincide con el ID buscado
                    for (int j = i+1; j < tablaSimbolos.size(); j++){
                        String linea = tablaSimbolos.get(i + 1); // Se encontró el ID de la función y se envía el tipo de la función
                        if(linea.contains("Parámetro")){
                            parametros.add(linea);
                        }
                    }
                    if (parametros.size() != 0){
                        return parametros;
                    }
                }
            }
        }
        return null;   
    }
    /*  Método que se encarga de verificar si todos los elementos de una lista tienen el mismo tipo de dato.
        Entradas: lista: lista de elementos en donde cada elemento contiene un string tipo: "elemento: tipo de dato". 
        Salidas: boolean, true o false.
        Restricciones: La lista NO puede estar vacía.
    */

    private String verificarTipo_elementosArray(ArrayList<String> lista, String tipoArray){

        for (int i = 0; i < lista.size(); i++) {
            String elemento = lista.get(i);
            String[] partesElemento = elemento.split(": ");
            String tipoDatoElemento = partesElemento[1].trim();

            if (!tipoDatoElemento.equals("error_semantico")){
                if (!tipoDatoElemento.equals(tipoArray)) {
                    return partesElemento[0]; // Los tipos de datos NO son iguales
                }
            }
            else{
                return "error_semantico";
            }  
        }

        return null; // Todos los elementos tienen el mismo tipo de dato
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



    

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= nuevoLenguaje EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // nuevoLenguaje ::= funcionMain 
            {
              Object RESULT =null;
		 imprimirTablaSimbolos(); imprimirCodigo3D(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nuevoLenguaje",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // nuevoLenguaje ::= funciones funcionMain 
            {
              Object RESULT =null;
		 imprimirTablaSimbolos(); imprimirCodigo3D(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nuevoLenguaje",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // funcionMain ::= iniFun LPARENT RPARENT INIBLOQUE bloque FINBLOQUE endFun 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionMain",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // funcionMain ::= error 
            {
              Object RESULT =null;
		 manejoError("Error de creación de función main", "sintáctico"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionMain",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // funciones ::= funcion 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // funciones ::= funciones funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // funcion ::= iniFun LPARENT parametros RPARENT INIBLOQUE bloque FINBLOQUE endFun 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // funcion ::= iniFun LPARENT RPARENT INIBLOQUE bloque FINBLOQUE endFun 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // funcion ::= iniFun LPARENT parametros RPARENT INIBLOQUE FINBLOQUE error 
            {
              Object RESULT =null;
		 manejoError("Funcion debe tener sentencias debido a que debe retornar un valor", "sintáctico"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // funcion ::= iniFun LPARENT RPARENT INIBLOQUE FINBLOQUE error 
            {
              Object RESULT =null;
		 manejoError("Funcion debe tener sentencias debido a que debe retornar un valor", "sintáctico"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // funcion ::= error 
            {
              Object RESULT =null;
		 manejoError("Error de creación de función", "sintáctico"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipoRet ::= INT 
            {
              Object RESULT =null;
		 RESULT = "int";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoRet",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipoRet ::= FLOAT 
            {
              Object RESULT =null;
		 RESULT = "float";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoRet",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipoRet ::= BOOLEAN 
            {
              Object RESULT =null;
		 RESULT = "boolean";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoRet",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // iniFun ::= tipoRet identifier 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
           String tipoTabla;
           if(id.toString().equals("main")){
            tipoTabla = "tipo:funcion:"+id.toString()+": "+tip.toString();
           }
           else{
            tipoTabla = "tipo:funcion:"+id.toString()+": "+tip.toString();
           }
           if(existeFuncion(id.toString()) == null){
                ArrayList<String> listaSimbolos = new ArrayList<String>();
                currentHash = id.toString();
                listaSimbolos.add(tipoTabla);
                hashTree.addLast(currentHash);
                listaTablaSimbolos.put(currentHash, listaSimbolos);
                RESULT = tip.toString()+" "+id.toString();
                codIn3D.append("\n_"+id.toString()+"_begin:");
           }
           else{
                currentHash = id.toString();
                hashTree.addLast(currentHash);
                manejoError("Función "+id.toString()+" ya existe", "semántico");
           }
           

              CUP$parser$result = parser.getSymbolFactory().newSymbol("iniFun",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // endFun ::= 
            {
              Object RESULT =null;
		 codIn3D.append("\n_"+hashTree.getLast()+"_end:"); hashTree.removeLast(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("endFun",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // identifier ::= MAIN 
            {
              Object RESULT =null;
		 RESULT = "main";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // identifier ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = id.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // parametros ::= parametro COMA parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // parametro ::= tipoVar ID 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 listaTablaSimbolos.get(currentHash).add("Parámetro: "+id.toString()+": "+tip.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // parametro ::= tipoVarSubset ID 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 listaTablaSimbolos.get(currentHash).add("Parámetro: "+id.toString()+": "+tip.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipoVar ::= FLOAT 
            {
              Object RESULT =null;
		 RESULT = "float"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVar",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipoVar ::= STRING 
            {
              Object RESULT =null;
		 RESULT = "string"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVar",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipoVar ::= BOOLEAN 
            {
              Object RESULT =null;
		 RESULT = "boolean"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVar",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tipoVarSubset ::= INT 
            {
              Object RESULT =null;
		 RESULT = "int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVarSubset",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tipoVarSubset ::= CHAR 
            {
              Object RESULT =null;
		 RESULT = "char"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVarSubset",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // bloque ::= sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentencias ::= sentencia sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentencia ::= creaVar FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentencia ::= usaVar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentencia ::= asignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentencia ::= llamaFunc FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentencia ::= output 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentencia ::= control 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentencia ::= returnFunc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentencia ::= creaArreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentencia ::= asignaArreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sentencia ::= breakCiclo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sentencia ::= error 
            {
              Object RESULT =null;
		 manejoError("Error de sentencia","sintáctico"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // usaVar ::= ID FINEXP 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  // ++++ Análisis semántico ++++
                    if(buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), id.toString(), "id") != null){
                        // ++++ Código 3D ++++
                        String temp = "t"+(currentTemp++); 
                        codIn3D.append("\n"+temp+" = "+id.toString());
                    }
                    else if(fatherCurrentHash != null && buscarID_o_tipoID(listaTablaSimbolos.get(fatherCurrentHash), id.toString(), "id") != null ){
                        // ++++ Código 3D ++++
                        String temp = "t"+(currentTemp++); 
                        codIn3D.append("\n"+temp+" = "+id.toString());
                    }
                    else{
                        // Manejo error semántico 
                        manejoError("El ID: "+id.toString()+" no existe o no ha sido creado dentro de la función "+currentHash, "semántico");
                    } 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("usaVar",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // usaVar ::= PLUS_UN ID FINEXP 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  // ++++ Análisis semántico ++++
                    if(buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), id.toString(), "id") != null){
                        // ++++ Código 3D ++++
                        String temp1 = "t"+(currentTemp++);
                        String temp2 = "t"+(currentTemp++);
                        String temp3 = "t"+(currentTemp++);
                        codIn3D.append("\n"+temp1+" = "+id.toString());
                        codIn3D.append("\n"+temp2+" = 1");
                        codIn3D.append("\n"+temp3+" = "+temp1+"+"+temp2);
                        codIn3D.append("\n"+id.toString()+" = "+temp3);
                    }
                    else if(fatherCurrentHash != null && buscarID_o_tipoID(listaTablaSimbolos.get(fatherCurrentHash), id.toString(), "id") != null ){
                        // ++++ Código 3D ++++
                        String temp1 = "t"+(currentTemp++);
                        String temp2 = "t"+(currentTemp++);
                        String temp3 = "t"+(currentTemp++);
                        codIn3D.append("\n"+temp1+" = "+id.toString());
                        codIn3D.append("\n"+temp2+" = 1");
                        codIn3D.append("\n"+temp3+" = "+temp1+"+"+temp2);
                        codIn3D.append("\n"+id.toString()+" = "+temp3);
                    }
                    else{
                        // Manejo error semántico 
                        manejoError("El ID: "+id.toString()+" no existe o no ha sido creado dentro de la función "+currentHash, "semántico");
                    } 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("usaVar",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // usaVar ::= MINUS_UN ID FINEXP 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  // ++++ Análisis semántico ++++
                    if(buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), id.toString(), "id") != null){
                        // ++++ Código 3D ++++
                        String temp1 = "t"+(currentTemp++);
                        String temp2 = "t"+(currentTemp++);
                        String temp3 = "t"+(currentTemp++);
                        codIn3D.append("\n"+temp1+" = "+id.toString());
                        codIn3D.append("\n"+temp2+" = 1");
                        codIn3D.append("\n"+temp3+" = "+temp1+"-"+temp2);
                        codIn3D.append("\n"+id.toString()+" = "+temp3);
                    }
                    else if(fatherCurrentHash != null && buscarID_o_tipoID(listaTablaSimbolos.get(fatherCurrentHash), id.toString(), "id") != null ){
                        // ++++ Código 3D ++++
                        String temp1 = "t"+(currentTemp++);
                        String temp2 = "t"+(currentTemp++);
                        String temp3 = "t"+(currentTemp++);
                        codIn3D.append("\n"+temp1+" = "+id.toString());
                        codIn3D.append("\n"+temp2+" = 1");
                        codIn3D.append("\n"+temp3+" = "+temp1+"-"+temp2);
                        codIn3D.append("\n"+id.toString()+" = "+temp3);
                    }
                    else{
                        // Manejo error semántico 
                        manejoError("El ID: "+id.toString()+" no existe o no ha sido creado dentro de la función "+currentHash, "semántico");
                    } 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("usaVar",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // creaVar ::= tipoVar ID 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   // ++++ Análisis semántico ++++
                    if(fatherCurrentHash != null && buscarID_o_tipoID(listaTablaSimbolos.get(fatherCurrentHash), id.toString(), "id") == null){
                        if(buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), id.toString(), "id") == null ) {
                            // ++++ Código 3D ++++
                            codIn3D.append("\ndata_"+tip.toString()+" "+id.toString());
                            // +++ Tabla de símbolos ++++ 
                            listaTablaSimbolos.get(currentHash).add(id.toString()+": "+tip.toString());
                            RESULT = id.toString()+": "+tip.toString();
                        }
                        else{
                            //Manejo error semántico
                            manejoError("El ID: "+id+" ya ha sido utilizado en otra creación de variable dentro de "+currentHash, "semántico");
                            RESULT = "error_semantico";
                        }
                    }
                    else if(fatherCurrentHash == null && buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), id.toString(), "id") == null){
                            // ++++ Código 3D ++++
                            codIn3D.append("\ndata_"+tip.toString()+" "+id.toString());
                            // +++ Tabla de símbolos ++++ 
                            listaTablaSimbolos.get(currentHash).add(id.toString()+": "+tip.toString());
                            RESULT = id.toString()+": "+tip.toString();
                    }
                    else{
                        //Manejo error semántico
                        manejoError("El ID: "+id+" ya ha sido utilizado en otra creación de variable dentro de "+fatherCurrentHash, "semántico");
                        RESULT = "error_semantico";
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaVar",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // creaVar ::= tipoVarSubset ID 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  // ++++ Análisis semántico ++++
                    
                    //System.out.println(fatherCurrentHash);
                    if(fatherCurrentHash != null && buscarID_o_tipoID(listaTablaSimbolos.get(fatherCurrentHash), id.toString(), "id") == null){
                        if(buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), id.toString(), "id") == null ) {
                            // ++++ Código 3D ++++
                            codIn3D.append("\ndata_"+tip.toString()+" "+id.toString());
                            // +++ Tabla de símbolos ++++ 
                            listaTablaSimbolos.get(currentHash).add(id.toString()+": "+tip.toString());
                            RESULT = id.toString()+": "+tip.toString();
                        }
                        else{
                            //Manejo error semántico
                            manejoError("El ID: "+id+" ya ha sido utilizado en otra creación de variable dentro de "+currentHash, "semántico");
                            RESULT = "error_semantico";
                        }
                    }
                    else if(fatherCurrentHash == null && buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), id.toString(), "id") == null){
                            // ++++ Código 3D ++++
                            codIn3D.append("\ndata_"+tip.toString()+" "+id.toString());
                            // +++ Tabla de símbolos ++++ 
                            listaTablaSimbolos.get(currentHash).add(id.toString()+": "+tip.toString());
                            RESULT = id.toString()+": "+tip.toString();
                    }
                    else{
                        //Manejo error semántico
                        manejoError("El ID: "+id+" ya ha sido utilizado en otra creación de variable dentro de "+fatherCurrentHash, "semántico");
                        RESULT = "error_semantico";
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaVar",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // asignacion ::= creaAsignaVar FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // asignacion ::= ID EQUIV literal FINEXP 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  // ++++ Análisis semántico ++++
                        if(fatherCurrentHash != null){
                            if(buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), id.toString(), "id") != null){ 
                                if(!lit.toString().equals("error_semantico")){
                                    String[] partes = lit.toString().split("::");
                                    // ++++ Código 3D ++++
                                    String temp = "t"+(currentTemp++); 
                                    codIn3D.append("\n"+id.toString()+" = "+partes[1].toString());
                                    RESULT = partes[0].toString()+"::"+temp; 
                                }
                                else{
                                    RESULT = "error_semantico";
                                }
                            }
                            else{
                                //Manejo error semántico
                                manejoError("El ID: "+id+" no ha sido creado dentro de la función "+fatherCurrentHash, "semántico");
                                RESULT = "error_semantico";
                            }
                        }
                        else if(fatherCurrentHash == null && buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), id.toString(), "id") != null){
                            if(!lit.toString().equals("error_semantico")){
                                String[] partes = lit.toString().split("::");
                                // ++++ Código 3D ++++
                                String temp = "t"+(currentTemp++); 
                                codIn3D.append("\n"+id.toString()+" = "+partes[1].toString());
                                RESULT = partes[0].toString()+"::"+temp; 
                            }
                            else{
                                RESULT = "error_semantico";
                            }
                        }
                        else{
                            //Manejo error semántico
                            manejoError("El ID: "+id+" no ha sido creado dentro de la función ", "semántico");
                            RESULT = "error_semantico";
                        }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // asignacion ::= ID EQUIV input FINEXP 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int inputleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int inputright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object input = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        String[] partes = input.toString().split("::");
                        String tipo = partes[0].toString();

                        if(buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), id.toString(), "id").equals(tipo)){
                            // ++++ Código 3D ++++
                            String temp = "t"+(currentTemp++); 
                            codIn3D.append("\n"+id.toString()+" = "+partes[1].toString());
                            RESULT = partes[0].toString()+"::"+temp; 
                        }
                        else{
                            //Manejo error semántico
                            manejoError("El ID: "+id+" no ha sido creado dentro de la función", "semántico");
                            RESULT = "error_semantico";
                        }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // creaAsignaVar ::= creaVar EQUIV literal 
            {
              Object RESULT =null;
		int cvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object cv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 // ++++ Análisis semántico ++++
                        if(!cv.equals("error_semantico") && !lit.equals("error_semantico")){
                            String[] partes_cv = cv.toString().split(": ");
                            String[] partes_lit = lit.toString().split("::");
                            if(!partes_cv[1].equals(partes_lit[0])){
                                System.out.println("++++++ El tipo de la variable es: "+partes_cv[1]);
                                System.out.println("++++++ El tipo del literal es: "+partes_lit[0]);
                                manejoError("El tipo del ID: "+partes_cv[0]+" no corresponde con los valores asignados", "semántico") ;
                                RESULT = "error_semantico";
                            }
                            else{ 
                                // ++++ Código 3D ++++
                                codIn3D.append("\n"+partes_cv[0]+" = "+partes_lit[1]);
                            }
                        }
                        else{
                            RESULT = "error_semantico";
                        }
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaAsignaVar",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // creaAsignaVar ::= creaVar EQUIV input 
            {
              Object RESULT =null;
		int cvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object cv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int inputleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inputright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object input = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        String[] partes = input.toString().split("::");
                        String tipo = partes[0].toString();
                        String[] partesLadoIzq = cv.toString().split(": ");

                        if(partesLadoIzq[1].equals(tipo)){
                            // ++++ Código 3D ++++
                            String temp = "t"+(currentTemp++); 
                            codIn3D.append("\n"+partesLadoIzq[0].toString()+" = "+partes[1].toString());
                            RESULT = partes[0].toString()+"::"+temp; 
                        }
                        else{
                            //Manejo error semántico
                            manejoError("El ID: "+ partesLadoIzq[0].toString() +" no ha sido creado dentro de la función", "semántico");
                            RESULT = "error_semantico";
                        }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaAsignaVar",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // literal ::= operacion 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = op ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // literal ::= CADENA 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 // ++++ Código 3D ++++
                   String temp = "t"+(currentTemp++); 
                   codIn3D.append("\n"+temp+" = "+cad.toString());
                   RESULT = "string::"+temp; 
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // literal ::= CARACTER 
            {
              Object RESULT =null;
		int carleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int carright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object car = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 // ++++ Código 3D ++++
                   String temp = "t"+(currentTemp++); 
                   codIn3D.append("\n"+temp+" = "+car.toString());
                   RESULT = "char::"+temp; 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // literal ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // literal ::= error 
            {
              Object RESULT =null;
		 manejoError("Error de literal", "sintáctico"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // operacion ::= operacionLogica 
            {
              Object RESULT =null;
		int opLogleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opLogright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opLog = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = opLog; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operacionAritmetica ::= operandoArit 
            {
              Object RESULT =null;
		int opeAritleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opeAritright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opeArit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = opeArit; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // operacionAritmetica ::= PLUS_UN operandoArit 
            {
              Object RESULT =null;
		int opeAritleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opeAritright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opeArit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  // ++++ Análisis semántico ++++
                                if(!opeArit.toString().equals("error_semantico")){
                                    String[] partes = opeArit.toString().split("::");
                                    // ++++ Código 3D ++++
                                    String temp1 = "t"+(currentTemp++);
                                    String temp2 = "t"+(currentTemp++);
                                    codIn3D.append("\n"+temp1+" = 1");
                                    codIn3D.append("\n"+temp2+" = "+partes[1].toString()+" + "+temp1);
                                    codIn3D.append("\n"+partes[2].toString()+" = "+temp2);
                                    RESULT = partes[0].toString()+"::"+temp2;
                                }
                                else{
                                    RESULT = "error_semantico";
                                }
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // operacionAritmetica ::= MINUS_UN operandoArit 
            {
              Object RESULT =null;
		int opeAritleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opeAritright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opeArit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  // ++++ Análisis semántico ++++
                                if(!opeArit.toString().equals("error_semantico")){
                                    String[] partes = opeArit.toString().split("::");
                                    // ++++ Código 3D ++++
                                    String temp1 = "t"+(currentTemp++);
                                    String temp2 = "t"+(currentTemp++);
                                    codIn3D.append("\n"+temp1+" = 1");
                                    codIn3D.append("\n"+temp2+" = "+partes[1].toString()+" - "+temp1);
                                    codIn3D.append("\n"+partes[2].toString()+" = "+temp2);
                                    RESULT = partes[0].toString()+"::"+temp2;
                                }
                                else{
                                    RESULT = "error_semantico";
                                }
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // operacionAritmetica ::= operacionAritmetica operadorArit operacionAritmetica 
            {
              Object RESULT =null;
		int operacion1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int operacion1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object operacion1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object operador = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int operacion2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int operacion2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object operacion2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if (!operacion1.equals("error_semantico") && !operacion2.equals("error_semantico")){
                                    String[] op1_partes = operacion1.toString().split("::");
                                    String[] op2_partes = operacion2.toString().split("::");
                                    if(op1_partes[0].equals(op2_partes[0])){ // si los tipos de las operaciones son iguales
                                        // ++++ Código 3D ++++
                                        String temp = "t"+(currentTemp++); 
                                        codIn3D.append("\n"+temp+" = "+op1_partes[1]+" "+operador.toString()+" "+op2_partes[1]);
                                        
                                        RESULT = op1_partes[0]+"::"+temp;
                                    }
                                    else if(!op1_partes[0].equals(op2_partes[0])){
                                        System.out.println("+++++++++El tipo de la operación Artimética 1 es: "+op1_partes[0].toString());
                                        System.out.println("+++++++++El tipo de la operación Aritmética 2 es: "+op2_partes[0].toString());
                                        manejoError("No se pueden operar valores o variables de diferentes tipos de datos", "semántico");
                                        RESULT = "error_semantico";
                                    }
                                }
                                else{
                                    RESULT = "error_semantico"; 
                                }
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operacionAritmetica ::= LPARENT operacionAritmetica RPARENT 
            {
              Object RESULT =null;
		int operacionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operacionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object operacion = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  if(!operacion.equals("error_semantico")){
                                    String[] partes = operacion.toString().split("::");
                                    String temp = "t"+(currentTemp++);
                                    codIn3D.append("\n"+temp+" = "+"("+partes[1]+")");
                                    RESULT = partes[0]+"::"+temp;
                                } 
                                else{
                                    RESULT = "error_semantico";
                                } 
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // operacionAritmetica ::= MINUS operacionAritmetica 
            {
              Object RESULT =null;
		int operacionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int operacionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object operacion = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(!operacion.equals("error_semantico")){
                                    String temp = "t"+(currentTemp++);
                                    String[] partes = operacion.toString().split("::");
                                    codIn3D.append("\n"+temp+" = "+"-"+partes[1].toString());
                                    RESULT = partes[0]+"::"+temp;
                                } 
                                else{
                                    RESULT = "error_semantico";
                                }
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // operadorArit ::= PLUS 
            {
              Object RESULT =null;
		 RESULT = "+"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // operadorArit ::= MINUS 
            {
              Object RESULT =null;
		 RESULT = "-"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // operadorArit ::= TIMES 
            {
              Object RESULT =null;
		 RESULT = "*"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operadorArit ::= DIV 
            {
              Object RESULT =null;
		 RESULT = "/"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operadorArit ::= POWER 
            {
              Object RESULT =null;
		 RESULT = "**"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operadorArit ::= MODULE 
            {
              Object RESULT =null;
		 RESULT = "~"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // operandoArit ::= ENTERO 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 // ++++ Código 3D ++++
                            String temp = "t"+(currentTemp++); 
                            codIn3D.append("\n"+temp+" = "+ent.toString());
                            RESULT = "int::"+temp; 
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operandoArit ::= DECIMAL 
            {
              Object RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 // ++++ Código 3D ++++
                            String temp = "t"+(currentTemp++); 
                            codIn3D.append("\n"+temp+" = "+dec.toString());
                            RESULT = "float::"+temp; 
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operandoArit ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  String tipo = buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), id.toString(), "id");
                        if(tipo != null){
                            // ++++ Código 3D ++++
                            String temp = "t"+(currentTemp++); 
                            codIn3D.append("\n"+temp+" = "+id.toString());
                            RESULT = tipo+"::"+temp+"::"+id.toString(); 
                        }
                        else if (fatherCurrentHash != null && buscarID_o_tipoID(listaTablaSimbolos.get(fatherCurrentHash), id.toString(), "id") != null ){
                            // ++++ Código 3D ++++
                            String tipo2 = buscarID_o_tipoID(listaTablaSimbolos.get(fatherCurrentHash), id.toString(), "id");
                            String temp = "t"+(currentTemp++); 
                            codIn3D.append("\n"+temp+" = "+id.toString());
                            RESULT = tipo2+"::"+temp+"::"+id.toString();
                        }
                        else{
                            manejoError("El id: "+id+" no existe o no ha sido creado", "semántico");
                            RESULT = "error_semantico";
                        } 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // operandoArit ::= llamaFunc 
            {
              Object RESULT =null;
		int llamaFleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llamaFright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object llamaF = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        if (!llamaF.toString().equals("error_semantico")){
                            String[] partes = llamaF.toString().split("::");
                            String tipo = partes[0].toString();
                            String temp = partes[1].toString();
                            String id = partes[2].toString();
                            RESULT = tipo+"::"+temp+"::call "+id;
                        }
                        else{
                            RESULT = "error_semantico";
                        }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // operandoArit ::= expArreglo 
            {
              Object RESULT =null;
		int expArrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expArrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expArr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(!expArr.toString().equals("error_semantico")){
                            String[] partes = expArr.toString().split("::");
                            String tipo = buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), partes[0].toString(), "id");
                            if( tipo != null){
                                // ++++ Código 3D ++++
                                String temp = "t"+(currentTemp++); 
                                codIn3D.append("\n"+temp+" = "+partes[0].toString()+"["+partes[1].toString()+"]");
                                RESULT = tipo+"::"+temp;
                            }
                            else if(fatherCurrentHash != null){
                                String tipo2 = buscarID_o_tipoID(listaTablaSimbolos.get(fatherCurrentHash), partes[0].toString(), "id");
                                if(tipo2 != null){
                                    // ++++ Código 3D ++++
                                    String temp = "t"+(currentTemp++); 
                                    codIn3D.append("\n"+temp+" = "+partes[0].toString()+"["+partes[1].toString()+"]");
                                    RESULT = tipo2+"::"+temp;
                                }
                                else{
                                    // Manejo error semántico
                                    manejoError("El id: "+partes[0].toString()+" no existe o no ha sido creado", "semántico");
                                    RESULT = "error_semantico";
                                }
                            }
                            else{
                                // Manejo error semántico
                                manejoError("El id: "+partes[0].toString()+" no existe o no ha sido creado", "semántico");
                                RESULT = "error_semantico";
                            }
                        }
                        else{
                            RESULT = "error_semantico";
                        }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // operacionRelacional ::= operacionAritmetica operadorRel operacionAritmetica 
            {
              Object RESULT =null;
		int operacion1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int operacion1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object operacion1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object operador = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int operacion2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int operacion2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object operacion2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if (!operacion1.equals("error_semantico") && !operacion2.equals("error_semantico")){
                                    String[] op1_partes = operacion1.toString().split("::");
                                    String[] op2_partes = operacion2.toString().split("::");
                                    if(op1_partes[0].equals(op2_partes[0])){ // si los tipos de las operaciones son iguales
                                        // ++++ Código 3D ++++
                                        String temp = "t"+(currentTemp++); 
                                        codIn3D.append("\n"+temp+" = "+op1_partes[1]+" "+operador.toString()+" "+op2_partes[1]);
                                        RESULT = "boolean::"+temp;
                                    }
                                    else if(!op1_partes[0].equals(op2_partes[0])){
                                        System.out.println("+++++++++El tipo de la operación Relacional 1 es: "+operacion1.toString());
                                        System.out.println("+++++++++El tipo de la operación Relacional 2 es: "+operacion2.toString());
                                        manejoError("No se pueden hacer operaciones relacionales con valores o variables de diferentes tipos de datos", "semántico");
                                        RESULT = "error_semantico";
                                    }
                                }
                                else{
                                    RESULT = "error_semantico"; 
                                }
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionRelacional",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // operadorRel ::= MAYOR_QUE 
            {
              Object RESULT =null;
		 RESULT = ">"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // operadorRel ::= MAYOR_IGUAL 
            {
              Object RESULT =null;
		 RESULT = ">="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // operadorRel ::= MENOR_QUE 
            {
              Object RESULT =null;
		 RESULT = "<"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // operadorRel ::= MENOR_IGUAL 
            {
              Object RESULT =null;
		 RESULT = "<="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // operadorRel ::= DEQUIV 
            {
              Object RESULT =null;
		 RESULT = "=="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // operadorRel ::= DIF 
            {
              Object RESULT =null;
		 RESULT = "!="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // operacionLogica ::= operandoLog 
            {
              Object RESULT =null;
		int opLogleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opLogright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opLog = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  // ++++ Código 3D ++++
                            String temp = "t"+(currentTemp++); 
                            codIn3D.append("\n"+temp+" = "+opLog.toString());
                            RESULT = "boolean::"+temp;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionLogica",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // operacionLogica ::= operacionRelacional 
            {
              Object RESULT =null;
		int opRelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opRelright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opRel = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = opRel; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionLogica",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // operacionLogica ::= operacionAritmetica 
            {
              Object RESULT =null;
		int opAritleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opAritright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opArit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = opArit; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionLogica",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // operacionLogica ::= operacionLogica operadorLog operacionLogica 
            {
              Object RESULT =null;
		int operacion1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int operacion1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object operacion1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object operador = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int operacion2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int operacion2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object operacion2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if (!operacion1.equals("error_semantico") && !operacion2.equals("error_semantico")){
                                String[] op1_partes = operacion1.toString().split("::");
                                String[] op2_partes = operacion2.toString().split("::");
                                // ++++ Código 3D ++++
                                String temp = "t"+(currentTemp++); 
                                codIn3D.append("\n"+temp+" = "+op1_partes[1]+" "+operador.toString()+" "+op2_partes[1]);
                                RESULT = "boolean::"+temp;
                            }
                            else{
                                RESULT = "error_semantico"; 
                            }
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionLogica",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // operacionLogica ::= LPARENT operacionLogica RPARENT 
            {
              Object RESULT =null;
		int opLogleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opLogright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object opLog = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(!opLog.equals("error_semantico")){
                            String[] partes = opLog.toString().split("::");
                            String temp = "t"+(currentTemp++);
                            codIn3D.append("\n"+temp+" = "+"("+partes[1]+")");
                            RESULT = partes[0]+"::"+temp;
                            } 
                            else{
                                RESULT = "error_semantico";
                            } 
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionLogica",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // operacionLogica ::= negacion operacionLogica 
            {
              Object RESULT =null;
		int negleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int negright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object neg = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int opLogleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opLogright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opLog = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(!opLog.equals("error_semantico")){
                            String temp = "t"+(currentTemp++);
                            String[] partes = opLog.toString().split("::");
                            codIn3D.append("\n"+temp+" = "+neg.toString()+partes[1].toString());
                            RESULT = "boolean::"+temp;
                            } 
                            else{
                                RESULT = "error_semantico";
                            }
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionLogica",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // operandoLog ::= TRUE 
            {
              Object RESULT =null;
		 RESULT = "true"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoLog",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // operandoLog ::= FALSE 
            {
              Object RESULT =null;
		 RESULT = "false"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoLog",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // operadorLog ::= AND 
            {
              Object RESULT =null;
		 RESULT = "^"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLog",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // operadorLog ::= OR 
            {
              Object RESULT =null;
		 RESULT = "#"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLog",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // negacion ::= NOT 
            {
              Object RESULT =null;
		 RESULT = "not"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("negacion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // negacion ::= EXCLAMACION 
            {
              Object RESULT =null;
		 RESULT = "!"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("negacion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // llamaFunc ::= ID LPARENT parametrosLlamada RPARENT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  
                    
                    String tipoFunc = existeFuncion(id.toString());
                    if(tipoFunc != null){
                        ArrayList<String> parametrosFuncion = obtenerParametrosFuncion(id.toString());
                       if (parametrosFuncion.size() == elementosParametros.size()){
                            for(int i=0; i<parametrosFuncion.size(); i++){
                                String[] partesParametro = parametrosFuncion.get(i).split(":");
                                String[] partesElemento = elementosParametros.get(i).split(":");
                                if(partesParametro[2].trim().equals(partesElemento[0])){
                                    // ++++ Código 3D ++++
                                    codIn3D.append("\nparam t"+ (currentTemp-1));
                                }
                                else{
                                    manejoError("El tipo de dato del parámetro: "+partesParametro[1]+" no coincide con el tipo de dato del elemento: "+partesElemento[1], "semántico");
                                    RESULT = "error_semantico";
                                }
                            }
                            // ++++ Código 3D ++++
                            String temp = "t"+(currentTemp++);
                            codIn3D.append("\n"+temp+"= call "+id.toString()+ ", " + parametrosFuncion.size());
                            RESULT = tipoFunc+"::"+temp +"::"+id.toString()+", "+ parametrosFuncion.size();
                       }
                       else{
                           manejoError("El número de parámetros de la función: "+id+" no coincide con el número de elementos en la llamada", "semántico");
                           RESULT = "error_semantico";
                       }
                    }
                    else{
                        // Manejo error semántico
                        manejoError("La función: "+id+" no existe o no ha sido creada", "semántico");
                        RESULT = "error_semantico";
                    }
                    elementosParametros.clear();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamaFunc",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // llamaFunc ::= ID LPARENT RPARENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamaFunc",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // parametrosLlamada ::= parametroLlamada 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                            elementosParametros.add(lit.toString());
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosLlamada",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // parametrosLlamada ::= parametroLlamada COMA parametrosLlamada 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  
                            elementosParametros.add(lit.toString());
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosLlamada",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // parametroLlamada ::= literal 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=lit.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroLlamada",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // input ::= leeInt 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("input",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // input ::= leeFloat 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("input",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // leeInt ::= READ_INT LPARENT RPARENT 
            {
              Object RESULT =null;
		
                        // ++++ Código 3D ++++
                        codIn3D.append("\nt"+(currentTemp-1)+" = call readInt");
                        RESULT = "int::t"+(currentTemp-1);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("leeInt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // leeFloat ::= READ_FLOAT LPARENT RPARENT 
            {
              Object RESULT =null;
		
                        // ++++ Código 3D ++++
                        codIn3D.append("\nt"+(currentTemp-1)+" call readFloat" );
                        RESULT = "float::t"+(currentTemp-1);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("leeFloat",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // output ::= escribeInt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("output",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // output ::= escribeFloat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("output",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // output ::= escribeString 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("output",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // escribeInt ::= PRINT_INT LPARENT ID RPARENT FINEXP 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                        String tipo = buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), id.toString(), "id");
                        if(tipo.equals("int")){
                            // ++++ Código 3D ++++
                            codIn3D.append("\ncall printInt t"+(currentTemp-1));
                        }
                        else{
                            manejoError("El tipo de dato del elemento: "+id.toString()+" no coincide con el tipo de dato del parámetro: int", "semántico");
                        }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribeInt",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // escribeInt ::= PRINT_INT LPARENT ENTERO RPARENT FINEXP 
            {
              Object RESULT =null;
		  
                            codIn3D.append("\ncall printInt t"+(currentTemp-1));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribeInt",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // escribeFloat ::= PRINT_FLOAT LPARENT ID RPARENT FINEXP 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        String tipo = buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), id.toString(), "id");
                        if(tipo.equals("float")){
                            // ++++ Código 3D ++++
                            codIn3D.append("\ncall printFloat t"+(currentTemp-1));
                        }
                        else{
                            manejoError("El tipo de dato del elemento: "+id.toString()+" no coincide con el tipo de dato del parámetro: int", "semántico");
                        }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribeFloat",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // escribeFloat ::= PRINT_FLOAT LPARENT DECIMAL RPARENT FINEXP 
            {
              Object RESULT =null;
		  
                            codIn3D.append("\nprintFloat t"+(currentTemp-1));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribeFloat",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // escribeString ::= PRINT_STRING LPARENT ID RPARENT FINEXP 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        String tipo = buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), id.toString(), "id");
                        if(tipo.equals("string")){
                            // ++++ Código 3D ++++
                            codIn3D.append("\ncall printString t"+(currentTemp-1));
                        }
                        else{
                            manejoError("El tipo de dato del elemento: "+id.toString()+" no coincide con el tipo de dato del parámetro: int", "semántico");
                        }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribeString",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // escribeString ::= PRINT_STRING LPARENT CADENA RPARENT FINEXP 
            {
              Object RESULT =null;
		  
                            codIn3D.append("\ncall printString t"+(currentTemp-1));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribeString",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // control ::= condicional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // control ::= ciclo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // condicional ::= condIf condsElif condElse endIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // condicional ::= condIf condsElif endIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // condicional ::= condIf condElse endIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // condicional ::= condIf endIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // condIf ::= beginIf IF LPARENT operacionLogica evaluaCondicionIf RPARENT INIBLOQUE beginBloqueIf bloque endBloqueIf FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condIf",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // beginIf ::= 
            {
              Object RESULT =null;
		 String tipoTabla = "tipo:condicional:if";
                ArrayList<String> listaSimbolos = new ArrayList<String>();
                
                fatherCurrentHash = currentHash;
                currentHash = "if_"+(++contador_if)+"_"+ hashTree.get(currentHashPos);
                listaSimbolos.add(tipoTabla);
                hashTree.addLast(currentHash);
                currentHashPos++;
                listaTablaSimbolos.put(currentHash, listaSimbolos);
                codIn3D.append("\n_if_" + contador_if + ":");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("beginIf",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // endIf ::= 
            {
              Object RESULT =null;
		    codIn3D.append("\n_end_if_"+(contador_if)+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("endIf",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // evaluaCondicionIf ::= 
            {
              Object RESULT =null;
		    int temporalAnterior = currentTemp;
                            codIn3D.append("\nif t"+(--temporalAnterior)+" goto _if_"+(contador_if)+"_bloque");
                            codIn3D.append("\ngoto _end_if_"+(contador_if)+"_bloque");
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("evaluaCondicionIf",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // beginBloqueIf ::= 
            {
              Object RESULT =null;
		 codIn3D.append("\n_if_"+(contador_if)+"_bloque:"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("beginBloqueIf",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // endBloqueIf ::= 
            {
              Object RESULT =null;
		  hashTree.removeLast();
                    currentHashPos--;  
                    currentHash = hashTree.getLast();
                    if (hashTree.size() > 1)
                        fatherCurrentHash = hashTree.get(currentHashPos-1);
                    else
                        fatherCurrentHash = null;  
                    codIn3D.append("\ngoto _end_if_"+(contador_if)); 
                    codIn3D.append("\n_end_if_"+(contador_if)+"_bloque:"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("endBloqueIf",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // condsElif ::= condElif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condsElif",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // condsElif ::= condElif condsElif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condsElif",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // condElif ::= beginElif ELIF LPARENT operacionLogica evaluaCondicionElif RPARENT INIBLOQUE beginBloqueElif bloque endBloqueElif FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condElif",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // beginElif ::= 
            {
              Object RESULT =null;
		 String tipoTabla = "tipo:condicional:elif";
                ArrayList<String> listaSimbolos = new ArrayList<String>();
                
                fatherCurrentHash = currentHash;
                currentHash = "if_"+(contador_if)+"_elif_"+(++contador_elif)+ hashTree.get(currentHashPos);
                listaSimbolos.add(tipoTabla);
                hashTree.addLast(currentHash);
                currentHashPos++;
                listaTablaSimbolos.put(currentHash, listaSimbolos);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("beginElif",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // evaluaCondicionElif ::= 
            {
              Object RESULT =null;
		    int temporalAnterior = currentTemp;
                            codIn3D.append("\nif t"+(--temporalAnterior)+" goto _if_"+(contador_if)+"_elif_"+(contador_elif)+"_bloque");
                            codIn3D.append("\ngoto _end_if_"+(contador_if)+"_elif_"+(contador_elif)+"_bloque");
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("evaluaCondicionElif",83, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // beginBloqueElif ::= 
            {
              Object RESULT =null;
		 codIn3D.append("\n_if_"+(contador_if)+"_elif_"+(contador_elif)+"_bloque:"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("beginBloqueElif",84, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // endBloqueElif ::= 
            {
              Object RESULT =null;
		 
                        hashTree.removeLast();
                        currentHashPos--;  
                        currentHash = hashTree.getLast();
                        if (hashTree.size() > 1)
                            fatherCurrentHash = hashTree.get(currentHashPos-1);
                        else
                            fatherCurrentHash = null;  
                        codIn3D.append("\ngoto _end_if_"+(contador_if)); 
                        codIn3D.append("\n_end_if_"+(contador_if)+"_elif_"+(contador_elif)+"_bloque:"); 
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("endBloqueElif",85, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // condElse ::= beginElse ELSE INIBLOQUE bloque FINBLOQUE endElse 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condElse",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // beginElse ::= 
            {
              Object RESULT =null;
		 String tipoTabla = "tipo:condicional:else";
                ArrayList<String> listaSimbolos = new ArrayList<String>();
                
                fatherCurrentHash = currentHash;
                currentHash = "if_"+(contador_if)+"_else_"+(++contador_else)+ hashTree.get(currentHashPos);
                listaSimbolos.add(tipoTabla);
                hashTree.addLast(currentHash);
                currentHashPos++;
                listaTablaSimbolos.put(currentHash, listaSimbolos);
                codIn3D.append("\n_if_"+ contador_if +"_else_" + contador_else + ":");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("beginElse",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // endElse ::= 
            {
              Object RESULT =null;
		
                hashTree.removeLast();
                currentHashPos--;  
                currentHash = hashTree.getLast();
                if (hashTree.size() > 1)
                    fatherCurrentHash = hashTree.get(currentHashPos-1);
                else
                    fatherCurrentHash = null;  
                codIn3D.append("\n_end_if_else_"+(contador_else)+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("endElse",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ciclo ::= cicloDoWhile 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ciclo ::= cicloFor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // cicloDoWhile ::= beginWhile DO INIBLOQUE beginCicloWhile bloque endCicloWhile FINBLOQUE WHILE LPARENT beginCondicionWhile operacionLogica evaluaCondicionWhile RPARENT FINEXP endWhile 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cicloDoWhile",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // beginWhile ::= 
            {
              Object RESULT =null;
		 String tipoTabla = "tipo:ciclo:while";
                ArrayList<String> listaSimbolos = new ArrayList<String>();
                
                fatherCurrentHash = currentHash;
                currentHash = "while_"+(currentHashPos + 1)+"_"+ hashTree.get(currentHashPos);
                listaSimbolos.add(tipoTabla);
                hashTree.addLast(currentHash);
                currentHashPos++;
                listaTablaSimbolos.put(currentHash, listaSimbolos);
                codIn3D.append("\n_begin_while_"+(contador_while)+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("beginWhile",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // endWhile ::= 
            {
              Object RESULT =null;
		  
                hashTree.removeLast();
                currentHashPos--;  
                currentHash = hashTree.getLast();
                if (hashTree.size() > 1)
                    fatherCurrentHash = hashTree.get(currentHashPos-1);
                else
                    fatherCurrentHash = null;       
                codIn3D.append("\n_end_while_"+(contador_while)+":"); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("endWhile",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // beginCicloWhile ::= 
            {
              Object RESULT =null;
		 codIn3D.append("\n_begin_while_"+(contador_while)+"_bloque:"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("beginCicloWhile",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // endCicloWhile ::= 
            {
              Object RESULT =null;
		 codIn3D.append("\ngoto _begin_while_"+(contador_while)+"_condicion");
                codIn3D.append("\n_end_while_"+(contador_while)+"_bloque:"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("endCicloWhile",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // beginCondicionWhile ::= 
            {
              Object RESULT =null;
		 codIn3D.append("\n_begin_while_"+(contador_while)+"_condicion:"); 
                            currentHashPos--; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("beginCondicionWhile",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // evaluaCondicionWhile ::= 
            {
              Object RESULT =null;
		 int temporalAnterior = currentTemp;
                       currentHashPos++;
                       codIn3D.append("\nif t"+(--temporalAnterior)+" goto _begin_while_"+(contador_while)+"_bloque");
                       codIn3D.append("\ngoto _end_while_"+(contador_while)+"_bloque"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("evaluaCondicionWhile",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // cicloFor ::= beginFor FOR LPARENT creaAsignaVar FINEXP beginCondicion operacionLogica evaluaCondicion FINEXP beginAlter operacionAritmetica endAlter RPARENT INIBLOQUE beginCiclo bloque endCiclo FINBLOQUE endFor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cicloFor",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // cicloFor ::= beginFor FOR LPARENT creaAsignaVar FINEXP beginCondicion operacionLogica evaluaCondicion FINEXP beginAlter asignacion endAlter RPARENT INIBLOQUE beginCiclo bloque endCiclo FINBLOQUE endFor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cicloFor",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // beginFor ::= 
            {
              Object RESULT =null;
		 String tipoTabla = "tipo:ciclo:for";
                ArrayList<String> listaSimbolos = new ArrayList<String>();
                fatherCurrentHash = currentHash;
                currentHash = "for_"+(++contador_for)+"_"+fatherCurrentHash;
                listaSimbolos.add(tipoTabla);
                hashTree.addLast(currentHash);
                currentHashPos++;
                listaTablaSimbolos.put(currentHash, listaSimbolos);
                codIn3D.append("\n_begin_for_"+(contador_for)+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("beginFor",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // endFor ::= 
            {
              Object RESULT =null;
		  
                currentHash = fatherCurrentHash;
                currentHash = hashTree.get(currentHashPos-1);
                hashTree.removeLast();
                currentHashPos--;
                fatherCurrentHash = null;                
                codIn3D.append("\n_end_for_"+(contador_for)+":"); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("endFor",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // beginCiclo ::= 
            {
              Object RESULT =null;
		 codIn3D.append("\n_begin_for_"+(contador_for)+"_bloque:"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("beginCiclo",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // endCiclo ::= 
            {
              Object RESULT =null;
		 codIn3D.append("\ngoto _begin_for_"+(contador_for)+"_alter");
                codIn3D.append("\n_end_for_"+(contador_for)+"_bloque:"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("endCiclo",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // beginCondicion ::= 
            {
              Object RESULT =null;
		 codIn3D.append("\n_begin_for_"+(contador_for)+"_condicion:"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("beginCondicion",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // evaluaCondicion ::= 
            {
              Object RESULT =null;
		 int temporalAnterior = currentTemp;
                       codIn3D.append("\nif t"+(--temporalAnterior)+" goto _begin_for_"+(contador_for)+"_bloque");
                       codIn3D.append("\ngoto _end_for_"+(contador_for)+"_bloque"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("evaluaCondicion",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // beginAlter ::= 
            {
              Object RESULT =null;
		 codIn3D.append("\n_begin_for_"+(contador_for)+"_alter:"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("beginAlter",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // endAlter ::= 
            {
              Object RESULT =null;
		 codIn3D.append("\ngoto _begin_for_"+(contador_for)+"_condicion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("endAlter",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // breakCiclo ::= BREAK FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("breakCiclo",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // returnFunc ::= RETURN literal FINEXP 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 // Chequear si el tipo de la funcion es igual al tipo del literar
                                        int temporalAnterior = currentTemp;
                                        int treeSize = hashTree.indexOf(hashTree.get(currentHashPos));
                                        String tipoFunc = "";
                                        for (int i = treeSize; i >= 0; i--) {
                                            tipoFunc = existeFuncion(hashTree.get(i));
                                        }
                                        String[] partes = lit.toString().split("::");
                                        String tipo = partes[0];
                                        if (tipoFunc != null && tipoFunc.equals(tipo)) {
                                            codIn3D.append("\nreturn t"+(--temporalAnterior));
                                        }
                                        else{
                                            manejoError("El tipo de la función no es igual al tipo del return", "semántico");
                                        }
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnFunc",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // asignaArreglo ::= asignaElementoArreglo FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaArreglo",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // asignaArreglo ::= creaAsignaArreglo FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaArreglo",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // arregloSinTam ::= tipoVarSubset ID LPARENT_CUAD RPARENT_CUAD 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  // ++++ Análisis semántico ++++
                        if(fatherCurrentHash != null){
                            if(buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), id.toString(), "id") == null && buscarID_o_tipoID(listaTablaSimbolos.get(fatherCurrentHash), id.toString(), "id") == null){ 
                                // ++++ Código 3D ++++
                                codIn3D.append("\ndata_"+tip.toString()+" "+id.toString());
                                RESULT = id.toString()+": "+tip.toString();
                            }
                            else{
                                //Manejo error semántico
                                manejoError("El ID: "+id+" ya ha sido utilizado en otra creación de variable dentro de la función", "semántico");
                                RESULT = "error_semantico";
                            }
                        }
                        else if(fatherCurrentHash == null && buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), id.toString(), "id") == null){
                            // ++++ Código 3D ++++
                            codIn3D.append("\ndata_"+tip.toString()+" "+id.toString());
                            RESULT = id.toString()+": "+tip.toString();
                        }
                        else{
                            //Manejo error semántico
                            manejoError("El ID: "+id+" ya ha sido utilizado en otra creación de variable dentro de la función", "semántico");
                            RESULT = "error_semantico";
                        }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arregloSinTam",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // creaArreglo ::= tipoArreglo FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaArreglo",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // creaAsignaArreglo ::= tipoArreglo EQUIV INIBLOQUE arregloValores FINBLOQUE 
            {
              Object RESULT =null;
		int parteIzArregloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int parteIzArregloright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object parteIzArreglo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		  if(!parteIzArreglo.toString().equals("error_semantico")){
                                    String[] partes_parteIzArr = parteIzArreglo.toString().split("::");
                                    int tamañoArreglo = Integer.parseInt(partes_parteIzArr[3]);
                                     // ++++ Análisis semántico ++++ 
                                    if(tamañoArreglo == elementosArray.size()){
                                        String validacion = verificarTipo_elementosArray(elementosArray, partes_parteIzArr[1]);
                                        if(validacion == null){
                                            // ++++ Código 3D ++++
                                            int j = elementosArray.size()-1;
                                            for(int i = 0; i < elementosArray.size();i++){
                                                String temp = "t"+(currentTemp++);
                                                String[] partes_elemArr = elementosArray.get(i).split(": ");
                                                codIn3D.append("\n"+temp+" = "+partes_elemArr[0].toString());
                                                codIn3D.append("\n"+partes_parteIzArr[0]+"["+j+"]"+" = "+temp);
                                                j--;
                                            }
                                            elementosArray.clear();
                                            //RESULT = "Hola";
                                        }
                                        else if(validacion.equals("error_semantico")){
                                            elementosArray.clear();
                                            RESULT = "error_semantico";
                                        }
                                        else{
                                            // Manejo error semántico
                                            elementosArray.clear();
                                            manejoError("El elemento: "+validacion+" del array tiene un tipo de dato distinto al definido en la declaración del array", "semántico");
                                            RESULT = "error_semantico";
                                        }
                                    }
                                    else {
                                        elementosArray.clear();
                                        // Manejo error semántico
                                        manejoError("El array tiene una cantidad de elementos diferente a la especificada", "semántico");
                                        RESULT = "error_semantico";
                                    }
                                }
                                else{
                                    RESULT = "error_semantico";
                                }
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaAsignaArreglo",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // creaAsignaArreglo ::= arregloSinTam EQUIV INIBLOQUE arregloValores FINBLOQUE 
            {
              Object RESULT =null;
		int parteIzArregloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int parteIzArregloright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object parteIzArreglo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		  if(!parteIzArreglo.toString().equals("error_semantico")){
                                    String[] partes_parteIzArr = parteIzArreglo.toString().split(": ");
                                    int tamañoArreglo = elementosArray.size();
                                    // +++ Tabla de símbolos ++++ 
                                    listaTablaSimbolos.get(currentHash).add(partes_parteIzArr[0].toString()+": "+partes_parteIzArr[1].toString()+": "+String.valueOf(tamañoArreglo));
                                    // ++++ Análisis semántico ++++ 
                                    String validacion = verificarTipo_elementosArray(elementosArray, partes_parteIzArr[1]);
                                    if(validacion == null){
                                        // ++++ Código 3D ++++
                                        int j = elementosArray.size()-1;
                                        for(int i = 0; i < elementosArray.size();i++){
                                            String temp = "t"+(currentTemp++);
                                            String[] partes_elemArr = elementosArray.get(i).split(": ");
                                            codIn3D.append("\n"+temp+" = "+partes_elemArr[0].toString());
                                            codIn3D.append("\n"+partes_parteIzArr[0]+"["+j+"]"+" = "+temp);
                                            j--;
                                        }
                                        elementosArray.clear();
                                        //RESULT = "Hola";
                                    }
                                    else if(validacion.equals("error_semantico")){
                                        elementosArray.clear();
                                        RESULT = "error_semantico";
                                    }
                                    else{
                                        // Manejo error semántico
                                        elementosArray.clear();
                                        manejoError("El elemento: "+validacion+" del array tiene un tipo de dato distinto al definido en la declaración del array", "semántico");
                                        RESULT = "error_semantico";
                                    }
                                }
                                else{
                                    RESULT = "error_semantico";
                                }
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaAsignaArreglo",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // creaAsignaArreglo ::= arregloSinTam FINBLOQUE error 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 manejoError("No se puede declarar un arreglo sin tamaño.", "sintáctico"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaAsignaArreglo",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // tipoArreglo ::= tipoVarSubset expArreglo 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(!exp.equals("error_semantico")){
                        // ++++ Análisis semántico ++++ 
                        String[] partes = exp.toString().split("::"); 
                        if(fatherCurrentHash != null){
                            if(buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), partes[0].toString(), "id") == null && buscarID_o_tipoID(listaTablaSimbolos.get(fatherCurrentHash), partes[0].toString(), "id") == null){ 
                                listaTablaSimbolos.get(currentHash).add(partes[0].toString()+": "+tip.toString()+": "+partes[1].toString());
                                // ++++ Código 3D ++++
                                String temp = "t"+(currentTemp++); 
                                codIn3D.append("\ndata_"+tip.toString()+" "+partes[0].toString());
                                RESULT = partes[0].toString()+"::"+tip.toString()+"::"+temp+"::"+partes[1].toString();
                            }
                            else{
                                // Manejo error semántico
                                manejoError("El ID: "+partes[0].toString()+" ya ha sido utilizado en otra creación de variable dentro de la función "+currentHash, "semántico");
                                RESULT = "error_semantico";
                            }
                        }
                        else if(fatherCurrentHash == null && buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), partes[0].toString(), "id") == null){
                                listaTablaSimbolos.get(currentHash).add(partes[0].toString()+": "+tip.toString()+": "+partes[1].toString());
                                // ++++ Código 3D ++++
                                String temp = "t"+(currentTemp++); 
                                codIn3D.append("\ndata_"+tip.toString()+" "+partes[0].toString());
                                RESULT = partes[0].toString()+"::"+tip.toString()+"::"+temp+"::"+partes[1].toString();
                        }
                        else{
                            // Manejo error semántico
                            manejoError("El ID: "+partes[0].toString()+" ya ha sido utilizado en otra creación de variable dentro de la función "+currentHash, "semántico");
                            RESULT = "error_semantico";
                        }
                    }
                    else{
                        RESULT = "error_semantico";
                    } 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoArreglo",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // arregloValores ::= arregloValor 
            {
              Object RESULT =null;
		int tipoValorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tipoValorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tipoValor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 elementosArray.add(tipoValor.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arregloValores",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // arregloValores ::= arregloValor COMA arregloValores 
            {
              Object RESULT =null;
		int tipoValorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tipoValorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object tipoValor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 elementosArray.add(tipoValor.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arregloValores",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // arregloValor ::= CARACTER 
            {
              Object RESULT =null;
		int carleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int carright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object car = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = car.toString()+": "+"char"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arregloValor",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // arregloValor ::= ENTERO 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ent.toString()+": "+"int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arregloValor",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // arregloValor ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  // ++++ Análisis semántico ++++ 
                        String tipoId = buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), id.toString(), "id"); 
                        if(tipoId != null){
                            RESULT = id.toString()+": "+tipoId; 
                        }
                        else if(tipoId == null && fatherCurrentHash != null){
                            String tipoId2 = buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), id.toString(), "id");
                            if(tipoId2 != null){
                                RESULT = id.toString()+": "+tipoId2; 
                            }
                            else{
                                // Manejo error semántico
                                manejoError("El id: "+id+" no existe o no ha sido creado", "semántico");
                                RESULT = id.toString()+": error_semantico";
                            }
                        }
                        else{
                            // Manejo error semántico
                            manejoError("El id: "+id+" no existe o no ha sido creado", "semántico");
                            RESULT = id.toString()+": error_semantico";
                        }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arregloValor",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // cantidadArreglo ::= ENTERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  String entero = e.toString();
                       int ent = Integer.parseInt(entero);
                       // ++++ Análisis semántico ++++ 
                       if(ent >= 0){
                            RESULT = e.toString()+"::int"; 
                        }
                        else{
                            manejoError("El número entero asignado a la cantidad del arreglo es negativo", "semántico");
                            RESULT = "error_semantico";
                        }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cantidadArreglo",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // cantidadArreglo ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  // ++++ Análisis semántico ++++
                        String tipoId = buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), id.toString(), "id"); 
                        if(tipoId != null){
                            RESULT = id.toString()+"::id"; 
                        }
                        else if(tipoId == null && fatherCurrentHash != null){
                            String tipoId2 = buscarID_o_tipoID(listaTablaSimbolos.get(fatherCurrentHash), id.toString(), "id");
                            if(tipoId2 != null){
                                RESULT = id.toString()+"::id"; 
                            }
                            else{
                                //Manejo de error semántico
                                manejoError("El id: "+id+" asignado a la cantidad del arreglo no existe o no ha sido creado", "semántico");
                                RESULT = "error_semantico";
                            }
                        }
                        else{
                            //Manejo de error semántico
                            manejoError("El id: "+id+" asignado a la cantidad del arreglo no existe o no ha sido creado", "semántico");
                            RESULT = "error_semantico";
                        }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cantidadArreglo",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // asignaElementoArreglo ::= expArreglo EQUIV operacionAritmetica 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(!exp.equals("error_semantico") && !op.equals("error_semantico")){
                                    String[] partes = exp.toString().split("::");
                                    String[] partesOp = op.toString().split("::");
                                    if(fatherCurrentHash != null){
                                        Boolean exists = buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), partes[0].toString(), "id") != null;
                                        Boolean InPadre = buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), partes[0].toString(), "id") == null && buscarID_o_tipoID(listaTablaSimbolos.get(fatherCurrentHash), partes[0].toString(), "id") != null ;
                                        Boolean InCurrent = buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), partes[0].toString(), "id") != null && buscarID_o_tipoID(listaTablaSimbolos.get(fatherCurrentHash), partes[0].toString(), "id") == null ;
                                        if(exists){
                                            if(partes[2].toString().equals("int")){
                                                // ++++ Análisis semántico ++++
                                                String tipoArr = buscarID_o_tipoID(listaTablaSimbolos.get(fatherCurrentHash), partes[0].toString(), "id");
                                                int limiteInferior = 0;
                                                int limiteSuperior = Integer.parseInt(buscarID_o_tipoID(listaTablaSimbolos.get(fatherCurrentHash), partes[0].toString(), "tamañoArray"));
                                                int pos = Integer.parseInt(partes[1].toString());
                                                if(pos >= limiteInferior && pos < limiteSuperior){
                                                    if(tipoArr.equals(partesOp[0].toString())){
                                                        // ++++ Código 3D ++++
                                                        codIn3D.append("\n"+partes[0]+"["+partes[1].toString()+"]"+" = "+partesOp[1]);
                                                        //RESULT = ;  /// +++++++++++++++++++++++++++++++ No sé si se ocupa el RESULT
                                                    }
                                                    else{
                                                        //Manejo de error semántico
                                                        manejoError("El valor asignado no coincide con el tipo de dato del array: "+partes[0].toString(), "semántico");
                                                        RESULT = "error_semantico";
                                                    }
                                                }
                                                else{
                                                    //Manejo de error semántico
                                                    manejoError("La posición : ["+partes[1]+"] está fuera del límite del tamaño del array", "semántico");
                                                    RESULT = "error_semantico";
                                                }
                                            }
                                            else{
                                                String tipoArr = buscarID_o_tipoID(listaTablaSimbolos.get(fatherCurrentHash), partes[0].toString(), "id");
                                                if(tipoArr.equals(partesOp[0].toString())){
                                                        // ++++ Código 3D ++++
                                                        codIn3D.append("\n"+partes[0]+"["+partes[1].toString()+"]"+" = "+partesOp[1]);
                                                        //RESULT = ;  /// +++++++++++++++++++++++++++++++ No sé si se ocupa el RESULT
                                                }
                                                else{
                                                    //Manejo de error semántico
                                                    manejoError("El valor asignado no coincide con el tipo de dato del array: "+partes[0].toString(), "semántico");
                                                    RESULT = "error_semantico";
                                                }
                                            }
                                        }
                                        else{
                                            //Manejo de error semántico
                                            manejoError("El Array: "+partes[0].toString()+" no existe o no ha sido creado", "semántico");
                                            RESULT = "error_semantico";
                                        }
                                    }
                                    else if(fatherCurrentHash == null && buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), partes[0].toString(), "id") != null){
                                        if(partes[2].toString().equals("int")){
                                            // ++++ Análisis semántico ++++
                                            String tipoArr = buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), partes[0].toString(), "id");
                                            int limiteInferior = 0;
                                            int limiteSuperior = Integer.parseInt(buscarID_o_tipoID(listaTablaSimbolos.get(currentHash), partes[0].toString(), "tamañoArray"));
                                            int pos = Integer.parseInt(partes[1].toString());
                                            if(pos >= limiteInferior && pos < limiteSuperior){
                                                if(tipoArr.equals(partesOp[0].toString())){
                                                    // ++++ Código 3D ++++
                                                    codIn3D.append("\n"+partes[0]+"["+partes[1].toString()+"]"+" = "+partesOp[1]);
                                                    //RESULT = ;  /// +++++++++++++++++++++++++++++++ No sé si se ocupa el RESULT
                                                }
                                                else{
                                                    //Manejo de error semántico
                                                    manejoError("El valor asignado no coincide con el tipo de dato del array: "+partes[0].toString(), "semántico");
                                                    RESULT = "error_semantico";
                                                }
                                            }
                                            else{
                                                //Manejo de error semántico
                                                manejoError("La posición : ["+partes[1]+"] está fuera del límite del tamaño del array", "semántico");
                                                RESULT = "error_semantico";
                                            }
                                        }
                                        else{
                                            String tipoArr = buscarID_o_tipoID(listaTablaSimbolos.get(fatherCurrentHash), partes[0].toString(), "id");
                                            if(tipoArr.equals(partesOp[0].toString())){
                                                    // ++++ Código 3D ++++
                                                    codIn3D.append("\n"+partes[0]+"["+partes[1].toString()+"]"+" = "+partesOp[1]);
                                                    //RESULT = ;  /// +++++++++++++++++++++++++++++++ No sé si se ocupa el RESULT
                                            }
                                            else{
                                                //Manejo de error semántico
                                                manejoError("El valor asignado no coincide con el tipo de dato del array: "+partes[0].toString(), "semántico");
                                                RESULT = "error_semantico";
                                            }
                                        }
                                    }
                                    else{
                                        //Manejo de error semántico
                                        manejoError("El array: "+partes[0].toString()+" no existe o no ha sido creado", "semántico");
                                        RESULT = "error_semantico";
                                    }
                                }
                                else{
                                    RESULT = "error_semantico";
                                 }
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaElementoArreglo",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // expArreglo ::= ID LPARENT_CUAD cantidadArreglo RPARENT_CUAD 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cantleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cantright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cant = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  if(!cant.equals("error_semantico")){
                            RESULT = id.toString()+"::"+cant.toString();
                        }
                        else{
                            RESULT = "error_semantico";
                        }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArreglo",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
