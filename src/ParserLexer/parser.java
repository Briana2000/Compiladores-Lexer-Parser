
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ParserLexer;

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\226\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\006\010\000\002\006\003\000\002\004\003" +
    "\000\002\004\004\000\002\005\011\000\002\005\010\000" +
    "\002\005\011\000\002\005\010\000\002\005\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\010" +
    "\004\000\002\011\003\000\002\011\003\000\002\013\003" +
    "\000\002\013\005\000\002\014\004\000\002\014\004\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\012\003\000\002\015\003\000\002\015\004\000\002\016" +
    "\004\000\002\016\003\000\002\016\003\000\002\016\004" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\022\004\000\002\022\005\000\002\022\005\000\002\017" +
    "\004\000\002\017\004\000\002\020\004\000\002\020\006" +
    "\000\002\020\006\000\002\021\005\000\002\021\005\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\037\003\000\002\040" +
    "\003\000\002\040\004\000\002\040\004\000\002\040\005" +
    "\000\002\040\005\000\002\040\004\000\002\041\003\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\042\003\000\002\042" +
    "\003\000\002\042\003\000\002\042\003\000\002\042\003" +
    "\000\002\047\005\000\002\050\003\000\002\050\003\000" +
    "\002\050\003\000\002\050\003\000\002\050\003\000\002" +
    "\050\003\000\002\043\003\000\002\043\003\000\002\043" +
    "\003\000\002\043\005\000\002\043\005\000\002\043\004" +
    "\000\002\045\003\000\002\045\003\000\002\044\003\000" +
    "\002\044\003\000\002\046\003\000\002\046\003\000\002" +
    "\023\006\000\002\023\005\000\002\024\003\000\002\024" +
    "\005\000\002\025\003\000\002\030\003\000\002\030\003" +
    "\000\002\031\006\000\002\032\006\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\034\007\000\002" +
    "\034\007\000\002\035\007\000\002\035\007\000\002\036" +
    "\007\000\002\036\007\000\002\051\003\000\002\051\003" +
    "\000\002\053\005\000\002\053\004\000\002\053\004\000" +
    "\002\053\003\000\002\054\011\000\002\055\003\000\002" +
    "\055\004\000\002\056\011\000\002\057\006\000\002\052" +
    "\003\000\002\052\003\000\002\060\013\000\002\061\015" +
    "\000\002\061\015\000\002\062\003\000\002\063\003\000" +
    "\002\063\004\000\002\064\003\000\002\064\003\000\002" +
    "\065\004\000\002\026\005\000\002\072\004\000\002\072" +
    "\004\000\002\066\006\000\002\077\004\000\002\076\007" +
    "\000\002\076\007\000\002\076\005\000\002\075\004\000" +
    "\002\073\003\000\002\073\005\000\002\074\003\000\002" +
    "\074\003\000\002\074\003\000\002\071\003\000\002\071" +
    "\003\000\002\100\003\000\002\100\003\000\002\067\005" +
    "\000\002\070\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011e\000\012\003\007\004\013\007\011\010\012\001" +
    "\002\000\004\002\u0120\001\002\000\014\002\000\003\u0106" +
    "\004\013\007\011\010\012\001\002\000\006\014\u0105\070" +
    "\u0103\001\002\000\014\002\ufffd\003\ufffd\004\ufffd\007\ufffd" +
    "\010\ufffd\001\002\000\004\054\014\001\002\000\006\014" +
    "\ufff4\070\ufff4\001\002\000\006\014\ufff3\070\ufff3\001\002" +
    "\000\006\014\ufff5\070\ufff5\001\002\000\004\055\015\001" +
    "\002\000\004\060\016\001\002\000\042\003\050\004\026" +
    "\005\022\006\066\007\063\010\043\013\046\015\036\020" +
    "\072\022\031\026\024\027\025\030\071\037\056\040\060" +
    "\070\041\001\002\000\046\003\uffdf\004\uffdf\005\uffdf\006" +
    "\uffdf\007\uffdf\010\uffdf\013\uffdf\015\uffdf\020\uffdf\022\uffdf" +
    "\023\uffdf\026\uffdf\027\uffdf\030\uffdf\037\uffdf\040\uffdf\061" +
    "\uffdf\070\uffdf\001\002\000\046\003\uff9c\004\uff9c\005\uff9c" +
    "\006\uff9c\007\uff9c\010\uff9c\013\uff9c\015\uff9c\020\uff9c\022" +
    "\uff9c\023\uff9c\026\uff9c\027\uff9c\030\uff9c\037\uff9c\040\uff9c" +
    "\061\uff9c\070\uff9c\001\002\000\004\063\u0102\001\002\000" +
    "\004\070\uff6e\001\002\000\046\003\uff94\004\uff94\005\uff94" +
    "\006\uff94\007\uff94\010\uff94\013\uff94\015\uff94\020\uff94\022" +
    "\uff94\023\uff94\026\uff94\027\uff94\030\uff94\037\uff94\040\uff94" +
    "\061\uff94\070\uff94\001\002\000\004\054\373\001\002\000" +
    "\004\054\364\001\002\000\004\070\uff6f\001\002\000\046" +
    "\003\uff9e\004\uff9e\005\uff9e\006\uff9e\007\uff9e\010\uff9e\013" +
    "\uff9e\015\uff9e\020\uff9e\022\uff9e\023\uff9e\026\uff9e\027\uff9e" +
    "\030\uff9e\037\uff9e\040\uff9e\061\uff9e\070\uff9e\001\002\000" +
    "\004\063\363\001\002\000\004\054\340\001\002\000\004" +
    "\061\337\001\002\000\046\003\uff8a\004\uff8a\005\uff8a\006" +
    "\uff8a\007\uff8a\010\uff8a\013\uff8a\015\uff8a\020\uff8a\022\uff8a" +
    "\023\uff8a\026\uff8a\027\uff8a\030\uff8a\037\uff8a\040\uff8a\061" +
    "\uff8a\070\uff8a\001\002\000\052\003\uff90\004\uff90\005\uff90" +
    "\006\uff90\007\uff90\010\uff90\013\uff90\015\uff90\016\320\017" +
    "\317\020\uff90\022\uff90\023\uff90\026\uff90\027\uff90\030\uff90" +
    "\037\uff90\040\uff90\061\uff90\070\uff90\001\002\000\004\070" +
    "\313\001\002\000\004\054\305\001\002\000\046\003\uffde" +
    "\004\uffde\005\uffde\006\uffde\007\uffde\010\uffde\013\uffde\015" +
    "\uffde\020\uffde\022\uffde\023\uffde\026\uffde\027\uffde\030\uffde" +
    "\037\uffde\040\uffde\061\uffde\070\uffde\001\002\000\006\053" +
    "\301\063\302\001\002\000\012\053\261\054\167\056\166" +
    "\063\262\001\002\000\004\061\uffe8\001\002\000\004\070" +
    "\uffe9\001\002\000\046\003\uffe0\004\uffe0\005\uffe0\006\uffe0" +
    "\007\uffe0\010\uffe0\013\uffe0\015\uffe0\020\uffe0\022\uffe0\023" +
    "\uffe0\026\uffe0\027\uffe0\030\uffe0\037\uffe0\040\uffe0\061\uffe0" +
    "\070\uffe0\001\002\000\006\053\253\061\254\001\002\000" +
    "\040\003\175\010\174\011\113\012\121\032\122\037\106" +
    "\040\112\043\110\044\117\054\116\064\126\065\107\066" +
    "\170\067\173\070\114\001\002\000\046\003\uffe1\004\uffe1" +
    "\005\uffe1\006\uffe1\007\uffe1\010\uffe1\013\uffe1\015\uffe1\020" +
    "\uffe1\022\uffe1\023\uffe1\026\uffe1\027\uffe1\030\uffe1\037\uffe1" +
    "\040\uffe1\061\uffe1\070\uffe1\001\002\000\046\003\uffdc\004" +
    "\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\013\uffdc\015\uffdc" +
    "\020\uffdc\022\uffdc\023\uffdc\026\uffdc\027\uffdc\030\uffdc\037" +
    "\uffdc\040\uffdc\061\uffdc\070\uffdc\001\002\000\046\003\uffdd" +
    "\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd\013\uffdd\015" +
    "\uffdd\020\uffdd\022\uffdd\023\uffdd\026\uffdd\027\uffdd\030\uffdd" +
    "\037\uffdd\040\uffdd\061\uffdd\070\uffdd\001\002\000\004\070" +
    "\250\001\002\000\046\003\uff89\004\uff89\005\uff89\006\uff89" +
    "\007\uff89\010\uff89\013\uff89\015\uff89\020\uff89\022\uff89\023" +
    "\uff89\026\uff89\027\uff89\030\uff89\037\uff89\040\uff89\061\uff89" +
    "\070\uff89\001\002\000\046\003\uff95\004\uff95\005\uff95\006" +
    "\uff95\007\uff95\010\uff95\013\uff95\015\uff95\020\uff95\022\uff95" +
    "\023\uff95\026\uff95\027\uff95\030\uff95\037\uff95\040\uff95\061" +
    "\uff95\070\uff95\001\002\000\004\063\247\001\002\000\004" +
    "\070\245\001\002\000\004\063\244\001\002\000\004\070" +
    "\242\001\002\000\046\003\uff9d\004\uff9d\005\uff9d\006\uff9d" +
    "\007\uff9d\010\uff9d\013\uff9d\015\uff9d\020\uff9d\022\uff9d\023" +
    "\uff9d\026\uff9d\027\uff9d\030\uff9d\037\uff9d\040\uff9d\061\uff9d" +
    "\070\uff9d\001\002\000\006\053\227\063\230\001\002\000" +
    "\004\070\uffeb\001\002\000\004\053\225\001\002\000\044" +
    "\003\050\004\026\005\022\006\066\007\063\010\043\013" +
    "\046\015\036\020\072\022\031\026\024\027\025\030\071" +
    "\037\056\040\060\061\uffe7\070\041\001\002\000\004\070" +
    "\uffea\001\002\000\046\003\uffe4\004\uffe4\005\uffe4\006\uffe4" +
    "\007\uffe4\010\uffe4\013\uffe4\015\uffe4\020\uffe4\022\uffe4\023" +
    "\uffe4\026\uffe4\027\uffe4\030\uffe4\037\uffe4\040\uffe4\061\uffe4" +
    "\070\uffe4\001\002\000\046\003\uffe3\004\uffe3\005\uffe3\006" +
    "\uffe3\007\uffe3\010\uffe3\013\uffe3\015\uffe3\020\uffe3\022\uffe3" +
    "\023\uffe3\026\uffe3\027\uffe3\030\uffe3\037\uffe3\040\uffe3\061" +
    "\uffe3\070\uffe3\001\002\000\004\054\215\001\002\000\004" +
    "\060\073\001\002\000\044\003\050\004\026\005\022\006" +
    "\066\007\063\010\043\013\046\015\036\020\072\022\031" +
    "\023\077\026\024\027\025\030\071\037\056\040\060\070" +
    "\041\001\002\000\046\003\uff81\004\uff81\005\uff81\006\uff81" +
    "\007\uff81\010\uff81\013\uff81\015\uff81\020\uff81\022\uff81\023" +
    "\uff81\026\uff81\027\uff81\030\uff81\037\uff81\040\uff81\061\uff81" +
    "\070\uff81\001\002\000\046\003\050\004\026\005\022\006" +
    "\066\007\063\010\043\013\046\015\036\020\072\022\031" +
    "\023\077\026\024\027\025\030\071\037\056\040\060\061" +
    "\uff84\070\041\001\002\000\004\061\uff85\001\002\000\004" +
    "\063\213\001\002\000\004\061\102\001\002\000\046\003" +
    "\uff82\004\uff82\005\uff82\006\uff82\007\uff82\010\uff82\013\uff82" +
    "\015\uff82\020\uff82\022\uff82\023\uff82\026\uff82\027\uff82\030" +
    "\uff82\037\uff82\040\uff82\061\uff82\070\uff82\001\002\000\004" +
    "\021\103\001\002\000\004\054\104\001\002\000\030\011" +
    "\113\012\121\032\122\037\106\040\112\043\110\044\117" +
    "\054\116\064\126\065\107\070\114\001\002\000\014\041" +
    "\uffb2\042\uffb2\055\uffb2\062\uffb2\063\uffb2\001\002\000\010" +
    "\064\126\065\107\070\114\001\002\000\044\031\uffbe\032" +
    "\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\041\uffbe\042\uffbe" +
    "\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\055" +
    "\uffbe\062\uffbe\063\uffbe\001\002\000\030\011\uffa9\012\uffa9" +
    "\032\uffa9\037\uffa9\040\uffa9\043\uffa9\044\uffa9\054\uffa9\064" +
    "\uffa9\065\uffa9\070\uffa9\001\002\000\044\031\143\032\145" +
    "\033\147\034\146\035\144\036\142\041\uffb1\042\uffb1\045" +
    "\156\046\157\047\161\050\163\051\162\052\160\055\uffb1" +
    "\062\uffb1\063\uffb1\001\002\000\010\064\126\065\107\070" +
    "\114\001\002\000\014\041\uffad\042\uffad\055\uffad\062\uffad" +
    "\063\uffad\001\002\000\050\031\uffbd\032\uffbd\033\uffbd\034" +
    "\uffbd\035\uffbd\036\uffbd\041\uffbd\042\uffbd\045\uffbd\046\uffbd" +
    "\047\uffbd\050\uffbd\051\uffbd\052\uffbd\054\167\055\uffbd\056" +
    "\166\062\uffbd\063\uffbd\001\002\000\044\031\uffbb\032\uffbb" +
    "\033\uffbb\034\uffbb\035\uffbb\036\uffbb\041\uffbb\042\uffbb\045" +
    "\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\055\uffbb" +
    "\062\uffbb\063\uffbb\001\002\000\030\011\113\012\121\032" +
    "\122\037\106\040\112\043\110\044\117\054\116\064\126" +
    "\065\107\070\114\001\002\000\030\011\uffa8\012\uffa8\032" +
    "\uffa8\037\uffa8\040\uffa8\043\uffa8\044\uffa8\054\uffa8\064\uffa8" +
    "\065\uffa8\070\uffa8\001\002\000\030\011\113\012\121\032" +
    "\122\037\106\040\112\043\110\044\117\054\116\064\126" +
    "\065\107\070\114\001\002\000\014\041\uffac\042\uffac\055" +
    "\uffac\062\uffac\063\uffac\001\002\000\020\032\122\037\106" +
    "\040\112\054\137\064\126\065\107\070\114\001\002\000" +
    "\044\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb" +
    "\041\uffcb\042\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051" +
    "\uffcb\052\uffcb\055\uffcb\062\uffcb\063\uffcb\001\002\000\014" +
    "\041\uffb3\042\uffb3\055\uffb3\062\uffb3\063\uffb3\001\002\000" +
    "\044\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc" +
    "\041\uffbc\042\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051" +
    "\uffbc\052\uffbc\055\uffbc\062\uffbc\063\uffbc\001\002\000\044" +
    "\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\041" +
    "\uffbf\042\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf" +
    "\052\uffbf\055\uffbf\062\uffbf\063\uffbf\001\002\000\010\041" +
    "\131\042\133\055\132\001\002\000\030\011\113\012\121" +
    "\032\122\037\106\040\112\043\110\044\117\054\116\064" +
    "\126\065\107\070\114\001\002\000\030\011\uffab\012\uffab" +
    "\032\uffab\037\uffab\040\uffab\043\uffab\044\uffab\054\uffab\064" +
    "\uffab\065\uffab\070\uffab\001\002\000\004\063\134\001\002" +
    "\000\030\011\uffaa\012\uffaa\032\uffaa\037\uffaa\040\uffaa\043" +
    "\uffaa\044\uffaa\054\uffaa\064\uffaa\065\uffaa\070\uffaa\001\002" +
    "\000\046\003\uff88\004\uff88\005\uff88\006\uff88\007\uff88\010" +
    "\uff88\013\uff88\015\uff88\020\uff88\022\uff88\023\uff88\026\uff88" +
    "\027\uff88\030\uff88\037\uff88\040\uff88\061\uff88\070\uff88\001" +
    "\002\000\014\041\131\042\133\055\uffb0\062\uffb0\063\uffb0" +
    "\001\002\000\044\031\uffc6\032\uffc6\033\147\034\146\035" +
    "\144\036\142\041\uffc6\042\uffc6\045\uffc6\046\uffc6\047\uffc6" +
    "\050\uffc6\051\uffc6\052\uffc6\055\uffc6\062\uffc6\063\uffc6\001" +
    "\002\000\020\032\122\037\106\040\112\054\137\064\126" +
    "\065\107\070\114\001\002\000\020\031\143\032\145\033" +
    "\147\034\146\035\144\036\142\055\141\001\002\000\044" +
    "\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\041" +
    "\uffc7\042\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7" +
    "\052\uffc7\055\uffc7\062\uffc7\063\uffc7\001\002\000\020\032" +
    "\uffc0\037\uffc0\040\uffc0\054\uffc0\064\uffc0\065\uffc0\070\uffc0" +
    "\001\002\000\020\032\uffc5\037\uffc5\040\uffc5\054\uffc5\064" +
    "\uffc5\065\uffc5\070\uffc5\001\002\000\020\032\uffc1\037\uffc1" +
    "\040\uffc1\054\uffc1\064\uffc1\065\uffc1\070\uffc1\001\002\000" +
    "\020\032\uffc4\037\uffc4\040\uffc4\054\uffc4\064\uffc4\065\uffc4" +
    "\070\uffc4\001\002\000\020\032\uffc2\037\uffc2\040\uffc2\054" +
    "\uffc2\064\uffc2\065\uffc2\070\uffc2\001\002\000\020\032\uffc3" +
    "\037\uffc3\040\uffc3\054\uffc3\064\uffc3\065\uffc3\070\uffc3\001" +
    "\002\000\020\032\122\037\106\040\112\054\137\064\126" +
    "\065\107\070\114\001\002\000\044\031\143\032\145\033" +
    "\147\034\146\035\144\036\142\041\uffc8\042\uffc8\045\uffc8" +
    "\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\055\uffc8\062" +
    "\uffc8\063\uffc8\001\002\000\014\041\131\042\133\055\uffae" +
    "\062\uffae\063\uffae\001\002\000\040\031\143\032\145\033" +
    "\147\034\146\035\144\036\142\041\uffb1\042\uffb1\045\156" +
    "\046\157\047\161\050\163\051\162\052\160\055\141\001" +
    "\002\000\010\041\131\042\133\055\155\001\002\000\014" +
    "\041\uffaf\042\uffaf\055\uffaf\062\uffaf\063\uffaf\001\002\000" +
    "\020\032\uffb9\037\uffb9\040\uffb9\054\uffb9\064\uffb9\065\uffb9" +
    "\070\uffb9\001\002\000\020\032\uffb8\037\uffb8\040\uffb8\054" +
    "\uffb8\064\uffb8\065\uffb8\070\uffb8\001\002\000\020\032\uffb4" +
    "\037\uffb4\040\uffb4\054\uffb4\064\uffb4\065\uffb4\070\uffb4\001" +
    "\002\000\020\032\uffb7\037\uffb7\040\uffb7\054\uffb7\064\uffb7" +
    "\065\uffb7\070\uffb7\001\002\000\020\032\uffb5\037\uffb5\040" +
    "\uffb5\054\uffb5\064\uffb5\065\uffb5\070\uffb5\001\002\000\020" +
    "\032\uffb6\037\uffb6\040\uffb6\054\uffb6\064\uffb6\065\uffb6\070" +
    "\uffb6\001\002\000\020\032\122\037\106\040\112\054\137" +
    "\064\126\065\107\070\114\001\002\000\030\031\143\032" +
    "\145\033\147\034\146\035\144\036\142\041\uffba\042\uffba" +
    "\055\uffba\062\uffba\063\uffba\001\002\000\006\064\207\070" +
    "\205\001\002\000\042\003\175\010\174\011\113\012\121" +
    "\032\122\037\106\040\112\043\110\044\117\054\116\055" +
    "\171\064\126\065\107\066\170\067\173\070\114\001\002" +
    "\000\010\055\uffd0\062\uffd0\063\uffd0\001\002\000\044\031" +
    "\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\041\uffa6" +
    "\042\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\052" +
    "\uffa6\055\uffa6\062\uffa6\063\uffa6\001\002\000\004\055\204" +
    "\001\002\000\010\055\uffcf\062\uffcf\063\uffcf\001\002\000" +
    "\010\055\uffce\062\uffce\063\uffce\001\002\000\010\055\uffcd" +
    "\062\uffcd\063\uffcd\001\002\000\006\055\uffa3\062\uffa3\001" +
    "\002\000\006\055\uffa5\062\202\001\002\000\010\055\uffd1" +
    "\062\uffd1\063\uffd1\001\002\000\014\041\131\042\133\055" +
    "\uffcc\062\uffcc\063\uffcc\001\002\000\040\003\175\010\174" +
    "\011\113\012\121\032\122\037\106\040\112\043\110\044" +
    "\117\054\116\064\126\065\107\066\170\067\173\070\114" +
    "\001\002\000\004\055\uffa4\001\002\000\044\031\uffa7\032" +
    "\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7\041\uffa7\042\uffa7" +
    "\045\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\052\uffa7\055" +
    "\uffa7\062\uffa7\063\uffa7\001\002\000\004\057\uff70\001\002" +
    "\000\004\057\210\001\002\000\004\057\uff71\001\002\000" +
    "\046\031\uff6c\032\uff6c\033\uff6c\034\uff6c\035\uff6c\036\uff6c" +
    "\041\uff6c\042\uff6c\045\uff6c\046\uff6c\047\uff6c\050\uff6c\051" +
    "\uff6c\052\uff6c\053\uff6c\055\uff6c\062\uff6c\063\uff6c\001\002" +
    "\000\044\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036" +
    "\uffc9\041\uffc9\042\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9" +
    "\051\uffc9\052\uffc9\055\uffc9\062\uffc9\063\uffc9\001\002\000" +
    "\044\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca" +
    "\041\uffca\042\uffca\045\uffca\046\uffca\047\uffca\050\uffca\051" +
    "\uffca\052\uffca\055\uffca\062\uffca\063\uffca\001\002\000\046" +
    "\003\uff80\004\uff80\005\uff80\006\uff80\007\uff80\010\uff80\013" +
    "\uff80\015\uff80\020\uff80\022\uff80\023\uff80\026\uff80\027\uff80" +
    "\030\uff80\037\uff80\040\uff80\061\uff80\070\uff80\001\002\000" +
    "\004\061\uff83\001\002\000\006\066\217\070\216\001\002" +
    "\000\004\055\222\001\002\000\004\055\220\001\002\000" +
    "\004\063\221\001\002\000\046\003\uff96\004\uff96\005\uff96" +
    "\006\uff96\007\uff96\010\uff96\013\uff96\015\uff96\020\uff96\022" +
    "\uff96\023\uff96\026\uff96\027\uff96\030\uff96\037\uff96\040\uff96" +
    "\061\uff96\070\uff96\001\002\000\004\063\223\001\002\000" +
    "\046\003\uff97\004\uff97\005\uff97\006\uff97\007\uff97\010\uff97" +
    "\013\uff97\015\uff97\020\uff97\022\uff97\023\uff97\026\uff97\027" +
    "\uff97\030\uff97\037\uff97\040\uff97\061\uff97\070\uff97\001\002" +
    "\000\004\061\uffe6\001\002\000\030\011\113\012\121\032" +
    "\122\037\106\040\112\043\110\044\117\054\116\064\126" +
    "\065\107\070\114\001\002\000\004\063\uff6d\001\002\000" +
    "\004\060\231\001\002\000\046\003\uff7b\004\uff7b\005\uff7b" +
    "\006\uff7b\007\uff7b\010\uff7b\013\uff7b\015\uff7b\020\uff7b\022" +
    "\uff7b\023\uff7b\026\uff7b\027\uff7b\030\uff7b\037\uff7b\040\uff7b" +
    "\061\uff7b\070\uff7b\001\002\000\010\064\236\067\235\070" +
    "\232\001\002\000\006\061\uff72\062\uff72\001\002\000\006" +
    "\061\uff76\062\240\001\002\000\004\061\237\001\002\000" +
    "\006\061\uff74\062\uff74\001\002\000\006\061\uff73\062\uff73" +
    "\001\002\000\004\063\uff7a\001\002\000\010\064\236\067" +
    "\235\070\232\001\002\000\004\061\uff75\001\002\000\004" +
    "\063\243\001\002\000\046\003\uffd9\004\uffd9\005\uffd9\006" +
    "\uffd9\007\uffd9\010\uffd9\013\uffd9\015\uffd9\020\uffd9\022\uffd9" +
    "\023\uffd9\026\uffd9\027\uffd9\030\uffd9\037\uffd9\040\uffd9\061" +
    "\uffd9\070\uffd9\001\002\000\046\003\uff7e\004\uff7e\005\uff7e" +
    "\006\uff7e\007\uff7e\010\uff7e\013\uff7e\015\uff7e\020\uff7e\022" +
    "\uff7e\023\uff7e\026\uff7e\027\uff7e\030\uff7e\037\uff7e\040\uff7e" +
    "\061\uff7e\070\uff7e\001\002\000\004\063\246\001\002\000" +
    "\046\003\uffda\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda" +
    "\013\uffda\015\uffda\020\uffda\022\uffda\023\uffda\026\uffda\027" +
    "\uffda\030\uffda\037\uffda\040\uffda\061\uffda\070\uffda\001\002" +
    "\000\046\003\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010" +
    "\uffe2\013\uffe2\015\uffe2\020\uffe2\022\uffe2\023\uffe2\026\uffe2" +
    "\027\uffe2\030\uffe2\037\uffe2\040\uffe2\061\uffe2\070\uffe2\001" +
    "\002\000\006\053\uffd8\063\uffd8\001\002\000\004\063\252" +
    "\001\002\000\046\003\uff7f\004\uff7f\005\uff7f\006\uff7f\007" +
    "\uff7f\010\uff7f\013\uff7f\015\uff7f\020\uff7f\022\uff7f\023\uff7f" +
    "\026\uff7f\027\uff7f\030\uff7f\037\uff7f\040\uff7f\061\uff7f\070" +
    "\uff7f\001\002\000\004\060\256\001\002\000\004\003\255" +
    "\001\002\000\004\063\uff78\001\002\000\010\064\236\067" +
    "\235\070\232\001\002\000\004\061\260\001\002\000\004" +
    "\063\uff79\001\002\000\044\003\175\010\174\011\113\012" +
    "\121\024\266\025\263\032\122\037\106\040\112\043\110" +
    "\044\117\054\116\064\126\065\107\066\170\067\173\070" +
    "\114\001\002\000\046\003\uffdb\004\uffdb\005\uffdb\006\uffdb" +
    "\007\uffdb\010\uffdb\013\uffdb\015\uffdb\020\uffdb\022\uffdb\023" +
    "\uffdb\026\uffdb\027\uffdb\030\uffdb\037\uffdb\040\uffdb\061\uffdb" +
    "\070\uffdb\001\002\000\004\054\276\001\002\000\004\063" +
    "\275\001\002\000\004\063\uffa1\001\002\000\004\054\272" +
    "\001\002\000\004\063\271\001\002\000\004\063\uffa2\001" +
    "\002\000\050\003\uffd5\004\uffd5\005\uffd5\006\uffd5\007\uffd5" +
    "\010\uffd5\013\uffd5\015\uffd5\020\uffd5\022\uffd5\023\uffd5\026" +
    "\uffd5\027\uffd5\030\uffd5\037\uffd5\040\uffd5\055\uffd5\061\uffd5" +
    "\070\uffd5\001\002\000\004\055\273\001\002\000\004\063" +
    "\274\001\002\000\004\063\uffa0\001\002\000\050\003\uffd4" +
    "\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\013\uffd4\015" +
    "\uffd4\020\uffd4\022\uffd4\023\uffd4\026\uffd4\027\uffd4\030\uffd4" +
    "\037\uffd4\040\uffd4\055\uffd4\061\uffd4\070\uffd4\001\002\000" +
    "\004\055\277\001\002\000\004\063\300\001\002\000\004" +
    "\063\uff9f\001\002\000\044\003\175\010\174\011\113\012" +
    "\121\024\266\025\263\032\122\037\106\040\112\043\110" +
    "\044\117\054\116\064\126\065\107\066\170\067\173\070" +
    "\114\001\002\000\046\003\uffe5\004\uffe5\005\uffe5\006\uffe5" +
    "\007\uffe5\010\uffe5\013\uffe5\015\uffe5\020\uffe5\022\uffe5\023" +
    "\uffe5\026\uffe5\027\uffe5\030\uffe5\037\uffe5\040\uffe5\061\uffe5" +
    "\070\uffe5\001\002\000\004\063\uffd2\001\002\000\004\063" +
    "\uffd3\001\002\000\030\011\113\012\121\032\122\037\106" +
    "\040\112\043\110\044\117\054\116\064\126\065\107\070" +
    "\114\001\002\000\010\041\131\042\133\055\307\001\002" +
    "\000\004\060\310\001\002\000\042\003\050\004\026\005" +
    "\022\006\066\007\063\010\043\013\046\015\036\020\072" +
    "\022\031\026\024\027\025\030\071\037\056\040\060\070" +
    "\041\001\002\000\004\061\312\001\002\000\052\003\uff8f" +
    "\004\uff8f\005\uff8f\006\uff8f\007\uff8f\010\uff8f\013\uff8f\015" +
    "\uff8f\016\uff8f\017\uff8f\020\uff8f\022\uff8f\023\uff8f\026\uff8f" +
    "\027\uff8f\030\uff8f\037\uff8f\040\uff8f\061\uff8f\070\uff8f\001" +
    "\002\000\010\053\uffd7\056\315\063\uffd7\001\002\000\006" +
    "\053\uff77\063\uff77\001\002\000\010\057\316\064\207\070" +
    "\205\001\002\000\006\053\uff7c\061\uff7c\001\002\000\004" +
    "\060\334\001\002\000\004\054\326\001\002\000\046\003" +
    "\uff91\004\uff91\005\uff91\006\uff91\007\uff91\010\uff91\013\uff91" +
    "\015\uff91\020\uff91\022\uff91\023\uff91\026\uff91\027\uff91\030" +
    "\uff91\037\uff91\040\uff91\061\uff91\070\uff91\001\002\000\052" +
    "\003\uff8e\004\uff8e\005\uff8e\006\uff8e\007\uff8e\010\uff8e\013" +
    "\uff8e\015\uff8e\016\320\017\uff8e\020\uff8e\022\uff8e\023\uff8e" +
    "\026\uff8e\027\uff8e\030\uff8e\037\uff8e\040\uff8e\061\uff8e\070" +
    "\uff8e\001\002\000\050\003\uff92\004\uff92\005\uff92\006\uff92" +
    "\007\uff92\010\uff92\013\uff92\015\uff92\017\317\020\uff92\022" +
    "\uff92\023\uff92\026\uff92\027\uff92\030\uff92\037\uff92\040\uff92" +
    "\061\uff92\070\uff92\001\002\000\046\003\uff93\004\uff93\005" +
    "\uff93\006\uff93\007\uff93\010\uff93\013\uff93\015\uff93\020\uff93" +
    "\022\uff93\023\uff93\026\uff93\027\uff93\030\uff93\037\uff93\040" +
    "\uff93\061\uff93\070\uff93\001\002\000\050\003\uff8d\004\uff8d" +
    "\005\uff8d\006\uff8d\007\uff8d\010\uff8d\013\uff8d\015\uff8d\017" +
    "\uff8d\020\uff8d\022\uff8d\023\uff8d\026\uff8d\027\uff8d\030\uff8d" +
    "\037\uff8d\040\uff8d\061\uff8d\070\uff8d\001\002\000\030\011" +
    "\113\012\121\032\122\037\106\040\112\043\110\044\117" +
    "\054\116\064\126\065\107\070\114\001\002\000\010\041" +
    "\131\042\133\055\330\001\002\000\004\060\331\001\002" +
    "\000\042\003\050\004\026\005\022\006\066\007\063\010" +
    "\043\013\046\015\036\020\072\022\031\026\024\027\025" +
    "\030\071\037\056\040\060\070\041\001\002\000\004\061" +
    "\333\001\002\000\052\003\uff8c\004\uff8c\005\uff8c\006\uff8c" +
    "\007\uff8c\010\uff8c\013\uff8c\015\uff8c\016\uff8c\017\uff8c\020" +
    "\uff8c\022\uff8c\023\uff8c\026\uff8c\027\uff8c\030\uff8c\037\uff8c" +
    "\040\uff8c\061\uff8c\070\uff8c\001\002\000\042\003\050\004" +
    "\026\005\022\006\066\007\063\010\043\013\046\015\036" +
    "\020\072\022\031\026\024\027\025\030\071\037\056\040" +
    "\060\070\041\001\002\000\004\061\336\001\002\000\046" +
    "\003\uff8b\004\uff8b\005\uff8b\006\uff8b\007\uff8b\010\uff8b\013" +
    "\uff8b\015\uff8b\020\uff8b\022\uff8b\023\uff8b\026\uff8b\027\uff8b" +
    "\030\uff8b\037\uff8b\040\uff8b\061\uff8b\070\uff8b\001\002\000" +
    "\014\002\ufffe\003\ufffe\004\ufffe\007\ufffe\010\ufffe\001\002" +
    "\000\014\004\026\005\022\006\066\007\063\010\043\001" +
    "\002\000\004\063\345\001\002\000\004\053\301\001\002" +
    "\000\004\070\344\001\002\000\004\053\uffd7\001\002\000" +
    "\030\011\113\012\121\032\122\037\106\040\112\043\110" +
    "\044\117\054\116\064\126\065\107\070\114\001\002\000" +
    "\010\041\131\042\133\063\347\001\002\000\032\004\026" +
    "\005\022\006\066\007\063\010\043\032\122\037\106\040" +
    "\112\054\137\064\126\065\107\070\351\001\002\000\020" +
    "\031\143\032\145\033\147\034\146\035\144\036\142\055" +
    "\357\001\002\000\026\031\uffbd\032\uffbd\033\uffbd\034\uffbd" +
    "\035\uffbd\036\uffbd\053\261\054\167\055\uffbd\056\166\001" +
    "\002\000\004\055\353\001\002\000\004\060\354\001\002" +
    "\000\044\003\050\004\026\005\022\006\066\007\063\010" +
    "\043\013\046\015\036\020\072\022\031\023\077\026\024" +
    "\027\025\030\071\037\056\040\060\070\041\001\002\000" +
    "\004\061\356\001\002\000\046\003\uff86\004\uff86\005\uff86" +
    "\006\uff86\007\uff86\010\uff86\013\uff86\015\uff86\020\uff86\022" +
    "\uff86\023\uff86\026\uff86\027\uff86\030\uff86\037\uff86\040\uff86" +
    "\061\uff86\070\uff86\001\002\000\004\060\360\001\002\000" +
    "\044\003\050\004\026\005\022\006\066\007\063\010\043" +
    "\013\046\015\036\020\072\022\031\023\077\026\024\027" +
    "\025\030\071\037\056\040\060\070\041\001\002\000\004" +
    "\061\362\001\002\000\046\003\uff87\004\uff87\005\uff87\006" +
    "\uff87\007\uff87\010\uff87\013\uff87\015\uff87\020\uff87\022\uff87" +
    "\023\uff87\026\uff87\027\uff87\030\uff87\037\uff87\040\uff87\061" +
    "\uff87\070\uff87\001\002\000\046\003\uff7d\004\uff7d\005\uff7d" +
    "\006\uff7d\007\uff7d\010\uff7d\013\uff7d\015\uff7d\020\uff7d\022" +
    "\uff7d\023\uff7d\026\uff7d\027\uff7d\030\uff7d\037\uff7d\040\uff7d" +
    "\061\uff7d\070\uff7d\001\002\000\006\065\366\070\365\001" +
    "\002\000\004\055\371\001\002\000\004\055\367\001\002" +
    "\000\004\063\370\001\002\000\046\003\uff98\004\uff98\005" +
    "\uff98\006\uff98\007\uff98\010\uff98\013\uff98\015\uff98\020\uff98" +
    "\022\uff98\023\uff98\026\uff98\027\uff98\030\uff98\037\uff98\040" +
    "\uff98\061\uff98\070\uff98\001\002\000\004\063\372\001\002" +
    "\000\046\003\uff99\004\uff99\005\uff99\006\uff99\007\uff99\010" +
    "\uff99\013\uff99\015\uff99\020\uff99\022\uff99\023\uff99\026\uff99" +
    "\027\uff99\030\uff99\037\uff99\040\uff99\061\uff99\070\uff99\001" +
    "\002\000\006\064\375\070\374\001\002\000\004\055\u0100" +
    "\001\002\000\004\055\376\001\002\000\004\063\377\001" +
    "\002\000\046\003\uff9a\004\uff9a\005\uff9a\006\uff9a\007\uff9a" +
    "\010\uff9a\013\uff9a\015\uff9a\020\uff9a\022\uff9a\023\uff9a\026" +
    "\uff9a\027\uff9a\030\uff9a\037\uff9a\040\uff9a\061\uff9a\070\uff9a" +
    "\001\002\000\004\063\u0101\001\002\000\046\003\uff9b\004" +
    "\uff9b\005\uff9b\006\uff9b\007\uff9b\010\uff9b\013\uff9b\015\uff9b" +
    "\020\uff9b\022\uff9b\023\uff9b\026\uff9b\027\uff9b\030\uff9b\037" +
    "\uff9b\040\uff9b\061\uff9b\070\uff9b\001\002\000\050\003\uffd6" +
    "\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6\013\uffd6\015" +
    "\uffd6\020\uffd6\022\uffd6\023\uffd6\026\uffd6\027\uffd6\030\uffd6" +
    "\037\uffd6\040\uffd6\055\uffd6\061\uffd6\070\uffd6\001\002\000" +
    "\004\054\ufff0\001\002\000\004\054\ufff2\001\002\000\004" +
    "\054\ufff1\001\002\000\014\002\ufff6\003\ufff6\004\ufff6\007" +
    "\ufff6\010\ufff6\001\002\000\014\002\ufffc\003\ufffc\004\ufffc" +
    "\007\ufffc\010\ufffc\001\002\000\004\054\u010b\001\002\000" +
    "\014\002\uffff\003\u0106\004\013\007\011\010\012\001\002" +
    "\000\014\002\ufffb\003\ufffb\004\ufffb\007\ufffb\010\ufffb\001" +
    "\002\000\016\004\026\005\022\006\066\007\063\010\043" +
    "\055\u010c\001\002\000\004\060\u011b\001\002\000\006\055" +
    "\uffef\062\u0119\001\002\000\004\070\u0118\001\002\000\004" +
    "\070\u0117\001\002\000\004\055\u0111\001\002\000\004\060" +
    "\u0112\001\002\000\044\003\050\004\026\005\022\006\066" +
    "\007\063\010\043\013\046\015\036\020\072\022\031\026" +
    "\024\027\025\030\071\037\056\040\060\061\u0114\070\041" +
    "\001\002\000\004\061\u0116\001\002\000\004\003\u0115\001" +
    "\002\000\014\002\ufff8\003\ufff8\004\ufff8\007\ufff8\010\ufff8" +
    "\001\002\000\014\002\ufffa\003\ufffa\004\ufffa\007\ufffa\010" +
    "\ufffa\001\002\000\006\055\uffec\062\uffec\001\002\000\006" +
    "\055\uffed\062\uffed\001\002\000\014\004\026\005\022\006" +
    "\066\007\063\010\043\001\002\000\004\055\uffee\001\002" +
    "\000\044\003\050\004\026\005\022\006\066\007\063\010" +
    "\043\013\046\015\036\020\072\022\031\026\024\027\025" +
    "\030\071\037\056\040\060\061\u011d\070\041\001\002\000" +
    "\004\061\u011f\001\002\000\004\003\u011e\001\002\000\014" +
    "\002\ufff7\003\ufff7\004\ufff7\007\ufff7\010\ufff7\001\002\000" +
    "\014\002\ufff9\003\ufff9\004\ufff9\007\ufff9\010\ufff9\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011e\000\012\002\003\006\004\007\005\010\007\001" +
    "\001\000\002\001\001\000\012\004\u0108\005\u0106\007\005" +
    "\010\u0107\001\001\000\004\011\u0103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\072\003\051\012\031\015\041\016\064\017\037\020\067" +
    "\021\020\022\066\023\054\026\016\033\046\034\026\035" +
    "\060\036\017\051\043\052\022\053\053\054\033\060\032" +
    "\061\052\066\044\067\056\070\063\072\050\075\061\076" +
    "\027\077\036\100\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\055\322\056\321" +
    "\057\320\001\001\000\004\070\313\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\023\124\027\250\037\177\040\110" +
    "\042\122\043\200\045\123\046\117\047\104\070\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\070\003\051\015\223\016\064" +
    "\017\037\020\067\021\020\022\066\023\054\026\016\033" +
    "\046\034\026\035\060\036\017\051\043\052\022\053\053" +
    "\054\033\060\032\061\052\066\044\067\056\070\063\072" +
    "\050\075\061\076\027\077\036\100\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\076\003\051\016\100\017\037" +
    "\020\067\021\020\022\066\023\054\026\016\033\046\034" +
    "\026\035\060\036\017\051\043\052\022\053\053\054\033" +
    "\060\032\061\052\062\077\063\075\064\074\065\073\066" +
    "\044\067\056\070\063\072\050\075\061\076\027\077\036" +
    "\100\034\001\001\000\002\001\001\000\074\003\051\016" +
    "\100\017\037\020\067\021\020\022\066\023\054\026\016" +
    "\033\046\034\026\035\060\036\017\051\043\052\022\053" +
    "\053\054\033\060\032\061\052\063\213\064\074\065\073" +
    "\066\044\067\056\070\063\072\050\075\061\076\027\077" +
    "\036\100\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\023\124\040\110\042\122\043\126" +
    "\045\123\046\117\047\104\070\114\001\001\000\002\001" +
    "\001\000\010\023\124\042\211\070\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\041\147\050\163\001" +
    "\001\000\010\023\124\042\210\070\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\023" +
    "\124\040\152\042\122\043\153\045\123\046\117\047\104" +
    "\070\114\001\001\000\002\001\001\000\022\023\124\040" +
    "\110\042\122\043\151\045\123\046\117\047\104\070\114" +
    "\001\001\000\002\001\001\000\012\023\124\040\135\042" +
    "\122\070\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\127\001" +
    "\001\000\022\023\124\040\110\042\122\043\134\045\123" +
    "\046\117\047\104\070\114\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\044\127\001\001\000\004\041\147\001\001\000\012\023" +
    "\124\040\137\042\122\070\114\001\001\000\004\041\147" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\023\124\040\150\042\122\070" +
    "\114\001\001\000\004\041\147\001\001\000\004\044\127" +
    "\001\001\000\006\041\147\050\163\001\001\000\004\044" +
    "\127\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\023\124\040\164\042\122" +
    "\070\114\001\001\000\004\041\147\001\001\000\004\071" +
    "\205\001\001\000\032\023\124\024\171\025\176\027\175" +
    "\037\177\040\110\042\122\043\200\045\123\046\117\047" +
    "\104\070\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\127\001\001\000\032\023\124\024" +
    "\202\025\176\027\175\037\177\040\110\042\122\043\200" +
    "\045\123\046\117\047\104\070\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\023\124\037\225\040\110\042" +
    "\122\043\200\045\123\046\117\047\104\070\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\073\233\074\232\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\073\240\074\232\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\073\256\074\232\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\023\124\027\266\030\263\031\267" +
    "\032\264\037\177\040\110\042\122\043\200\045\123\046" +
    "\117\047\104\070\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\023\124\027\303\030\302\031\267\032" +
    "\264\037\177\040\110\042\122\043\200\045\123\046\117" +
    "\047\104\070\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\023\124\040\110\042\122" +
    "\043\305\045\123\046\117\047\104\070\114\001\001\000" +
    "\004\044\127\001\001\000\002\001\001\000\072\003\051" +
    "\012\310\015\041\016\064\017\037\020\067\021\020\022" +
    "\066\023\054\026\016\033\046\034\026\035\060\036\017" +
    "\051\043\052\022\053\053\054\033\060\032\061\052\066" +
    "\044\067\056\070\063\072\050\075\061\076\027\077\036" +
    "\100\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\071\205\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\055\324\056\321\001\001\000\004" +
    "\057\323\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\023\124\040\110\042\122\043\326\045\123\046\117" +
    "\047\104\070\114\001\001\000\004\044\127\001\001\000" +
    "\002\001\001\000\072\003\051\012\331\015\041\016\064" +
    "\017\037\020\067\021\020\022\066\023\054\026\016\033" +
    "\046\034\026\035\060\036\017\051\043\052\022\053\053" +
    "\054\033\060\032\061\052\066\044\067\056\070\063\072" +
    "\050\075\061\076\027\077\036\100\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\072\003\051\012\334\015" +
    "\041\016\064\017\037\020\067\021\020\022\066\023\054" +
    "\026\016\033\046\034\026\035\060\036\017\051\043\052" +
    "\022\053\053\054\033\060\032\061\052\066\044\067\056" +
    "\070\063\072\050\075\061\076\027\077\036\100\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\051\017\341\021\340\100\342\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\023\124\040\110\042\122\043\345\045" +
    "\123\046\117\047\104\070\114\001\001\000\004\044\127" +
    "\001\001\000\024\003\051\017\341\020\351\021\020\023" +
    "\124\040\347\042\122\070\114\100\342\001\001\000\004" +
    "\041\147\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\076\003\051\016\100\017\037\020\067" +
    "\021\020\022\066\023\054\026\016\033\046\034\026\035" +
    "\060\036\017\051\043\052\022\053\053\054\033\060\032" +
    "\061\052\062\354\063\075\064\074\065\073\066\044\067" +
    "\056\070\063\072\050\075\061\076\027\077\036\100\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\076\003\051\016\100\017\037\020\067\021\020" +
    "\022\066\023\054\026\016\033\046\034\026\035\060\036" +
    "\017\051\043\052\022\053\053\054\033\060\032\061\052" +
    "\062\360\063\075\064\074\065\073\066\044\067\056\070" +
    "\063\072\050\075\061\076\027\077\036\100\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\u0109\007\005\010\u0107" +
    "\001\001\000\002\001\001\000\012\003\u010d\013\u010f\014" +
    "\u010c\100\u010e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\072\003\051\012\u0112\015\041\016\064" +
    "\017\037\020\067\021\020\022\066\023\054\026\016\033" +
    "\046\034\026\035\060\036\017\051\043\052\022\053\053" +
    "\054\033\060\032\061\052\066\044\067\056\070\063\072" +
    "\050\075\061\076\027\077\036\100\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\003\u010d" +
    "\013\u0119\014\u010c\100\u010e\001\001\000\002\001\001\000" +
    "\072\003\051\012\u011b\015\041\016\064\017\037\020\067" +
    "\021\020\022\066\023\054\026\016\033\046\034\026\035" +
    "\060\036\017\051\043\052\022\053\053\054\033\060\032" +
    "\061\052\066\044\067\056\070\063\072\050\075\061\076" +
    "\027\077\036\100\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return token = lex.next_token(); 
    }


    Lexer lex;
    Symbol token;
    Boolean errores = false;

    /* Constructor del parser, recibe como parámetro el lexer que se va a utilizar 
        Entradas: Lexer lex
        Salidas: Ninguna
        Restricciones: Ninguna
    */

    @SuppressWarnings("deprecation")
    public parser(Lexer lex){
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }
    
    /* Método que se encarga de retornar el valor booleao de errores. Indicando si hubo errores o no
        Entradas: Ninguna
        Salidas: errores
        Restricciones: Ninguna
    */
    public boolean getErrores(){
        return errores;
    }

    private HashMap<String, ArrayList<String>> listaTablaSimbolos = new HashMap<String, ArrayList<String>>();
    String currentHash;

    /* Método que se encarga de imprimir la tabla de símbolos
        Entradas: Ninguna
        Salidas: Ninguna
        Restricciones: Ninguna
    */
    private void imprimirTablaSimbolos(){
        for(String key: listaTablaSimbolos.keySet()){
            System.out.println("-------------------------");
            System.out.println("");
            System.out.println("Tabla de símbolos: "+key);
            System.out.println("Valores: ");
            for(String item: listaTablaSimbolos.get(key)){
                System.out.println(item);
            }

            System.out.println("");
        }

    }

    /*
        Método que se encarga de retornar la tabla de símbolos
        Entradas: Ninguna
        Salidas: tabla de símbolos
        Restricciones: Ninguna
    */
    public HashMap<String, ArrayList<String>> getTablaSimbolos(){
        return listaTablaSimbolos;
    }

    /* Método que se encarga de imprimir en consola el error sintáctico
        Entradas: String error. Error que se va a imprimir
        Salidas: Ninguna. Imprime en consola el error
        Restricciones: Ninguna
    */
    private void manejoError(String error, String tipoError){
        errores = true;
        int linea = lex.getLine();
        int columna = lex.getColumn();
        System.out.println("Error "+tipoError+": "+ error +" (en la linea: " + linea + " y columna: " + columna+")");
        System.out.println("Se continua con el análisis "+tipoError);
    }

    /* Método que se encarga de buscar en la tabla de símbolos actual un ID.
        Entradas: lista: lista de elementos de la tabla de símbolos actual, idBuscado: ID que se requiere buscar. 
        Salidas: Booleano true o false. 
        Restricciones: Ninguna
    */
     public static boolean buscarID(ArrayList<String> lista, String idBuscado) {
        // Recorre los elementos del ArrayList
        for (String elemento : lista) {
            // Divide el elemento en ID y tipo
            String[] partes = elemento.split(":");
            String id = partes[0];

            // Verifica si el ID coincide con el ID buscado
            if (id.equals(idBuscado)) {
                return true; // Se encontró el ID
            }
        }
        return false; // No se encontró el ID
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



    

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= nuevoLenguaje EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // nuevoLenguaje ::= funcionMain 
            {
              Object RESULT =null;
		 imprimirTablaSimbolos(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nuevoLenguaje",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // nuevoLenguaje ::= funcionMain funciones 
            {
              Object RESULT =null;
		 imprimirTablaSimbolos(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nuevoLenguaje",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // funcionMain ::= iniFun LPARENT RPARENT INIBLOQUE bloque FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionMain",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // funcionMain ::= error 
            {
              Object RESULT =null;
		 manejoError("Error de creación de función main", "sintáctico"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionMain",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // funciones ::= funcion 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // funciones ::= funciones funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // funcion ::= iniFun LPARENT parametros RPARENT INIBLOQUE bloque FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // funcion ::= iniFun LPARENT RPARENT INIBLOQUE bloque FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // funcion ::= iniFun LPARENT parametros RPARENT INIBLOQUE FINBLOQUE error 
            {
              Object RESULT =null;
		 manejoError("Funcion debe tener sentencias debido a que debe retornar un valor", "sintáctico"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // funcion ::= iniFun LPARENT RPARENT INIBLOQUE FINBLOQUE error 
            {
              Object RESULT =null;
		 manejoError("Funcion debe tener sentencias debido a que debe retornar un valor", "sintáctico"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // funcion ::= error 
            {
              Object RESULT =null;
		 manejoError("Error de creación de función", "sintáctico"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipoRet ::= INT 
            {
              Object RESULT =null;
		 RESULT = "int";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoRet",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipoRet ::= FLOAT 
            {
              Object RESULT =null;
		 RESULT = "float";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoRet",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipoRet ::= BOOLEAN 
            {
              Object RESULT =null;
		 RESULT = "boolean";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoRet",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // iniFun ::= tipoRet identifier 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
           String tipoTabla;
           if(id.toString().equals("main")){
            tipoTabla = "tipo:main: "+tip.toString();
           }
           else{
            tipoTabla = "tipo:funcion: "+tip.toString();
           }
           ArrayList<String> listaSimbolos = new ArrayList<String>();
           currentHash = id.toString();
           listaSimbolos.add(tipoTabla);
           listaTablaSimbolos.put(currentHash, listaSimbolos);
           RESULT = tip.toString()+" "+id.toString();


              CUP$parser$result = parser.getSymbolFactory().newSymbol("iniFun",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // identifier ::= MAIN 
            {
              Object RESULT =null;
		 RESULT = "main";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // identifier ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = id.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // parametros ::= parametro COMA parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // parametro ::= tipoVar ID 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 listaTablaSimbolos.get(currentHash).add("Parámetro: "+id.toString()+": "+tip.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // parametro ::= tipoSubset ID 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 listaTablaSimbolos.get(currentHash).add("Parámetro: "+id.toString()+": "+tip.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipoVar ::= FLOAT 
            {
              Object RESULT =null;
		 RESULT = "float";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVar",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipoVar ::= STRING 
            {
              Object RESULT =null;
		 RESULT = "string";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVar",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipoVar ::= BOOLEAN 
            {
              Object RESULT =null;
		 RESULT = "boolean";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVar",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bloque ::= sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentencias ::= sentencia sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentencia ::= creaVar FINEXP 
            {
              Object RESULT =null;
		int cvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  
                        if(cv != null){
                            listaTablaSimbolos.get(currentHash).add(cv.toString()); 
                        }   
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentencia ::= usaVar 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentencia ::= asignacion 
            {
              Object RESULT =null;
		int asignleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asignright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object asign = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        if(asign != null){
                            listaTablaSimbolos.get(currentHash).add(asign.toString());
                        }  
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentencia ::= llamaFunc FINEXP 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentencia ::= output 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentencia ::= control 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentencia ::= returnFunc 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentencia ::= creaArreglo 
            {
              Object RESULT =null;
		int creaArrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int creaArrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object creaArr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      if(creaArr != null){
                        listaTablaSimbolos.get(currentHash).add(creaArr.toString());
                      }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentencia ::= asignaArreglo 
            {
              Object RESULT =null;
		int asigArrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asigArrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object asigArr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        if(asigArr != null){
                            listaTablaSimbolos.get(currentHash).add(asigArr.toString());
                        }  
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentencia ::= error 
            {
              Object RESULT =null;
		 manejoError("Error de sentencia","sintáctico"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // usaVar ::= ID FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("usaVar",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // usaVar ::= PLUS_UN ID FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("usaVar",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // usaVar ::= MINUS_UN ID FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("usaVar",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // creaVar ::= tipoVar ID 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 String var = n.toString()+": "+tip.toString();
                  if(!listaTablaSimbolos.get(currentHash).contains(var)){ // Análisis semántico
                    RESULT = var;
                  }
                  else{
                    manejoError("La variable "+var+" "+"ya ha sido creada en la función: "+currentHash, "semántico");
                    RESULT = null;
                  }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaVar",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // creaVar ::= tipoSubset ID 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 String var = n.toString()+": "+tip.toString();
                  if(!listaTablaSimbolos.get(currentHash).contains(var)){ // Análisis semántico
                    RESULT = var;
                  }
                  else{
                    manejoError("La variable "+var+" "+"ya ha sido creada en la función: "+currentHash, "semántico");
                    RESULT = null;
                  }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaVar",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // asignacion ::= creaAsignaVar FINEXP 
            {
              Object RESULT =null;
		int cvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = cv.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // asignacion ::= ID EQUIV literal FINEXP 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // asignacion ::= ID EQUIV input FINEXP 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // creaAsignaVar ::= creaVar EQUIV literal 
            {
              Object RESULT =null;
		int cvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object cv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = cv.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaAsignaVar",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // creaAsignaVar ::= creaVar EQUIV input 
            {
              Object RESULT =null;
		int cvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object cv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = cv.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaAsignaVar",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // literal ::= operacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // literal ::= CADENA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // literal ::= CARACTER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // literal ::= BOOLEAN 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // literal ::= error 
            {
              Object RESULT =null;
		 manejoError("Error de literal", "sintáctico"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // operacion ::= operacionLogica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // operacionAritmetica ::= operandoArit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // operacionAritmetica ::= PLUS_UN operandoArit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // operacionAritmetica ::= MINUS_UN operandoArit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // operacionAritmetica ::= operacionAritmetica operadorArit operacionAritmetica 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operacionAritmetica ::= LPARENT operacionAritmetica RPARENT 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // operacionAritmetica ::= MINUS operacionAritmetica 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // operadorArit ::= PLUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // operadorArit ::= MINUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operadorArit ::= TIMES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // operadorArit ::= DIV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // operadorArit ::= POWER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // operadorArit ::= MODULE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // operandoArit ::= ENTERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operandoArit ::= DECIMAL 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operandoArit ::= ID 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operandoArit ::= llamaFunc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // operandoArit ::= expArreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operacionRelacional ::= operacionAritmetica operadorRel operacionAritmetica 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionRelacional",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operadorRel ::= MAYOR_QUE 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // operadorRel ::= MAYOR_IGUAL 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // operadorRel ::= MENOR_QUE 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // operadorRel ::= MENOR_IGUAL 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // operadorRel ::= DEQUIV 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // operadorRel ::= DIF 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // operacionLogica ::= operandoLog 
            {
              Object RESULT =null;
		int opLogicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opLogicright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opLogic = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = opLogic; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionLogica",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // operacionLogica ::= operacionRelacional 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionLogica",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // operacionLogica ::= operacionAritmetica 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionLogica",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // operacionLogica ::= operacionLogica operadorLog operacionLogica 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionLogica",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // operacionLogica ::= LPARENT operacionLogica RPARENT 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionLogica",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // operacionLogica ::= negacion operacionLogica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionLogica",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // operandoLog ::= TRUE 
            {
              Object RESULT =null;
		RESULT = "true"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoLog",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // operandoLog ::= FALSE 
            {
              Object RESULT =null;
		RESULT = "false";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoLog",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // operadorLog ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLog",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // operadorLog ::= OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLog",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // negacion ::= NOT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("negacion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // negacion ::= EXCLAMACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("negacion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // llamaFunc ::= ID LPARENT parametrosLlamada RPARENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamaFunc",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // llamaFunc ::= ID LPARENT RPARENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamaFunc",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // parametrosLlamada ::= parametroLlamada 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosLlamada",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // parametrosLlamada ::= parametroLlamada COMA parametrosLlamada 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosLlamada",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // parametroLlamada ::= literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroLlamada",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // input ::= leeInt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("input",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // input ::= leeFloat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("input",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // leeInt ::= READ_INT LPARENT RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leeInt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // leeFloat ::= READ_FLOAT LPARENT RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leeFloat",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // output ::= escribeInt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("output",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // output ::= escribeFloat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("output",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // output ::= escribeString 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("output",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // escribeInt ::= PRINT_INT LPARENT ID RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribeInt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // escribeInt ::= PRINT_INT LPARENT ENTERO RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribeInt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // escribeFloat ::= PRINT_FLOAT LPARENT ID RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribeFloat",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // escribeFloat ::= PRINT_FLOAT LPARENT DECIMAL RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribeFloat",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // escribeString ::= PRINT_STRING LPARENT ID RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribeString",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // escribeString ::= PRINT_STRING LPARENT CADENA RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribeString",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // control ::= condicional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // control ::= ciclo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // condicional ::= condIf condsElif condElse 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // condicional ::= condIf condsElif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // condicional ::= condIf condElse 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // condicional ::= condIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // condIf ::= IF LPARENT operacionLogica RPARENT INIBLOQUE bloque FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condIf",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // condsElif ::= condElif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condsElif",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // condsElif ::= condElif condsElif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condsElif",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // condElif ::= ELIF LPARENT operacionLogica RPARENT INIBLOQUE bloque FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condElif",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // condElse ::= ELSE INIBLOQUE bloque FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condElse",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ciclo ::= cicloDoWhile 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ciclo ::= cicloFor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // cicloDoWhile ::= DO INIBLOQUE bloqueCiclo FINBLOQUE WHILE LPARENT operacionLogica RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cicloDoWhile",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // cicloFor ::= FOR LPARENT creaAsignaVar FINEXP operacionLogica FINEXP operacionAritmetica RPARENT INIBLOQUE bloqueCiclo FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cicloFor",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // cicloFor ::= FOR LPARENT creaAsignaVar FINEXP operacionLogica FINEXP asignacion RPARENT INIBLOQUE bloqueCiclo FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cicloFor",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // bloqueCiclo ::= sentenciasCiclo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueCiclo",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // sentenciasCiclo ::= sentenciaCiclo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasCiclo",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // sentenciasCiclo ::= sentenciaCiclo sentenciasCiclo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasCiclo",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // sentenciaCiclo ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaCiclo",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // sentenciaCiclo ::= breakCiclo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaCiclo",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // breakCiclo ::= BREAK FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("breakCiclo",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // returnFunc ::= RETURN literal FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnFunc",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // asignaArreglo ::= asignaElementoArreglo FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaArreglo",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // asignaArreglo ::= creaAsignaArreglo FINEXP 
            {
              Object RESULT =null;
		int creaArrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int creaArrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object creaArr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = creaArr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaArreglo",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // arregloSinTam ::= tipoSubset ID LPARENT_CUAD RPARENT_CUAD 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  String var = id.toString()+": "+tip.toString(); 
                        if(!listaTablaSimbolos.get(currentHash).contains(var)){ // Análisis semántico
                            RESULT = id.toString()+": "+tip.toString();
                        }
                        else{
                            manejoError("El array "+var+" "+"ya ha sido creado en la función: "+currentHash, "semántico");
                            RESULT = null;
                        }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arregloSinTam",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // creaArreglo ::= tipoArreglo FINEXP 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = tip; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaArreglo",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // creaAsignaArreglo ::= tipoArreglo EQUIV INIBLOQUE arregloValores FINBLOQUE 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = tip; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaAsignaArreglo",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // creaAsignaArreglo ::= arregloSinTam EQUIV INIBLOQUE arregloValores FINBLOQUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaAsignaArreglo",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // creaAsignaArreglo ::= arregloSinTam FINBLOQUE error 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 manejoError("No se puede declarar un arreglo sin tamaño.", "sintáctico"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaAsignaArreglo",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // tipoArreglo ::= tipoSubset expArreglo 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(exp != null){
                        String var = exp.toString()+": "+tip.toString(); 
                        if(!listaTablaSimbolos.get(currentHash).contains(var)){ // Análisis semántico
                            RESULT = var;
                        }
                        else{
                            manejoError("El array "+var+" "+"ya ha sido creado en la función: "+currentHash, "semántico");
                            RESULT = null;
                        }
                    }
                    else{
                        RESULT = null;
                    } 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoArreglo",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // arregloValores ::= arregloValor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arregloValores",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // arregloValores ::= arregloValor COMA arregloValores 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arregloValores",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // arregloValor ::= CARACTER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arregloValor",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // arregloValor ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arregloValor",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // arregloValor ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arregloValor",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // cantidadArreglo ::= ENTERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  String entero = e.toString();
                       int ent = Integer.parseInt(entero); 
                       if(ent >= 0){
                            RESULT = e; 
                        }
                        else{
                            manejoError("El número entero asignado a la cantidad del arreglo es negativo", "semántico");
                            RESULT = null;
                        }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cantidadArreglo",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // cantidadArreglo ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(buscarID(listaTablaSimbolos.get(currentHash), id.toString())){
                            RESULT = id.toString();
                        }
                        else{
                            manejoError("El id: "+id+" asignado a la cantidad del arreglo no existe o no ha sido creado", "semántico");
                            RESULT = null; 
                        }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cantidadArreglo",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // tipoSubset ::= INT 
            {
              Object RESULT =null;
		 RESULT = "int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoSubset",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // tipoSubset ::= CHAR 
            {
              Object RESULT =null;
		 RESULT = "char"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoSubset",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // asignaElementoArreglo ::= expArreglo EQUIV operacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaElementoArreglo",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // expArreglo ::= ID LPARENT_CUAD cantidadArreglo RPARENT_CUAD 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cantleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cantright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cant = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  if(cant != null){
                            RESULT = id.toString();
                        }
                        else{
                            RESULT = null;
                        }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArreglo",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
