
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ParserLexer;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\207\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\006\011\000\002\004\003\000\002\004\004" +
    "\000\002\005\012\000\002\005\011\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\011\003\000\002" +
    "\011\005\000\002\012\004\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\010\003\000\002\013\003" +
    "\000\002\013\004\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\015" +
    "\005\000\002\015\005\000\002\016\004\000\002\016\006" +
    "\000\002\016\006\000\002\016\006\000\002\017\006\000" +
    "\002\017\006\000\002\017\006\000\002\017\006\000\002" +
    "\017\006\000\002\017\006\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\034\003\000\002\035\003" +
    "\000\002\035\005\000\002\035\005\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\044\005\000\002\045\003" +
    "\000\002\045\003\000\002\045\003\000\002\045\003\000" +
    "\002\045\003\000\002\045\003\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\040\005\000\002\040" +
    "\005\000\002\040\004\000\002\042\003\000\002\042\003" +
    "\000\002\041\003\000\002\041\003\000\002\043\003\000" +
    "\002\043\003\000\002\020\007\000\002\020\006\000\002" +
    "\021\003\000\002\021\005\000\002\022\003\000\002\025" +
    "\003\000\002\025\003\000\002\026\006\000\002\027\006" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\031\007\000\002\031\007\000\002\032\007\000\002" +
    "\032\007\000\002\033\007\000\002\033\007\000\002\046" +
    "\003\000\002\046\003\000\002\050\005\000\002\050\004" +
    "\000\002\050\004\000\002\050\003\000\002\051\011\000" +
    "\002\052\003\000\002\052\004\000\002\053\011\000\002" +
    "\054\006\000\002\047\003\000\002\047\003\000\002\055" +
    "\013\000\002\056\015\000\002\057\003\000\002\060\003" +
    "\000\002\060\004\000\002\061\003\000\002\061\003\000" +
    "\002\062\004\000\002\023\005\000\002\067\004\000\002" +
    "\067\004\000\002\063\006\000\002\073\004\000\002\072" +
    "\007\000\002\072\007\000\002\071\004\000\002\070\003" +
    "\000\002\070\005\000\002\067\003\000\002\067\003\000" +
    "\002\067\003\000\002\066\003\000\002\066\003\000\002" +
    "\074\003\000\002\074\003\000\002\064\005\000\002\064" +
    "\005\000\002\064\005\000\002\065\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010a\000\004\004\006\001\002\000\004\002\u010c\001" +
    "\002\000\012\002\000\004\372\007\367\010\370\001\002" +
    "\000\004\014\007\001\002\000\004\054\010\001\002\000" +
    "\004\055\011\001\002\000\004\060\012\001\002\000\040" +
    "\004\023\005\016\006\061\007\056\010\041\013\044\015" +
    "\034\020\064\022\026\026\021\027\022\030\063\064\020" +
    "\070\031\071\040\001\002\000\044\004\uffe8\005\uffe8\006" +
    "\uffe8\007\uffe8\010\uffe8\013\uffe8\015\uffe8\020\uffe8\022\uffe8" +
    "\023\uffe8\026\uffe8\027\uffe8\030\uffe8\061\uffe8\064\uffe8\070" +
    "\uffe8\071\uffe8\001\002\000\044\004\uffab\005\uffab\006\uffab" +
    "\007\uffab\010\uffab\013\uffab\015\uffab\020\uffab\022\uffab\023" +
    "\uffab\026\uffab\027\uffab\030\uffab\061\uffab\064\uffab\070\uffab" +
    "\071\uffab\001\002\000\004\063\364\001\002\000\004\071" +
    "\uff7f\001\002\000\044\004\uffa3\005\uffa3\006\uffa3\007\uffa3" +
    "\010\uffa3\013\uffa3\015\uffa3\020\uffa3\022\uffa3\023\uffa3\026" +
    "\uffa3\027\uffa3\030\uffa3\061\uffa3\064\uffa3\070\uffa3\071\uffa3" +
    "\001\002\000\046\004\uff84\005\uff84\006\uff84\007\uff84\010" +
    "\uff84\013\uff84\015\uff84\020\uff84\022\uff84\023\uff84\026\uff84" +
    "\027\uff84\030\uff84\061\uff84\062\uff84\064\uff84\070\uff84\071" +
    "\uff84\001\002\000\004\054\355\001\002\000\004\054\346" +
    "\001\002\000\004\071\uff80\001\002\000\044\004\uffad\005" +
    "\uffad\006\uffad\007\uffad\010\uffad\013\uffad\015\uffad\020\uffad" +
    "\022\uffad\023\uffad\026\uffad\027\uffad\030\uffad\061\uffad\064" +
    "\uffad\070\uffad\071\uffad\001\002\000\004\063\345\001\002" +
    "\000\004\054\326\001\002\000\004\061\325\001\002\000" +
    "\044\004\uff99\005\uff99\006\uff99\007\uff99\010\uff99\013\uff99" +
    "\015\uff99\020\uff99\022\uff99\023\uff99\026\uff99\027\uff99\030" +
    "\uff99\061\uff99\064\uff99\070\uff99\071\uff99\001\002\000\046" +
    "\004\uff85\005\uff85\006\uff85\007\uff85\010\uff85\013\uff85\015" +
    "\uff85\020\uff85\022\uff85\023\uff85\026\uff85\027\uff85\030\uff85" +
    "\061\uff85\062\uff85\064\uff85\070\uff85\071\uff85\001\002\000" +
    "\050\004\uff9f\005\uff9f\006\uff9f\007\uff9f\010\uff9f\013\uff9f" +
    "\015\uff9f\016\306\017\305\020\uff9f\022\uff9f\023\uff9f\026" +
    "\uff9f\027\uff9f\030\uff9f\061\uff9f\064\uff9f\070\uff9f\071\uff9f" +
    "\001\002\000\004\071\277\001\002\000\004\054\271\001" +
    "\002\000\044\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7" +
    "\013\uffe7\015\uffe7\020\uffe7\022\uffe7\023\uffe7\026\uffe7\027" +
    "\uffe7\030\uffe7\061\uffe7\064\uffe7\070\uffe7\071\uffe7\001\002" +
    "\000\044\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed\013" +
    "\uffed\015\uffed\020\uffed\022\uffed\023\uffed\026\uffed\027\uffed" +
    "\030\uffed\061\uffed\064\uffed\070\uffed\071\uffed\001\002\000" +
    "\004\061\ufff0\001\002\000\052\004\uff83\005\uff83\006\uff83" +
    "\007\uff83\010\uff83\013\uff83\015\uff83\020\uff83\022\uff83\023" +
    "\uff83\026\uff83\027\uff83\030\uff83\053\262\054\242\056\200" +
    "\061\uff83\064\uff83\070\uff83\071\uff83\001\002\000\004\071" +
    "\ufff1\001\002\000\044\004\uffe9\005\uffe9\006\uffe9\007\uffe9" +
    "\010\uffe9\013\uffe9\015\uffe9\020\uffe9\022\uffe9\023\uffe9\026" +
    "\uffe9\027\uffe9\030\uffe9\061\uffe9\064\uffe9\070\uffe9\071\uffe9" +
    "\001\002\000\004\053\256\001\002\000\026\011\102\012" +
    "\107\043\113\044\100\054\114\064\104\065\077\066\220" +
    "\070\223\071\110\001\002\000\044\004\uffea\005\uffea\006" +
    "\uffea\007\uffea\010\uffea\013\uffea\015\uffea\020\uffea\022\uffea" +
    "\023\uffea\026\uffea\027\uffea\030\uffea\061\uffea\064\uffea\070" +
    "\uffea\071\uffea\001\002\000\044\004\uffe6\005\uffe6\006\uffe6" +
    "\007\uffe6\010\uffe6\013\uffe6\015\uffe6\020\uffe6\022\uffe6\023" +
    "\uffe6\026\uffe6\027\uffe6\030\uffe6\061\uffe6\064\uffe6\070\uffe6" +
    "\071\uffe6\001\002\000\004\071\215\001\002\000\044\004" +
    "\uff98\005\uff98\006\uff98\007\uff98\010\uff98\013\uff98\015\uff98" +
    "\020\uff98\022\uff98\023\uff98\026\uff98\027\uff98\030\uff98\061" +
    "\uff98\064\uff98\070\uff98\071\uff98\001\002\000\044\004\uffa4" +
    "\005\uffa4\006\uffa4\007\uffa4\010\uffa4\013\uffa4\015\uffa4\020" +
    "\uffa4\022\uffa4\023\uffa4\026\uffa4\027\uffa4\030\uffa4\061\uffa4" +
    "\064\uffa4\070\uffa4\071\uffa4\001\002\000\044\004\uffeb\005" +
    "\uffeb\006\uffeb\007\uffeb\010\uffeb\013\uffeb\015\uffeb\020\uffeb" +
    "\022\uffeb\023\uffeb\026\uffeb\027\uffeb\030\uffeb\061\uffeb\064" +
    "\uffeb\070\uffeb\071\uffeb\001\002\000\004\063\214\001\002" +
    "\000\044\004\uffac\005\uffac\006\uffac\007\uffac\010\uffac\013" +
    "\uffac\015\uffac\020\uffac\022\uffac\023\uffac\026\uffac\027\uffac" +
    "\030\uffac\061\uffac\064\uffac\070\uffac\071\uffac\001\002\000" +
    "\006\053\170\063\171\001\002\000\004\071\ufff3\001\002" +
    "\000\004\053\164\001\002\000\042\004\023\005\016\006" +
    "\061\007\056\010\041\013\044\015\034\020\064\022\026" +
    "\026\021\027\022\030\063\061\uffef\064\020\070\031\071" +
    "\040\001\002\000\004\071\ufff2\001\002\000\044\004\uffec" +
    "\005\uffec\006\uffec\007\uffec\010\uffec\013\uffec\015\uffec\020" +
    "\uffec\022\uffec\023\uffec\026\uffec\027\uffec\030\uffec\061\uffec" +
    "\064\uffec\070\uffec\071\uffec\001\002\000\004\054\154\001" +
    "\002\000\004\060\065\001\002\000\042\004\023\005\016" +
    "\006\061\007\056\010\041\013\044\015\034\020\064\022" +
    "\026\023\071\026\021\027\022\030\063\064\020\070\031" +
    "\071\040\001\002\000\044\004\uff91\005\uff91\006\uff91\007" +
    "\uff91\010\uff91\013\uff91\015\uff91\020\uff91\022\uff91\023\uff91" +
    "\026\uff91\027\uff91\030\uff91\061\uff91\064\uff91\070\uff91\071" +
    "\uff91\001\002\000\044\004\023\005\016\006\061\007\056" +
    "\010\041\013\044\015\034\020\064\022\026\023\071\026" +
    "\021\027\022\030\063\061\uff94\064\020\070\031\071\040" +
    "\001\002\000\004\061\uff95\001\002\000\004\063\152\001" +
    "\002\000\004\061\074\001\002\000\044\004\uff92\005\uff92" +
    "\006\uff92\007\uff92\010\uff92\013\uff92\015\uff92\020\uff92\022" +
    "\uff92\023\uff92\026\uff92\027\uff92\030\uff92\061\uff92\064\uff92" +
    "\070\uff92\071\uff92\001\002\000\004\021\075\001\002\000" +
    "\004\054\076\001\002\000\022\011\102\012\107\043\113" +
    "\044\100\054\114\064\104\065\077\071\110\001\002\000" +
    "\044\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb" +
    "\041\uffcb\042\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051" +
    "\uffcb\052\uffcb\055\uffcb\062\uffcb\063\uffcb\001\002\000\022" +
    "\011\uffb7\012\uffb7\043\uffb7\044\uffb7\054\uffb7\064\uffb7\065" +
    "\uffb7\071\uffb7\001\002\000\014\041\uffc2\042\uffc2\055\uffc2" +
    "\062\uffc2\063\uffc2\001\002\000\014\041\uffbc\042\uffbc\055" +
    "\uffbc\062\uffbc\063\uffbc\001\002\000\044\031\uffd5\032\uffd5" +
    "\033\uffd5\034\uffd5\035\uffd5\036\uffd5\041\uffd5\042\uffd5\045" +
    "\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\055\uffd5" +
    "\062\uffd5\063\uffd5\001\002\000\044\031\uffcc\032\uffcc\033" +
    "\uffcc\034\uffcc\035\uffcc\036\uffcc\041\uffcc\042\uffcc\045\uffcc" +
    "\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\055\uffcc\062" +
    "\uffcc\063\uffcc\001\002\000\010\041\144\042\145\055\150" +
    "\001\002\000\014\041\uffc1\042\uffc1\055\uffc1\062\uffc1\063" +
    "\uffc1\001\002\000\014\041\uffbb\042\uffbb\055\uffbb\062\uffbb" +
    "\063\uffbb\001\002\000\044\031\uffca\032\uffca\033\uffca\034" +
    "\uffca\035\uffca\036\uffca\041\uffca\042\uffca\045\uffca\046\uffca" +
    "\047\uffca\050\uffca\051\uffca\052\uffca\055\uffca\062\uffca\063" +
    "\uffca\001\002\000\022\011\102\012\107\043\113\044\100" +
    "\054\114\064\104\065\077\071\110\001\002\000\044\031" +
    "\126\032\121\033\131\034\130\035\132\036\122\041\uffc0" +
    "\042\uffc0\045\123\046\124\047\127\050\134\051\133\052" +
    "\125\055\uffc0\062\uffc0\063\uffc0\001\002\000\022\011\uffb8" +
    "\012\uffb8\043\uffb8\044\uffb8\054\uffb8\064\uffb8\065\uffb8\071" +
    "\uffb8\001\002\000\022\011\102\012\107\043\113\044\100" +
    "\054\114\064\104\065\077\071\110\001\002\000\010\041" +
    "\144\042\145\055\143\001\002\000\040\031\126\032\121" +
    "\033\131\034\130\035\132\036\122\041\uffc0\042\uffc0\045" +
    "\123\046\124\047\127\050\134\051\133\052\125\055\117" +
    "\001\002\000\044\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035" +
    "\uffd3\036\uffd3\041\uffd3\042\uffd3\045\uffd3\046\uffd3\047\uffd3" +
    "\050\uffd3\051\uffd3\052\uffd3\055\uffd3\062\uffd3\063\uffd3\001" +
    "\002\000\010\064\104\065\077\071\110\001\002\000\010" +
    "\064\uffd1\065\uffd1\071\uffd1\001\002\000\010\064\uffcd\065" +
    "\uffcd\071\uffcd\001\002\000\012\054\uffc8\064\uffc8\065\uffc8" +
    "\071\uffc8\001\002\000\012\054\uffc7\064\uffc7\065\uffc7\071" +
    "\uffc7\001\002\000\012\054\uffc3\064\uffc3\065\uffc3\071\uffc3" +
    "\001\002\000\010\064\uffd2\065\uffd2\071\uffd2\001\002\000" +
    "\012\054\uffc6\064\uffc6\065\uffc6\071\uffc6\001\002\000\010" +
    "\064\uffcf\065\uffcf\071\uffcf\001\002\000\010\064\uffd0\065" +
    "\uffd0\071\uffd0\001\002\000\010\064\uffce\065\uffce\071\uffce" +
    "\001\002\000\012\054\uffc4\064\uffc4\065\uffc4\071\uffc4\001" +
    "\002\000\012\054\uffc5\064\uffc5\065\uffc5\071\uffc5\001\002" +
    "\000\012\054\137\064\104\065\077\071\110\001\002\000" +
    "\030\031\126\032\121\033\131\034\130\035\132\036\122" +
    "\041\uffc9\042\uffc9\055\uffc9\062\uffc9\063\uffc9\001\002\000" +
    "\012\054\137\064\104\065\077\071\110\001\002\000\020" +
    "\031\126\032\121\033\131\034\130\035\132\036\122\055" +
    "\117\001\002\000\044\031\uffd4\032\uffd4\033\uffd4\034\uffd4" +
    "\035\uffd4\036\uffd4\041\uffd4\042\uffd4\045\uffd4\046\uffd4\047" +
    "\uffd4\050\uffd4\051\uffd4\052\uffd4\055\uffd4\062\uffd4\063\uffd4" +
    "\001\002\000\022\011\102\012\107\043\113\044\100\054" +
    "\114\064\104\065\077\071\110\001\002\000\014\041\uffbe" +
    "\042\uffbe\055\uffbe\062\uffbe\063\uffbe\001\002\000\022\011" +
    "\uffba\012\uffba\043\uffba\044\uffba\054\uffba\064\uffba\065\uffba" +
    "\071\uffba\001\002\000\022\011\uffb9\012\uffb9\043\uffb9\044" +
    "\uffb9\054\uffb9\064\uffb9\065\uffb9\071\uffb9\001\002\000\014" +
    "\041\144\042\145\055\uffbf\062\uffbf\063\uffbf\001\002\000" +
    "\014\041\144\042\145\055\uffbd\062\uffbd\063\uffbd\001\002" +
    "\000\004\063\151\001\002\000\044\004\uff97\005\uff97\006" +
    "\uff97\007\uff97\010\uff97\013\uff97\015\uff97\020\uff97\022\uff97" +
    "\023\uff97\026\uff97\027\uff97\030\uff97\061\uff97\064\uff97\070" +
    "\uff97\071\uff97\001\002\000\044\004\uff90\005\uff90\006\uff90" +
    "\007\uff90\010\uff90\013\uff90\015\uff90\020\uff90\022\uff90\023" +
    "\uff90\026\uff90\027\uff90\030\uff90\061\uff90\064\uff90\070\uff90" +
    "\071\uff90\001\002\000\004\061\uff93\001\002\000\006\066" +
    "\156\071\155\001\002\000\004\055\161\001\002\000\004" +
    "\055\157\001\002\000\004\063\160\001\002\000\044\004" +
    "\uffa5\005\uffa5\006\uffa5\007\uffa5\010\uffa5\013\uffa5\015\uffa5" +
    "\020\uffa5\022\uffa5\023\uffa5\026\uffa5\027\uffa5\030\uffa5\061" +
    "\uffa5\064\uffa5\070\uffa5\071\uffa5\001\002\000\004\063\162" +
    "\001\002\000\044\004\uffa6\005\uffa6\006\uffa6\007\uffa6\010" +
    "\uffa6\013\uffa6\015\uffa6\020\uffa6\022\uffa6\023\uffa6\026\uffa6" +
    "\027\uffa6\030\uffa6\061\uffa6\064\uffa6\070\uffa6\071\uffa6\001" +
    "\002\000\004\061\uffee\001\002\000\010\064\167\070\166" +
    "\071\165\001\002\000\004\063\uff7c\001\002\000\004\063" +
    "\uff7d\001\002\000\004\063\uff7e\001\002\000\004\060\172" +
    "\001\002\000\044\004\uff8b\005\uff8b\006\uff8b\007\uff8b\010" +
    "\uff8b\013\uff8b\015\uff8b\020\uff8b\022\uff8b\023\uff8b\026\uff8b" +
    "\027\uff8b\030\uff8b\061\uff8b\064\uff8b\070\uff8b\071\uff8b\001" +
    "\002\000\014\004\023\005\016\064\020\070\031\071\177" +
    "\001\002\000\004\053\170\001\002\000\004\061\213\001" +
    "\002\000\006\061\uff87\062\211\001\002\000\004\071\205" +
    "\001\002\000\010\056\200\061\uff83\062\uff83\001\002\000" +
    "\006\064\203\071\201\001\002\000\004\057\uff81\001\002" +
    "\000\004\057\204\001\002\000\004\057\uff82\001\002\000" +
    "\006\053\uff7b\063\uff7b\001\002\000\004\056\207\001\002" +
    "\000\006\053\uff88\063\uff88\001\002\000\010\057\210\064" +
    "\203\071\201\001\002\000\004\053\uff8c\001\002\000\014" +
    "\004\023\005\016\064\020\070\031\071\177\001\002\000" +
    "\004\061\uff86\001\002\000\004\063\uff8a\001\002\000\046" +
    "\004\uff8e\005\uff8e\006\uff8e\007\uff8e\010\uff8e\013\uff8e\015" +
    "\uff8e\020\uff8e\022\uff8e\023\uff8e\026\uff8e\027\uff8e\030\uff8e" +
    "\061\uff8e\062\uff8e\064\uff8e\070\uff8e\071\uff8e\001\002\000" +
    "\006\053\216\063\217\001\002\000\032\011\102\012\107" +
    "\024\226\025\222\043\113\044\100\054\114\064\104\065" +
    "\077\066\220\070\223\071\221\001\002\000\044\004\uffe5" +
    "\005\uffe5\006\uffe5\007\uffe5\010\uffe5\013\uffe5\015\uffe5\020" +
    "\uffe5\022\uffe5\023\uffe5\026\uffe5\027\uffe5\030\uffe5\061\uffe5" +
    "\064\uffe5\070\uffe5\071\uffe5\001\002\000\010\055\uffd8\062" +
    "\uffd8\063\uffd8\001\002\000\042\031\uffca\032\uffca\033\uffca" +
    "\034\uffca\035\uffca\036\uffca\041\uffca\042\uffca\045\uffca\046" +
    "\uffca\047\uffca\050\uffca\051\uffca\052\uffca\054\242\063\uffca" +
    "\001\002\000\004\054\237\001\002\000\010\055\uffd7\062" +
    "\uffd7\063\uffd7\001\002\000\004\063\uffdd\001\002\000\004" +
    "\063\uffb0\001\002\000\004\054\234\001\002\000\004\063" +
    "\uffdf\001\002\000\004\063\uffde\001\002\000\010\055\uffd9" +
    "\062\uffd9\063\uffd9\001\002\000\004\063\uffb1\001\002\000" +
    "\014\041\144\042\145\055\uffd6\062\uffd6\063\uffd6\001\002" +
    "\000\004\055\235\001\002\000\004\063\236\001\002\000" +
    "\004\063\uffaf\001\002\000\004\055\240\001\002\000\004" +
    "\063\241\001\002\000\004\063\uffae\001\002\000\030\011" +
    "\102\012\107\043\113\044\100\054\114\055\243\064\104" +
    "\065\077\066\220\070\223\071\110\001\002\000\004\063" +
    "\253\001\002\000\004\055\251\001\002\000\006\055\uffb2" +
    "\062\uffb2\001\002\000\006\055\uffb4\062\247\001\002\000" +
    "\026\011\102\012\107\043\113\044\100\054\114\064\104" +
    "\065\077\066\220\070\223\071\110\001\002\000\004\055" +
    "\uffb3\001\002\000\004\063\252\001\002\000\046\004\uffb6" +
    "\005\uffb6\006\uffb6\007\uffb6\010\uffb6\013\uffb6\015\uffb6\020" +
    "\uffb6\022\uffb6\023\uffb6\026\uffb6\027\uffb6\030\uffb6\061\uffb6" +
    "\063\uffb6\064\uffb6\070\uffb6\071\uffb6\001\002\000\046\004" +
    "\uffb5\005\uffb5\006\uffb5\007\uffb5\010\uffb5\013\uffb5\015\uffb5" +
    "\020\uffb5\022\uffb5\023\uffb5\026\uffb5\027\uffb5\030\uffb5\061" +
    "\uffb5\063\uffb5\064\uffb5\070\uffb5\071\uffb5\001\002\000\004" +
    "\063\255\001\002\000\044\004\uff8f\005\uff8f\006\uff8f\007" +
    "\uff8f\010\uff8f\013\uff8f\015\uff8f\020\uff8f\022\uff8f\023\uff8f" +
    "\026\uff8f\027\uff8f\030\uff8f\061\uff8f\064\uff8f\070\uff8f\071" +
    "\uff8f\001\002\000\004\060\257\001\002\000\014\004\023" +
    "\005\016\064\020\070\031\071\177\001\002\000\004\061" +
    "\261\001\002\000\004\063\uff89\001\002\000\032\011\102" +
    "\012\107\024\226\025\222\043\113\044\100\054\114\064" +
    "\104\065\077\066\220\070\223\071\221\001\002\000\004" +
    "\063\270\001\002\000\004\063\267\001\002\000\004\063" +
    "\266\001\002\000\046\004\uffe1\005\uffe1\006\uffe1\007\uffe1" +
    "\010\uffe1\013\uffe1\015\uffe1\020\uffe1\022\uffe1\023\uffe1\026" +
    "\uffe1\027\uffe1\030\uffe1\055\uffe1\061\uffe1\064\uffe1\070\uffe1" +
    "\071\uffe1\001\002\000\046\004\uffe2\005\uffe2\006\uffe2\007" +
    "\uffe2\010\uffe2\013\uffe2\015\uffe2\020\uffe2\022\uffe2\023\uffe2" +
    "\026\uffe2\027\uffe2\030\uffe2\055\uffe2\061\uffe2\064\uffe2\070" +
    "\uffe2\071\uffe2\001\002\000\046\004\uffe0\005\uffe0\006\uffe0" +
    "\007\uffe0\010\uffe0\013\uffe0\015\uffe0\020\uffe0\022\uffe0\023" +
    "\uffe0\026\uffe0\027\uffe0\030\uffe0\055\uffe0\061\uffe0\064\uffe0" +
    "\070\uffe0\071\uffe0\001\002\000\022\011\102\012\107\043" +
    "\113\044\100\054\114\064\104\065\077\071\110\001\002" +
    "\000\010\041\144\042\145\055\273\001\002\000\004\060" +
    "\274\001\002\000\040\004\023\005\016\006\061\007\056" +
    "\010\041\013\044\015\034\020\064\022\026\026\021\027" +
    "\022\030\063\064\020\070\031\071\040\001\002\000\004" +
    "\061\276\001\002\000\050\004\uff9e\005\uff9e\006\uff9e\007" +
    "\uff9e\010\uff9e\013\uff9e\015\uff9e\016\uff9e\017\uff9e\020\uff9e" +
    "\022\uff9e\023\uff9e\026\uff9e\027\uff9e\030\uff9e\061\uff9e\064" +
    "\uff9e\070\uff9e\071\uff9e\001\002\000\010\053\300\056\207" +
    "\063\301\001\002\000\032\011\102\012\107\024\226\025" +
    "\222\043\113\044\100\054\114\064\104\065\077\066\220" +
    "\070\223\071\221\001\002\000\044\004\uffe4\005\uffe4\006" +
    "\uffe4\007\uffe4\010\uffe4\013\uffe4\015\uffe4\020\uffe4\022\uffe4" +
    "\023\uffe4\026\uffe4\027\uffe4\030\uffe4\061\uffe4\064\uffe4\070" +
    "\uffe4\071\uffe4\001\002\000\004\063\uffda\001\002\000\004" +
    "\063\uffdc\001\002\000\004\063\uffdb\001\002\000\004\060" +
    "\322\001\002\000\004\054\314\001\002\000\044\004\uffa0" +
    "\005\uffa0\006\uffa0\007\uffa0\010\uffa0\013\uffa0\015\uffa0\020" +
    "\uffa0\022\uffa0\023\uffa0\026\uffa0\027\uffa0\030\uffa0\061\uffa0" +
    "\064\uffa0\070\uffa0\071\uffa0\001\002\000\050\004\uff9d\005" +
    "\uff9d\006\uff9d\007\uff9d\010\uff9d\013\uff9d\015\uff9d\016\306" +
    "\017\uff9d\020\uff9d\022\uff9d\023\uff9d\026\uff9d\027\uff9d\030" +
    "\uff9d\061\uff9d\064\uff9d\070\uff9d\071\uff9d\001\002\000\046" +
    "\004\uffa1\005\uffa1\006\uffa1\007\uffa1\010\uffa1\013\uffa1\015" +
    "\uffa1\017\305\020\uffa1\022\uffa1\023\uffa1\026\uffa1\027\uffa1" +
    "\030\uffa1\061\uffa1\064\uffa1\070\uffa1\071\uffa1\001\002\000" +
    "\044\004\uffa2\005\uffa2\006\uffa2\007\uffa2\010\uffa2\013\uffa2" +
    "\015\uffa2\020\uffa2\022\uffa2\023\uffa2\026\uffa2\027\uffa2\030" +
    "\uffa2\061\uffa2\064\uffa2\070\uffa2\071\uffa2\001\002\000\046" +
    "\004\uff9c\005\uff9c\006\uff9c\007\uff9c\010\uff9c\013\uff9c\015" +
    "\uff9c\017\uff9c\020\uff9c\022\uff9c\023\uff9c\026\uff9c\027\uff9c" +
    "\030\uff9c\061\uff9c\064\uff9c\070\uff9c\071\uff9c\001\002\000" +
    "\022\011\102\012\107\043\113\044\100\054\114\064\104" +
    "\065\077\071\110\001\002\000\010\041\144\042\145\055" +
    "\316\001\002\000\004\060\317\001\002\000\040\004\023" +
    "\005\016\006\061\007\056\010\041\013\044\015\034\020" +
    "\064\022\026\026\021\027\022\030\063\064\020\070\031" +
    "\071\040\001\002\000\004\061\321\001\002\000\050\004" +
    "\uff9b\005\uff9b\006\uff9b\007\uff9b\010\uff9b\013\uff9b\015\uff9b" +
    "\016\uff9b\017\uff9b\020\uff9b\022\uff9b\023\uff9b\026\uff9b\027" +
    "\uff9b\030\uff9b\061\uff9b\064\uff9b\070\uff9b\071\uff9b\001\002" +
    "\000\040\004\023\005\016\006\061\007\056\010\041\013" +
    "\044\015\034\020\064\022\026\026\021\027\022\030\063" +
    "\064\020\070\031\071\040\001\002\000\004\061\324\001" +
    "\002\000\044\004\uff9a\005\uff9a\006\uff9a\007\uff9a\010\uff9a" +
    "\013\uff9a\015\uff9a\020\uff9a\022\uff9a\023\uff9a\026\uff9a\027" +
    "\uff9a\030\uff9a\061\uff9a\064\uff9a\070\uff9a\071\uff9a\001\002" +
    "\000\012\002\ufffe\004\ufffe\007\ufffe\010\ufffe\001\002\000" +
    "\014\004\023\005\016\006\061\007\056\010\041\001\002" +
    "\000\004\071\344\001\002\000\004\063\333\001\002\000" +
    "\004\071\332\001\002\000\004\053\300\001\002\000\022" +
    "\011\102\012\107\043\113\044\100\054\114\064\104\065" +
    "\077\071\110\001\002\000\010\041\144\042\145\063\335" +
    "\001\002\000\016\004\023\005\016\006\061\007\056\010" +
    "\041\071\337\001\002\000\004\055\340\001\002\000\004" +
    "\053\262\001\002\000\004\060\341\001\002\000\042\004" +
    "\023\005\016\006\061\007\056\010\041\013\044\015\034" +
    "\020\064\022\026\023\071\026\021\027\022\030\063\064" +
    "\020\070\031\071\040\001\002\000\004\061\343\001\002" +
    "\000\044\004\uff96\005\uff96\006\uff96\007\uff96\010\uff96\013" +
    "\uff96\015\uff96\020\uff96\022\uff96\023\uff96\026\uff96\027\uff96" +
    "\030\uff96\061\uff96\064\uff96\070\uff96\071\uff96\001\002\000" +
    "\004\053\216\001\002\000\046\004\uff8d\005\uff8d\006\uff8d" +
    "\007\uff8d\010\uff8d\013\uff8d\015\uff8d\020\uff8d\022\uff8d\023" +
    "\uff8d\026\uff8d\027\uff8d\030\uff8d\061\uff8d\062\uff8d\064\uff8d" +
    "\070\uff8d\071\uff8d\001\002\000\006\065\350\071\347\001" +
    "\002\000\004\055\353\001\002\000\004\055\351\001\002" +
    "\000\004\063\352\001\002\000\044\004\uffa7\005\uffa7\006" +
    "\uffa7\007\uffa7\010\uffa7\013\uffa7\015\uffa7\020\uffa7\022\uffa7" +
    "\023\uffa7\026\uffa7\027\uffa7\030\uffa7\061\uffa7\064\uffa7\070" +
    "\uffa7\071\uffa7\001\002\000\004\063\354\001\002\000\044" +
    "\004\uffa8\005\uffa8\006\uffa8\007\uffa8\010\uffa8\013\uffa8\015" +
    "\uffa8\020\uffa8\022\uffa8\023\uffa8\026\uffa8\027\uffa8\030\uffa8" +
    "\061\uffa8\064\uffa8\070\uffa8\071\uffa8\001\002\000\006\064" +
    "\357\071\356\001\002\000\004\055\362\001\002\000\004" +
    "\055\360\001\002\000\004\063\361\001\002\000\044\004" +
    "\uffa9\005\uffa9\006\uffa9\007\uffa9\010\uffa9\013\uffa9\015\uffa9" +
    "\020\uffa9\022\uffa9\023\uffa9\026\uffa9\027\uffa9\030\uffa9\061" +
    "\uffa9\064\uffa9\070\uffa9\071\uffa9\001\002\000\004\063\363" +
    "\001\002\000\044\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010" +
    "\uffaa\013\uffaa\015\uffaa\020\uffaa\022\uffaa\023\uffaa\026\uffaa" +
    "\027\uffaa\030\uffaa\061\uffaa\064\uffaa\070\uffaa\071\uffaa\001" +
    "\002\000\046\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3" +
    "\013\uffe3\015\uffe3\020\uffe3\022\uffe3\023\uffe3\026\uffe3\027" +
    "\uffe3\030\uffe3\055\uffe3\061\uffe3\064\uffe3\070\uffe3\071\uffe3" +
    "\001\002\000\004\071\374\001\002\000\012\002\ufffd\004" +
    "\ufffd\007\ufffd\010\ufffd\001\002\000\004\071\ufff8\001\002" +
    "\000\004\071\ufff7\001\002\000\012\002\uffff\004\372\007" +
    "\367\010\370\001\002\000\004\071\ufff9\001\002\000\012" +
    "\002\ufffc\004\ufffc\007\ufffc\010\ufffc\001\002\000\004\054" +
    "\375\001\002\000\012\006\061\007\056\010\041\055\u0100" +
    "\001\002\000\004\071\u010b\001\002\000\004\055\u0107\001" +
    "\002\000\004\060\u0104\001\002\000\006\055\ufff6\062\u0102" +
    "\001\002\000\010\006\061\007\056\010\041\001\002\000" +
    "\004\055\ufff5\001\002\000\040\004\023\005\016\006\061" +
    "\007\056\010\041\013\044\015\034\020\064\022\026\026" +
    "\021\027\022\030\063\064\020\070\031\071\040\001\002" +
    "\000\004\061\u0106\001\002\000\012\002\ufffa\004\ufffa\007" +
    "\ufffa\010\ufffa\001\002\000\004\060\u0108\001\002\000\040" +
    "\004\023\005\016\006\061\007\056\010\041\013\044\015" +
    "\034\020\064\022\026\026\021\027\022\030\063\064\020" +
    "\070\031\071\040\001\002\000\004\061\u010a\001\002\000" +
    "\012\002\ufffb\004\ufffb\007\ufffb\010\ufffb\001\002\000\006" +
    "\055\ufff4\062\ufff4\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010a\000\006\002\003\006\004\001\001\000\002\001" +
    "\001\000\010\004\370\005\365\007\364\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\070\003\046\010\026\013\036\014\057\015\035" +
    "\016\061\017\014\020\051\023\012\030\044\031\023\032" +
    "\053\033\013\046\041\047\016\050\050\051\031\055\027" +
    "\056\047\063\042\064\052\065\056\067\045\071\054\072" +
    "\024\073\034\074\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\052\310\053\307\054\306\001\001\000" +
    "\004\065\205\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\024\253\034\230\035\111\037\102\040\232\042\100\043" +
    "\110\044\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\066\003" +
    "\046\013\162\014\057\015\035\016\061\017\014\020\051" +
    "\023\012\030\044\031\023\032\053\033\013\046\041\047" +
    "\016\050\050\051\031\055\027\056\047\063\042\064\052" +
    "\065\056\067\045\071\054\072\024\073\034\074\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\074\003\046\014\072\015\035\016" +
    "\061\017\014\020\051\023\012\030\044\031\023\032\053" +
    "\033\013\046\041\047\016\050\050\051\031\055\027\056" +
    "\047\057\071\060\067\061\066\062\065\063\042\064\052" +
    "\065\056\067\045\071\054\072\024\073\034\074\032\001" +
    "\001\000\002\001\001\000\072\003\046\014\072\015\035" +
    "\016\061\017\014\020\051\023\012\030\044\031\023\032" +
    "\053\033\013\046\041\047\016\050\050\051\031\055\027" +
    "\056\047\060\152\061\066\062\065\063\042\064\052\065" +
    "\056\067\045\071\054\072\024\073\034\074\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\035\111\037\102\040\104\042\100\043\110\044\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\141\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\035\111\037\102\040\146\042" +
    "\100\043\110\044\105\001\001\000\006\036\117\045\134" +
    "\001\001\000\002\001\001\000\016\035\115\037\102\040" +
    "\114\042\100\043\110\044\105\001\001\000\004\041\141" +
    "\001\001\000\006\036\117\045\134\001\001\000\002\001" +
    "\001\000\004\037\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\035\135\037\102\001\001\000\004" +
    "\036\117\001\001\000\006\035\137\037\102\001\001\000" +
    "\004\036\117\001\001\000\002\001\001\000\016\035\111" +
    "\037\102\040\145\042\100\043\110\044\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\041\141\001\001\000\004\041\141\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\063\042\064\052\065\056\067" +
    "\174\070\173\071\172\072\024\074\175\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\065" +
    "\205\001\001\000\002\001\001\000\004\066\201\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\066\201\001\001\000\002\001\001\000\022\063\042\064" +
    "\052\065\056\067\174\070\211\071\172\072\024\074\175" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\020\227\024\226\025\223" +
    "\026\231\027\224\034\230\035\111\037\102\040\232\042" +
    "\100\043\110\044\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\041\141\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\021\243\022\245" +
    "\024\244\034\230\035\111\037\102\040\232\042\100\043" +
    "\110\044\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\021\247\022" +
    "\245\024\244\034\230\035\111\037\102\040\232\042\100" +
    "\043\110\044\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\063\042\064" +
    "\052\065\056\067\174\070\257\071\172\072\024\074\175" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\020" +
    "\264\024\263\025\262\026\231\027\224\034\230\035\111" +
    "\037\102\040\232\042\100\043\110\044\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\035" +
    "\111\037\102\040\271\042\100\043\110\044\105\001\001" +
    "\000\004\041\141\001\001\000\002\001\001\000\070\003" +
    "\046\010\274\013\036\014\057\015\035\016\061\017\014" +
    "\020\051\023\012\030\044\031\023\032\053\033\013\046" +
    "\041\047\016\050\050\051\031\055\027\056\047\063\042" +
    "\064\052\065\056\067\045\071\054\072\024\073\034\074" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\020\303\024\302\025\301\026\231\027" +
    "\224\034\230\035\111\037\102\040\232\042\100\043\110" +
    "\044\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\052\312\053\307\001" +
    "\001\000\004\054\311\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\035\111\037\102\040\314\042\100\043" +
    "\110\044\105\001\001\000\004\041\141\001\001\000\002" +
    "\001\001\000\070\003\046\010\317\013\036\014\057\015" +
    "\035\016\061\017\014\020\051\023\012\030\044\031\023" +
    "\032\053\033\013\046\041\047\016\050\050\051\031\055" +
    "\027\056\047\063\042\064\052\065\056\067\045\071\054" +
    "\072\024\073\034\074\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\070\003\046\010\322\013\036\014\057" +
    "\015\035\016\061\017\014\020\051\023\012\030\044\031" +
    "\023\032\053\033\013\046\041\047\016\050\050\051\031" +
    "\055\027\056\047\063\042\064\052\065\056\067\045\071" +
    "\054\072\024\073\034\074\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\326\017" +
    "\327\074\330\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\035\111\037" +
    "\102\040\333\042\100\043\110\044\105\001\001\000\004" +
    "\041\141\001\001\000\012\003\326\016\335\017\014\074" +
    "\330\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\074\003\046\014\072\015\035\016\061\017" +
    "\014\020\051\023\012\030\044\031\023\032\053\033\013" +
    "\046\041\047\016\050\050\051\031\055\027\056\047\057" +
    "\341\060\067\061\066\062\065\063\042\064\052\065\056" +
    "\067\045\071\054\072\024\073\034\074\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\372\007\364\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\375\011\376" +
    "\012\u0100\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\375\011\u0102" +
    "\012\u0100\001\001\000\002\001\001\000\070\003\046\010" +
    "\u0104\013\036\014\057\015\035\016\061\017\014\020\051" +
    "\023\012\030\044\031\023\032\053\033\013\046\041\047" +
    "\016\050\050\051\031\055\027\056\047\063\042\064\052" +
    "\065\056\067\045\071\054\072\024\073\034\074\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\070\003\046\010\u0108\013\036\014\057\015\035\016" +
    "\061\017\014\020\051\023\012\030\044\031\023\032\053" +
    "\033\013\046\041\047\016\050\050\051\031\055\027\056" +
    "\047\063\042\064\052\065\056\067\045\071\054\072\024" +
    "\073\034\074\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


    Lexer lex;

    @SuppressWarnings("deprecation")
    public parser(Lexer lex){
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= nuevoLenguaje EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // nuevoLenguaje ::= funcionMain 
            {
              Object RESULT =null;
		System.out.println("Funcion main");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nuevoLenguaje",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // nuevoLenguaje ::= funcionMain funciones 
            {
              Object RESULT =null;
		System.out.println("Funciones y funcion main");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nuevoLenguaje",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // funcionMain ::= INT MAIN LPARENT RPARENT INIBLOQUE bloque FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionMain",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // funciones ::= funcion 
            {
              Object RESULT =null;
		 System.out.println("funcion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // funciones ::= funciones funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // funcion ::= tipoRet ID LPARENT parametros RPARENT INIBLOQUE bloque FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // funcion ::= tipoRet ID LPARENT RPARENT INIBLOQUE bloque FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipoRet ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoRet",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipoRet ::= FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoRet",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipoRet ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoRet",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parametros ::= parametro COMA parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parametro ::= tipoVar ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipoVar ::= FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVar",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipoVar ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVar",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipoVar ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVar",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // bloque ::= sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencias ::= sentencia sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia ::= creaVar 
            {
              Object RESULT =null;
		System.out.println("Sentencia Crea variable");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia ::= asignacion 
            {
              Object RESULT =null;
		System.out.println("Sentencia Asignacion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia ::= llamaFunc 
            {
              Object RESULT =null;
		System.out.println("Sentencia Llamada a funcion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencia ::= output 
            {
              Object RESULT =null;
		System.out.println("Sentencia Salida");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentencia ::= control 
            {
              Object RESULT =null;
		System.out.println("Sentencia Control");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencia ::= returnFunc 
            {
              Object RESULT =null;
		System.out.println("Sentencia Return");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentencia ::= creaArreglo 
            {
              Object RESULT =null;
		System.out.println("Sentencia Creacion de arreglo");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentencia ::= asignaArreglo 
            {
              Object RESULT =null;
		System.out.println("Sentencia Asignacion de arreglo");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // creaVar ::= tipoVar ID FINEXP 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("Variable: "+ n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaVar",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // creaVar ::= tipoSubset ID FINEXP 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("Variable: "+ n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaVar",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // asignacion ::= creaAsignaVar FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // asignacion ::= ID EQUIV literal FINEXP 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("Asignacion: "+ n + " = " + n3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // asignacion ::= ID EQUIV llamaFunc FINEXP 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("Asignacion: "+ n + " = " + n3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // asignacion ::= ID EQUIV input FINEXP 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("Asignacion: "+ n + " = " + n3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // creaAsignaVar ::= tipoVar ID EQUIV literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaAsignaVar",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // creaAsignaVar ::= tipoVar ID EQUIV llamaFunc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaAsignaVar",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // creaAsignaVar ::= tipoVar ID EQUIV input 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaAsignaVar",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // creaAsignaVar ::= tipoSubset ID EQUIV literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaAsignaVar",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // creaAsignaVar ::= tipoSubset ID EQUIV llamaFunc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaAsignaVar",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // creaAsignaVar ::= tipoSubset ID EQUIV input 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaAsignaVar",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // literal ::= operacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // literal ::= CADENA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Cadena: "+ n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // literal ::= CARACTER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Caracter: "+ n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operacion ::= operacionLogica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operacionAritmetica ::= operandoArit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operacionAritmetica ::= operacionAritmetica operadorArit operandoArit 
            {
              Object RESULT =null;
		System.out.println("Operacion Arit +-*/ Arit");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operacionAritmetica ::= LPARENT operacionAritmetica RPARENT 
            {
              Object RESULT =null;
		System.out.println("Operacion Arit (Arit)");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // operadorArit ::= PLUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operadorArit ::= MINUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operadorArit ::= TIMES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operadorArit ::= DIV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // operadorArit ::= POWER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // operadorArit ::= MODULE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // operandoArit ::= ENTERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Entero: "+ n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // operandoArit ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // operandoArit ::= ID 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Entero: "+ n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // operacionRelacional ::= operacionAritmetica operadorRel operacionAritmetica 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println( "Operacion Arit >=<== Arit");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionRelacional",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // operadorRel ::= MAYOR_QUE 
            {
              Object RESULT =null;
		System.out.println(">");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operadorRel ::= MAYOR_IGUAL 
            {
              Object RESULT =null;
		System.out.println(">=");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // operadorRel ::= MENOR_QUE 
            {
              Object RESULT =null;
		System.out.println("<");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // operadorRel ::= MENOR_IGUAL 
            {
              Object RESULT =null;
		System.out.println("<=");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // operadorRel ::= DEQUIV 
            {
              Object RESULT =null;
		System.out.println("==");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operadorRel ::= DIF 
            {
              Object RESULT =null;
		System.out.println("!=");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // operacionLogica ::= operandoLog 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionLogica",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // operacionLogica ::= operacionRelacional 
            {
              Object RESULT =null;
		System.out.println("Operacion Rel");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionLogica",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // operacionLogica ::= operacionAritmetica 
            {
              Object RESULT =null;
		System.out.println("Operacion Arit");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionLogica",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // operacionLogica ::= operacionLogica operadorLog operacionLogica 
            {
              Object RESULT =null;
		System.out.println("Operacion Logica");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionLogica",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operacionLogica ::= LPARENT operacionLogica RPARENT 
            {
              Object RESULT =null;
		System.out.println("Parentesis");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionLogica",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operacionLogica ::= negacion operacionLogica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionLogica",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operandoLog ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoLog",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // operandoLog ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoLog",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operadorLog ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLog",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operadorLog ::= OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLog",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // negacion ::= NOT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("negacion",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // negacion ::= EXCLAMACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("negacion",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // llamaFunc ::= ID LPARENT parametrosLlamada RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamaFunc",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // llamaFunc ::= ID LPARENT RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamaFunc",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // parametrosLlamada ::= parametroLlamada 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosLlamada",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // parametrosLlamada ::= parametroLlamada COMA parametrosLlamada 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosLlamada",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // parametroLlamada ::= literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroLlamada",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // input ::= leeInt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("input",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // input ::= leeFloat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("input",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // leeInt ::= READ_INT LPARENT RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leeInt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // leeFloat ::= READ_FLOAT LPARENT RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leeFloat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // output ::= escribeInt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("output",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // output ::= escribeFloat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("output",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // output ::= escribeString 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("output",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // escribeInt ::= PRINT_INT LPARENT ID RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribeInt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // escribeInt ::= PRINT_INT LPARENT ENTERO RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribeInt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // escribeFloat ::= PRINT_FLOAT LPARENT ID RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribeFloat",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // escribeFloat ::= PRINT_FLOAT LPARENT DECIMAL RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribeFloat",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // escribeString ::= PRINT_STRING LPARENT ID RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribeString",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // escribeString ::= PRINT_STRING LPARENT CADENA RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribeString",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // control ::= condicional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // control ::= ciclo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // condicional ::= condIf condsElif condElse 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // condicional ::= condIf condsElif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // condicional ::= condIf condElse 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // condicional ::= condIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // condIf ::= IF LPARENT operacionLogica RPARENT INIBLOQUE bloque FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condIf",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // condsElif ::= condElif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condsElif",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // condsElif ::= condElif condsElif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condsElif",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // condElif ::= ELIF LPARENT operacionLogica RPARENT INIBLOQUE bloque FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condElif",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // condElse ::= ELSE INIBLOQUE bloque FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condElse",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ciclo ::= cicloDoWhile 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ciclo ::= cicloFor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // cicloDoWhile ::= DO INIBLOQUE bloqueCiclo FINBLOQUE WHILE LPARENT operacionLogica RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cicloDoWhile",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // cicloFor ::= FOR LPARENT creaAsignaVar FINEXP operacionLogica FINEXP asignacion RPARENT INIBLOQUE bloqueCiclo FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cicloFor",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // bloqueCiclo ::= sentenciasCiclo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueCiclo",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // sentenciasCiclo ::= sentenciaCiclo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasCiclo",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // sentenciasCiclo ::= sentenciaCiclo sentenciasCiclo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasCiclo",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // sentenciaCiclo ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaCiclo",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // sentenciaCiclo ::= breakCiclo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaCiclo",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // breakCiclo ::= BREAK FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("breakCiclo",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // returnFunc ::= RETURN literal FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnFunc",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // asignaArreglo ::= asignaElementoArreglo FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaArreglo",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // asignaArreglo ::= creaAsignaArreglo FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaArreglo",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // arregloSinTam ::= tipoSubset ID LPARENT_CUAD RPARENT_CUAD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arregloSinTam",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // creaArreglo ::= tipoArreglo FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaArreglo",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // creaAsignaArreglo ::= tipoArreglo EQUIV INIBLOQUE asignaArreglos FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaAsignaArreglo",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // creaAsignaArreglo ::= arregloSinTam EQUIV INIBLOQUE asignaArreglos FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaAsignaArreglo",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // tipoArreglo ::= tipoSubset expArreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoArreglo",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // asignaArreglos ::= asignaArreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaArreglos",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // asignaArreglos ::= asignaArreglo COMA asignaArreglos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaArreglos",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // asignaArreglo ::= CARACTER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaArreglo",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // asignaArreglo ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaArreglo",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // asignaArreglo ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaArreglo",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // cantidadArreglo ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cantidadArreglo",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // cantidadArreglo ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cantidadArreglo",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // tipoSubset ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoSubset",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // tipoSubset ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoSubset",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // asignaElementoArreglo ::= expArreglo EQUIV ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaElementoArreglo",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // asignaElementoArreglo ::= expArreglo EQUIV CARACTER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaElementoArreglo",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // asignaElementoArreglo ::= expArreglo EQUIV ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaElementoArreglo",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expArreglo ::= ID LPARENT_CUAD cantidadArreglo RPARENT_CUAD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArreglo",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
