
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ParserLexer;

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\221\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\006\010\000\002\004\003\000\002\004\004" +
    "\000\002\005\011\000\002\005\010\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\010\004\000\002" +
    "\011\003\000\002\011\003\000\002\013\003\000\002\013" +
    "\005\000\002\014\004\000\002\014\004\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\012\003\000" +
    "\002\015\003\000\002\015\004\000\002\016\004\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\022\004\000" +
    "\002\022\005\000\002\022\005\000\002\017\004\000\002" +
    "\017\004\000\002\020\004\000\002\020\006\000\002\020" +
    "\006\000\002\020\006\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\037\003\000\002" +
    "\040\003\000\002\040\004\000\002\040\004\000\002\040" +
    "\005\000\002\040\005\000\002\040\004\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\041\003\000" +
    "\002\041\003\000\002\041\003\000\002\042\003\000\002" +
    "\042\003\000\002\042\003\000\002\047\005\000\002\050" +
    "\003\000\002\050\003\000\002\050\003\000\002\050\003" +
    "\000\002\050\003\000\002\050\003\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\043\005\000\002" +
    "\043\005\000\002\043\004\000\002\045\003\000\002\045" +
    "\003\000\002\044\003\000\002\044\003\000\002\046\003" +
    "\000\002\046\003\000\002\023\006\000\002\023\005\000" +
    "\002\024\003\000\002\024\005\000\002\025\003\000\002" +
    "\030\003\000\002\030\003\000\002\031\006\000\002\032" +
    "\006\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\034\007\000\002\034\007\000\002\035\007\000" +
    "\002\035\007\000\002\036\007\000\002\036\007\000\002" +
    "\051\003\000\002\051\003\000\002\053\005\000\002\053" +
    "\004\000\002\053\004\000\002\053\003\000\002\054\011" +
    "\000\002\055\003\000\002\055\004\000\002\056\011\000" +
    "\002\057\006\000\002\052\003\000\002\052\003\000\002" +
    "\060\013\000\002\061\015\000\002\062\003\000\002\063" +
    "\003\000\002\063\004\000\002\064\003\000\002\064\003" +
    "\000\002\065\004\000\002\026\005\000\002\072\004\000" +
    "\002\072\004\000\002\066\006\000\002\077\004\000\002" +
    "\076\007\000\002\076\007\000\002\075\004\000\002\073" +
    "\003\000\002\073\005\000\002\074\003\000\002\074\003" +
    "\000\002\074\003\000\002\071\003\000\002\071\003\000" +
    "\002\100\003\000\002\100\003\000\002\067\005\000\002" +
    "\067\005\000\002\067\005\000\002\070\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0113\000\010\004\012\007\010\010\011\001\002\000" +
    "\004\002\u0115\001\002\000\012\002\000\004\012\007\010" +
    "\010\011\001\002\000\006\014\377\070\375\001\002\000" +
    "\004\054\013\001\002\000\006\014\ufff8\070\ufff8\001\002" +
    "\000\006\014\ufff7\070\ufff7\001\002\000\006\014\ufff9\070" +
    "\ufff9\001\002\000\004\055\014\001\002\000\004\060\015" +
    "\001\002\000\042\003\047\004\025\005\021\006\065\007" +
    "\062\010\042\013\045\015\036\020\071\022\026\026\023" +
    "\027\024\030\070\037\055\040\057\070\040\001\002\000" +
    "\046\003\uffe3\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3" +
    "\013\uffe3\015\uffe3\020\uffe3\022\uffe3\023\uffe3\026\uffe3\027" +
    "\uffe3\030\uffe3\037\uffe3\040\uffe3\061\uffe3\070\uffe3\001\002" +
    "\000\046\003\uffa1\004\uffa1\005\uffa1\006\uffa1\007\uffa1\010" +
    "\uffa1\013\uffa1\015\uffa1\020\uffa1\022\uffa1\023\uffa1\026\uffa1" +
    "\027\uffa1\030\uffa1\037\uffa1\040\uffa1\061\uffa1\070\uffa1\001" +
    "\002\000\004\063\374\001\002\000\004\070\uff75\001\002" +
    "\000\046\003\uff99\004\uff99\005\uff99\006\uff99\007\uff99\010" +
    "\uff99\013\uff99\015\uff99\020\uff99\022\uff99\023\uff99\026\uff99" +
    "\027\uff99\030\uff99\037\uff99\040\uff99\061\uff99\070\uff99\001" +
    "\002\000\004\054\365\001\002\000\004\054\356\001\002" +
    "\000\004\070\uff76\001\002\000\004\054\340\001\002\000" +
    "\004\063\337\001\002\000\046\003\uffa3\004\uffa3\005\uffa3" +
    "\006\uffa3\007\uffa3\010\uffa3\013\uffa3\015\uffa3\020\uffa3\022" +
    "\uffa3\023\uffa3\026\uffa3\027\uffa3\030\uffa3\037\uffa3\040\uffa3" +
    "\061\uffa3\070\uffa3\001\002\000\004\061\336\001\002\000" +
    "\046\003\uff8f\004\uff8f\005\uff8f\006\uff8f\007\uff8f\010\uff8f" +
    "\013\uff8f\015\uff8f\020\uff8f\022\uff8f\023\uff8f\026\uff8f\027" +
    "\uff8f\030\uff8f\037\uff8f\040\uff8f\061\uff8f\070\uff8f\001\002" +
    "\000\052\003\uff95\004\uff95\005\uff95\006\uff95\007\uff95\010" +
    "\uff95\013\uff95\015\uff95\016\320\017\316\020\uff95\022\uff95" +
    "\023\uff95\026\uff95\027\uff95\030\uff95\037\uff95\040\uff95\061" +
    "\uff95\070\uff95\001\002\000\004\070\312\001\002\000\046" +
    "\003\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\013" +
    "\uffe2\015\uffe2\020\uffe2\022\uffe2\023\uffe2\026\uffe2\027\uffe2" +
    "\030\uffe2\037\uffe2\040\uffe2\061\uffe2\070\uffe2\001\002\000" +
    "\004\054\304\001\002\000\006\053\277\063\300\001\002" +
    "\000\012\053\237\054\241\056\242\063\240\001\002\000" +
    "\004\061\uffec\001\002\000\004\070\uffed\001\002\000\046" +
    "\003\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\013" +
    "\uffe4\015\uffe4\020\uffe4\022\uffe4\023\uffe4\026\uffe4\027\uffe4" +
    "\030\uffe4\037\uffe4\040\uffe4\061\uffe4\070\uffe4\001\002\000" +
    "\004\053\233\001\002\000\036\003\226\011\111\012\117" +
    "\032\104\037\115\040\110\043\121\044\106\054\124\064" +
    "\113\065\105\066\224\067\225\070\120\001\002\000\046" +
    "\003\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\013" +
    "\uffe5\015\uffe5\020\uffe5\022\uffe5\023\uffe5\026\uffe5\027\uffe5" +
    "\030\uffe5\037\uffe5\040\uffe5\061\uffe5\070\uffe5\001\002\000" +
    "\046\003\uffe0\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0" +
    "\013\uffe0\015\uffe0\020\uffe0\022\uffe0\023\uffe0\026\uffe0\027" +
    "\uffe0\030\uffe0\037\uffe0\040\uffe0\061\uffe0\070\uffe0\001\002" +
    "\000\046\003\uffe1\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010" +
    "\uffe1\013\uffe1\015\uffe1\020\uffe1\022\uffe1\023\uffe1\026\uffe1" +
    "\027\uffe1\030\uffe1\037\uffe1\040\uffe1\061\uffe1\070\uffe1\001" +
    "\002\000\004\070\223\001\002\000\046\003\uff8e\004\uff8e" +
    "\005\uff8e\006\uff8e\007\uff8e\010\uff8e\013\uff8e\015\uff8e\020" +
    "\uff8e\022\uff8e\023\uff8e\026\uff8e\027\uff8e\030\uff8e\037\uff8e" +
    "\040\uff8e\061\uff8e\070\uff8e\001\002\000\046\003\uff9a\004" +
    "\uff9a\005\uff9a\006\uff9a\007\uff9a\010\uff9a\013\uff9a\015\uff9a" +
    "\020\uff9a\022\uff9a\023\uff9a\026\uff9a\027\uff9a\030\uff9a\037" +
    "\uff9a\040\uff9a\061\uff9a\070\uff9a\001\002\000\046\003\uffe6" +
    "\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\013\uffe6\015" +
    "\uffe6\020\uffe6\022\uffe6\023\uffe6\026\uffe6\027\uffe6\030\uffe6" +
    "\037\uffe6\040\uffe6\061\uffe6\070\uffe6\001\002\000\004\070" +
    "\221\001\002\000\004\063\220\001\002\000\004\070\216" +
    "\001\002\000\046\003\uffa2\004\uffa2\005\uffa2\006\uffa2\007" +
    "\uffa2\010\uffa2\013\uffa2\015\uffa2\020\uffa2\022\uffa2\023\uffa2" +
    "\026\uffa2\027\uffa2\030\uffa2\037\uffa2\040\uffa2\061\uffa2\070" +
    "\uffa2\001\002\000\006\053\203\063\204\001\002\000\004" +
    "\070\uffef\001\002\000\004\053\177\001\002\000\044\003" +
    "\047\004\025\005\021\006\065\007\062\010\042\013\045" +
    "\015\036\020\071\022\026\026\023\027\024\030\070\037" +
    "\055\040\057\061\uffeb\070\040\001\002\000\004\070\uffee" +
    "\001\002\000\046\003\uffe8\004\uffe8\005\uffe8\006\uffe8\007" +
    "\uffe8\010\uffe8\013\uffe8\015\uffe8\020\uffe8\022\uffe8\023\uffe8" +
    "\026\uffe8\027\uffe8\030\uffe8\037\uffe8\040\uffe8\061\uffe8\070" +
    "\uffe8\001\002\000\046\003\uffe7\004\uffe7\005\uffe7\006\uffe7" +
    "\007\uffe7\010\uffe7\013\uffe7\015\uffe7\020\uffe7\022\uffe7\023" +
    "\uffe7\026\uffe7\027\uffe7\030\uffe7\037\uffe7\040\uffe7\061\uffe7" +
    "\070\uffe7\001\002\000\004\054\167\001\002\000\004\060" +
    "\072\001\002\000\044\003\047\004\025\005\021\006\065" +
    "\007\062\010\042\013\045\015\036\020\071\022\026\023" +
    "\076\026\023\027\024\030\070\037\055\040\057\070\040" +
    "\001\002\000\046\003\uff87\004\uff87\005\uff87\006\uff87\007" +
    "\uff87\010\uff87\013\uff87\015\uff87\020\uff87\022\uff87\023\uff87" +
    "\026\uff87\027\uff87\030\uff87\037\uff87\040\uff87\061\uff87\070" +
    "\uff87\001\002\000\046\003\047\004\025\005\021\006\065" +
    "\007\062\010\042\013\045\015\036\020\071\022\026\023" +
    "\076\026\023\027\024\030\070\037\055\040\057\061\uff8a" +
    "\070\040\001\002\000\004\061\uff8b\001\002\000\004\063" +
    "\165\001\002\000\004\061\101\001\002\000\046\003\uff88" +
    "\004\uff88\005\uff88\006\uff88\007\uff88\010\uff88\013\uff88\015" +
    "\uff88\020\uff88\022\uff88\023\uff88\026\uff88\027\uff88\030\uff88" +
    "\037\uff88\040\uff88\061\uff88\070\uff88\001\002\000\004\021" +
    "\102\001\002\000\004\054\103\001\002\000\030\011\111" +
    "\012\117\032\104\037\115\040\110\043\121\044\106\054" +
    "\124\064\113\065\105\070\120\001\002\000\020\032\104" +
    "\037\115\040\110\054\147\064\113\065\105\070\120\001" +
    "\002\000\044\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1" +
    "\036\uffc1\041\uffc1\042\uffc1\045\uffc1\046\uffc1\047\uffc1\050" +
    "\uffc1\051\uffc1\052\uffc1\055\uffc1\062\uffc1\063\uffc1\001\002" +
    "\000\030\011\uffad\012\uffad\032\uffad\037\uffad\040\uffad\043" +
    "\uffad\044\uffad\054\uffad\064\uffad\065\uffad\070\uffad\001\002" +
    "\000\014\041\uffb8\042\uffb8\055\uffb8\062\uffb8\063\uffb8\001" +
    "\002\000\010\064\113\065\105\070\120\001\002\000\014" +
    "\041\uffb2\042\uffb2\055\uffb2\062\uffb2\063\uffb2\001\002\000" +
    "\044\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce" +
    "\041\uffce\042\uffce\045\uffce\046\uffce\047\uffce\050\uffce\051" +
    "\uffce\052\uffce\055\uffce\062\uffce\063\uffce\001\002\000\044" +
    "\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\041" +
    "\uffc2\042\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2" +
    "\052\uffc2\055\uffc2\062\uffc2\063\uffc2\001\002\000\010\041" +
    "\154\042\155\055\161\001\002\000\010\064\113\065\105" +
    "\070\120\001\002\000\014\041\uffb7\042\uffb7\055\uffb7\062" +
    "\uffb7\063\uffb7\001\002\000\014\041\uffb1\042\uffb1\055\uffb1" +
    "\062\uffb1\063\uffb1\001\002\000\044\031\uffc0\032\uffc0\033" +
    "\uffc0\034\uffc0\035\uffc0\036\uffc0\041\uffc0\042\uffc0\045\uffc0" +
    "\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\055\uffc0\062" +
    "\uffc0\063\uffc0\001\002\000\030\011\uffae\012\uffae\032\uffae" +
    "\037\uffae\040\uffae\043\uffae\044\uffae\054\uffae\064\uffae\065" +
    "\uffae\070\uffae\001\002\000\030\011\111\012\117\032\104" +
    "\037\115\040\110\043\121\044\106\054\124\064\113\065" +
    "\105\070\120\001\002\000\044\031\136\032\127\033\142" +
    "\034\140\035\141\036\132\041\uffb6\042\uffb6\045\133\046" +
    "\134\047\137\050\144\051\143\052\135\055\uffb6\062\uffb6" +
    "\063\uffb6\001\002\000\030\011\111\012\117\032\104\037" +
    "\115\040\110\043\121\044\106\054\124\064\113\065\105" +
    "\070\120\001\002\000\010\041\154\042\155\055\153\001" +
    "\002\000\040\031\136\032\127\033\142\034\140\035\141" +
    "\036\132\041\uffb6\042\uffb6\045\133\046\134\047\137\050" +
    "\144\051\143\052\135\055\130\001\002\000\020\032\uffc7" +
    "\037\uffc7\040\uffc7\054\uffc7\064\uffc7\065\uffc7\070\uffc7\001" +
    "\002\000\044\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca" +
    "\036\uffca\041\uffca\042\uffca\045\uffca\046\uffca\047\uffca\050" +
    "\uffca\051\uffca\052\uffca\055\uffca\062\uffca\063\uffca\001\002" +
    "\000\020\032\104\037\115\040\110\054\147\064\113\065" +
    "\105\070\120\001\002\000\020\032\uffc3\037\uffc3\040\uffc3" +
    "\054\uffc3\064\uffc3\065\uffc3\070\uffc3\001\002\000\020\032" +
    "\uffbe\037\uffbe\040\uffbe\054\uffbe\064\uffbe\065\uffbe\070\uffbe" +
    "\001\002\000\020\032\uffbd\037\uffbd\040\uffbd\054\uffbd\064" +
    "\uffbd\065\uffbd\070\uffbd\001\002\000\020\032\uffb9\037\uffb9" +
    "\040\uffb9\054\uffb9\064\uffb9\065\uffb9\070\uffb9\001\002\000" +
    "\020\032\uffc8\037\uffc8\040\uffc8\054\uffc8\064\uffc8\065\uffc8" +
    "\070\uffc8\001\002\000\020\032\uffbc\037\uffbc\040\uffbc\054" +
    "\uffbc\064\uffbc\065\uffbc\070\uffbc\001\002\000\020\032\uffc5" +
    "\037\uffc5\040\uffc5\054\uffc5\064\uffc5\065\uffc5\070\uffc5\001" +
    "\002\000\020\032\uffc4\037\uffc4\040\uffc4\054\uffc4\064\uffc4" +
    "\065\uffc4\070\uffc4\001\002\000\020\032\uffc6\037\uffc6\040" +
    "\uffc6\054\uffc6\064\uffc6\065\uffc6\070\uffc6\001\002\000\020" +
    "\032\uffba\037\uffba\040\uffba\054\uffba\064\uffba\065\uffba\070" +
    "\uffba\001\002\000\020\032\uffbb\037\uffbb\040\uffbb\054\uffbb" +
    "\064\uffbb\065\uffbb\070\uffbb\001\002\000\020\032\104\037" +
    "\115\040\110\054\147\064\113\065\105\070\120\001\002" +
    "\000\030\031\136\032\127\033\142\034\140\035\141\036" +
    "\132\041\uffbf\042\uffbf\055\uffbf\062\uffbf\063\uffbf\001\002" +
    "\000\020\032\104\037\115\040\110\054\147\064\113\065" +
    "\105\070\120\001\002\000\020\031\136\032\127\033\142" +
    "\034\140\035\141\036\132\055\130\001\002\000\044\031" +
    "\136\032\127\033\142\034\140\035\141\036\132\041\uffcb" +
    "\042\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052" +
    "\uffcb\055\uffcb\062\uffcb\063\uffcb\001\002\000\030\011\111" +
    "\012\117\032\104\037\115\040\110\043\121\044\106\054" +
    "\124\064\113\065\105\070\120\001\002\000\014\041\uffb4" +
    "\042\uffb4\055\uffb4\062\uffb4\063\uffb4\001\002\000\030\011" +
    "\uffb0\012\uffb0\032\uffb0\037\uffb0\040\uffb0\043\uffb0\044\uffb0" +
    "\054\uffb0\064\uffb0\065\uffb0\070\uffb0\001\002\000\030\011" +
    "\uffaf\012\uffaf\032\uffaf\037\uffaf\040\uffaf\043\uffaf\044\uffaf" +
    "\054\uffaf\064\uffaf\065\uffaf\070\uffaf\001\002\000\014\041" +
    "\154\042\155\055\uffb5\062\uffb5\063\uffb5\001\002\000\014" +
    "\041\154\042\155\055\uffb3\062\uffb3\063\uffb3\001\002\000" +
    "\044\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd" +
    "\041\uffcd\042\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051" +
    "\uffcd\052\uffcd\055\uffcd\062\uffcd\063\uffcd\001\002\000\004" +
    "\063\162\001\002\000\046\003\uff8d\004\uff8d\005\uff8d\006" +
    "\uff8d\007\uff8d\010\uff8d\013\uff8d\015\uff8d\020\uff8d\022\uff8d" +
    "\023\uff8d\026\uff8d\027\uff8d\030\uff8d\037\uff8d\040\uff8d\061" +
    "\uff8d\070\uff8d\001\002\000\044\031\uffcc\032\uffcc\033\uffcc" +
    "\034\uffcc\035\uffcc\036\uffcc\041\uffcc\042\uffcc\045\uffcc\046" +
    "\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\055\uffcc\062\uffcc" +
    "\063\uffcc\001\002\000\044\031\uffc9\032\uffc9\033\142\034" +
    "\140\035\141\036\132\041\uffc9\042\uffc9\045\uffc9\046\uffc9" +
    "\047\uffc9\050\uffc9\051\uffc9\052\uffc9\055\uffc9\062\uffc9\063" +
    "\uffc9\001\002\000\046\003\uff86\004\uff86\005\uff86\006\uff86" +
    "\007\uff86\010\uff86\013\uff86\015\uff86\020\uff86\022\uff86\023" +
    "\uff86\026\uff86\027\uff86\030\uff86\037\uff86\040\uff86\061\uff86" +
    "\070\uff86\001\002\000\004\061\uff89\001\002\000\006\066" +
    "\171\070\170\001\002\000\004\055\174\001\002\000\004" +
    "\055\172\001\002\000\004\063\173\001\002\000\046\003" +
    "\uff9b\004\uff9b\005\uff9b\006\uff9b\007\uff9b\010\uff9b\013\uff9b" +
    "\015\uff9b\020\uff9b\022\uff9b\023\uff9b\026\uff9b\027\uff9b\030" +
    "\uff9b\037\uff9b\040\uff9b\061\uff9b\070\uff9b\001\002\000\004" +
    "\063\175\001\002\000\046\003\uff9c\004\uff9c\005\uff9c\006" +
    "\uff9c\007\uff9c\010\uff9c\013\uff9c\015\uff9c\020\uff9c\022\uff9c" +
    "\023\uff9c\026\uff9c\027\uff9c\030\uff9c\037\uff9c\040\uff9c\061" +
    "\uff9c\070\uff9c\001\002\000\004\061\uffea\001\002\000\010" +
    "\064\202\067\201\070\200\001\002\000\004\063\uff72\001" +
    "\002\000\004\063\uff73\001\002\000\004\063\uff74\001\002" +
    "\000\004\060\205\001\002\000\046\003\uff81\004\uff81\005" +
    "\uff81\006\uff81\007\uff81\010\uff81\013\uff81\015\uff81\020\uff81" +
    "\022\uff81\023\uff81\026\uff81\027\uff81\030\uff81\037\uff81\040" +
    "\uff81\061\uff81\070\uff81\001\002\000\010\064\212\067\211" +
    "\070\206\001\002\000\006\061\uff79\062\uff79\001\002\000" +
    "\006\061\uff7d\062\214\001\002\000\004\061\213\001\002" +
    "\000\006\061\uff7b\062\uff7b\001\002\000\006\061\uff7a\062" +
    "\uff7a\001\002\000\004\063\uff80\001\002\000\010\064\212" +
    "\067\211\070\206\001\002\000\004\061\uff7c\001\002\000" +
    "\004\063\217\001\002\000\046\003\uffdd\004\uffdd\005\uffdd" +
    "\006\uffdd\007\uffdd\010\uffdd\013\uffdd\015\uffdd\020\uffdd\022" +
    "\uffdd\023\uffdd\026\uffdd\027\uffdd\030\uffdd\037\uffdd\040\uffdd" +
    "\061\uffdd\070\uffdd\001\002\000\046\003\uff84\004\uff84\005" +
    "\uff84\006\uff84\007\uff84\010\uff84\013\uff84\015\uff84\020\uff84" +
    "\022\uff84\023\uff84\026\uff84\027\uff84\030\uff84\037\uff84\040" +
    "\uff84\061\uff84\070\uff84\001\002\000\004\063\222\001\002" +
    "\000\046\003\uffde\004\uffde\005\uffde\006\uffde\007\uffde\010" +
    "\uffde\013\uffde\015\uffde\020\uffde\022\uffde\023\uffde\026\uffde" +
    "\027\uffde\030\uffde\037\uffde\040\uffde\061\uffde\070\uffde\001" +
    "\002\000\006\053\uffdc\063\uffdc\001\002\000\010\055\uffd2" +
    "\062\uffd2\063\uffd2\001\002\000\010\055\uffd1\062\uffd1\063" +
    "\uffd1\001\002\000\010\055\uffd0\062\uffd0\063\uffd0\001\002" +
    "\000\004\063\232\001\002\000\010\055\uffd3\062\uffd3\063" +
    "\uffd3\001\002\000\014\041\154\042\155\055\uffcf\062\uffcf" +
    "\063\uffcf\001\002\000\046\003\uff85\004\uff85\005\uff85\006" +
    "\uff85\007\uff85\010\uff85\013\uff85\015\uff85\020\uff85\022\uff85" +
    "\023\uff85\026\uff85\027\uff85\030\uff85\037\uff85\040\uff85\061" +
    "\uff85\070\uff85\001\002\000\004\060\234\001\002\000\010" +
    "\064\212\067\211\070\206\001\002\000\004\061\236\001" +
    "\002\000\004\063\uff7f\001\002\000\042\003\226\011\111" +
    "\012\117\024\262\025\257\032\104\037\115\040\110\043" +
    "\121\044\106\054\124\064\113\065\105\066\224\067\225" +
    "\070\256\001\002\000\046\003\uffdf\004\uffdf\005\uffdf\006" +
    "\uffdf\007\uffdf\010\uffdf\013\uffdf\015\uffdf\020\uffdf\022\uffdf" +
    "\023\uffdf\026\uffdf\027\uffdf\030\uffdf\037\uffdf\040\uffdf\061" +
    "\uffdf\070\uffdf\001\002\000\040\003\226\011\111\012\117" +
    "\032\104\037\115\040\110\043\121\044\106\054\124\055" +
    "\247\064\113\065\105\066\224\067\225\070\120\001\002" +
    "\000\006\064\245\070\243\001\002\000\004\057\uff77\001" +
    "\002\000\004\057\246\001\002\000\004\057\uff78\001\002" +
    "\000\006\053\uff71\063\uff71\001\002\000\050\003\uffab\004" +
    "\uffab\005\uffab\006\uffab\007\uffab\010\uffab\013\uffab\015\uffab" +
    "\020\uffab\022\uffab\023\uffab\026\uffab\027\uffab\030\uffab\037" +
    "\uffab\040\uffab\061\uffab\063\uffab\070\uffab\001\002\000\004" +
    "\055\255\001\002\000\006\055\uffa8\062\uffa8\001\002\000" +
    "\006\055\uffaa\062\253\001\002\000\036\003\226\011\111" +
    "\012\117\032\104\037\115\040\110\043\121\044\106\054" +
    "\124\064\113\065\105\066\224\067\225\070\120\001\002" +
    "\000\004\055\uffa9\001\002\000\050\003\uffac\004\uffac\005" +
    "\uffac\006\uffac\007\uffac\010\uffac\013\uffac\015\uffac\020\uffac" +
    "\022\uffac\023\uffac\026\uffac\027\uffac\030\uffac\037\uffac\040" +
    "\uffac\061\uffac\063\uffac\070\uffac\001\002\000\042\031\uffc0" +
    "\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\041\uffc0\042" +
    "\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0" +
    "\054\241\063\uffc0\001\002\000\004\054\274\001\002\000" +
    "\004\063\273\001\002\000\004\063\uffa6\001\002\000\004" +
    "\054\270\001\002\000\004\063\267\001\002\000\004\063" +
    "\266\001\002\000\004\063\uffa7\001\002\000\050\003\uffd8" +
    "\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\013\uffd8\015" +
    "\uffd8\020\uffd8\022\uffd8\023\uffd8\026\uffd8\027\uffd8\030\uffd8" +
    "\037\uffd8\040\uffd8\055\uffd8\061\uffd8\070\uffd8\001\002\000" +
    "\050\003\uffd9\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9" +
    "\013\uffd9\015\uffd9\020\uffd9\022\uffd9\023\uffd9\026\uffd9\027" +
    "\uffd9\030\uffd9\037\uffd9\040\uffd9\055\uffd9\061\uffd9\070\uffd9" +
    "\001\002\000\004\055\271\001\002\000\004\063\272\001" +
    "\002\000\004\063\uffa5\001\002\000\050\003\uffd7\004\uffd7" +
    "\005\uffd7\006\uffd7\007\uffd7\010\uffd7\013\uffd7\015\uffd7\020" +
    "\uffd7\022\uffd7\023\uffd7\026\uffd7\027\uffd7\030\uffd7\037\uffd7" +
    "\040\uffd7\055\uffd7\061\uffd7\070\uffd7\001\002\000\004\055" +
    "\275\001\002\000\004\063\276\001\002\000\004\063\uffa4" +
    "\001\002\000\042\003\226\011\111\012\117\024\262\025" +
    "\257\032\104\037\115\040\110\043\121\044\106\054\124" +
    "\064\113\065\105\066\224\067\225\070\256\001\002\000" +
    "\046\003\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9" +
    "\013\uffe9\015\uffe9\020\uffe9\022\uffe9\023\uffe9\026\uffe9\027" +
    "\uffe9\030\uffe9\037\uffe9\040\uffe9\061\uffe9\070\uffe9\001\002" +
    "\000\004\063\uffd4\001\002\000\004\063\uffd6\001\002\000" +
    "\004\063\uffd5\001\002\000\030\011\111\012\117\032\104" +
    "\037\115\040\110\043\121\044\106\054\124\064\113\065" +
    "\105\070\120\001\002\000\010\041\154\042\155\055\306" +
    "\001\002\000\004\060\307\001\002\000\042\003\047\004" +
    "\025\005\021\006\065\007\062\010\042\013\045\015\036" +
    "\020\071\022\026\026\023\027\024\030\070\037\055\040" +
    "\057\070\040\001\002\000\004\061\311\001\002\000\052" +
    "\003\uff94\004\uff94\005\uff94\006\uff94\007\uff94\010\uff94\013" +
    "\uff94\015\uff94\016\uff94\017\uff94\020\uff94\022\uff94\023\uff94" +
    "\026\uff94\027\uff94\030\uff94\037\uff94\040\uff94\061\uff94\070" +
    "\uff94\001\002\000\010\053\uffdb\056\314\063\uffdb\001\002" +
    "\000\006\053\uff7e\063\uff7e\001\002\000\010\057\315\064" +
    "\245\070\243\001\002\000\004\053\uff82\001\002\000\004" +
    "\060\333\001\002\000\046\003\uff96\004\uff96\005\uff96\006" +
    "\uff96\007\uff96\010\uff96\013\uff96\015\uff96\020\uff96\022\uff96" +
    "\023\uff96\026\uff96\027\uff96\030\uff96\037\uff96\040\uff96\061" +
    "\uff96\070\uff96\001\002\000\004\054\325\001\002\000\052" +
    "\003\uff93\004\uff93\005\uff93\006\uff93\007\uff93\010\uff93\013" +
    "\uff93\015\uff93\016\320\017\uff93\020\uff93\022\uff93\023\uff93" +
    "\026\uff93\027\uff93\030\uff93\037\uff93\040\uff93\061\uff93\070" +
    "\uff93\001\002\000\050\003\uff97\004\uff97\005\uff97\006\uff97" +
    "\007\uff97\010\uff97\013\uff97\015\uff97\017\316\020\uff97\022" +
    "\uff97\023\uff97\026\uff97\027\uff97\030\uff97\037\uff97\040\uff97" +
    "\061\uff97\070\uff97\001\002\000\046\003\uff98\004\uff98\005" +
    "\uff98\006\uff98\007\uff98\010\uff98\013\uff98\015\uff98\020\uff98" +
    "\022\uff98\023\uff98\026\uff98\027\uff98\030\uff98\037\uff98\040" +
    "\uff98\061\uff98\070\uff98\001\002\000\050\003\uff92\004\uff92" +
    "\005\uff92\006\uff92\007\uff92\010\uff92\013\uff92\015\uff92\017" +
    "\uff92\020\uff92\022\uff92\023\uff92\026\uff92\027\uff92\030\uff92" +
    "\037\uff92\040\uff92\061\uff92\070\uff92\001\002\000\030\011" +
    "\111\012\117\032\104\037\115\040\110\043\121\044\106" +
    "\054\124\064\113\065\105\070\120\001\002\000\010\041" +
    "\154\042\155\055\327\001\002\000\004\060\330\001\002" +
    "\000\042\003\047\004\025\005\021\006\065\007\062\010" +
    "\042\013\045\015\036\020\071\022\026\026\023\027\024" +
    "\030\070\037\055\040\057\070\040\001\002\000\004\061" +
    "\332\001\002\000\052\003\uff91\004\uff91\005\uff91\006\uff91" +
    "\007\uff91\010\uff91\013\uff91\015\uff91\016\uff91\017\uff91\020" +
    "\uff91\022\uff91\023\uff91\026\uff91\027\uff91\030\uff91\037\uff91" +
    "\040\uff91\061\uff91\070\uff91\001\002\000\042\003\047\004" +
    "\025\005\021\006\065\007\062\010\042\013\045\015\036" +
    "\020\071\022\026\026\023\027\024\030\070\037\055\040" +
    "\057\070\040\001\002\000\004\061\335\001\002\000\046" +
    "\003\uff90\004\uff90\005\uff90\006\uff90\007\uff90\010\uff90\013" +
    "\uff90\015\uff90\020\uff90\022\uff90\023\uff90\026\uff90\027\uff90" +
    "\030\uff90\037\uff90\040\uff90\061\uff90\070\uff90\001\002\000" +
    "\012\002\ufffe\004\ufffe\007\ufffe\010\ufffe\001\002\000\046" +
    "\003\uff83\004\uff83\005\uff83\006\uff83\007\uff83\010\uff83\013" +
    "\uff83\015\uff83\020\uff83\022\uff83\023\uff83\026\uff83\027\uff83" +
    "\030\uff83\037\uff83\040\uff83\061\uff83\070\uff83\001\002\000" +
    "\014\004\025\005\021\006\065\007\062\010\042\001\002" +
    "\000\004\063\345\001\002\000\004\070\344\001\002\000" +
    "\004\053\277\001\002\000\004\053\uffdb\001\002\000\030" +
    "\011\111\012\117\032\104\037\115\040\110\043\121\044" +
    "\106\054\124\064\113\065\105\070\120\001\002\000\010" +
    "\041\154\042\155\063\347\001\002\000\016\004\025\005" +
    "\021\006\065\007\062\010\042\070\351\001\002\000\004" +
    "\055\352\001\002\000\004\053\237\001\002\000\004\060" +
    "\353\001\002\000\044\003\047\004\025\005\021\006\065" +
    "\007\062\010\042\013\045\015\036\020\071\022\026\023" +
    "\076\026\023\027\024\030\070\037\055\040\057\070\040" +
    "\001\002\000\004\061\355\001\002\000\046\003\uff8c\004" +
    "\uff8c\005\uff8c\006\uff8c\007\uff8c\010\uff8c\013\uff8c\015\uff8c" +
    "\020\uff8c\022\uff8c\023\uff8c\026\uff8c\027\uff8c\030\uff8c\037" +
    "\uff8c\040\uff8c\061\uff8c\070\uff8c\001\002\000\006\065\360" +
    "\070\357\001\002\000\004\055\363\001\002\000\004\055" +
    "\361\001\002\000\004\063\362\001\002\000\046\003\uff9d" +
    "\004\uff9d\005\uff9d\006\uff9d\007\uff9d\010\uff9d\013\uff9d\015" +
    "\uff9d\020\uff9d\022\uff9d\023\uff9d\026\uff9d\027\uff9d\030\uff9d" +
    "\037\uff9d\040\uff9d\061\uff9d\070\uff9d\001\002\000\004\063" +
    "\364\001\002\000\046\003\uff9e\004\uff9e\005\uff9e\006\uff9e" +
    "\007\uff9e\010\uff9e\013\uff9e\015\uff9e\020\uff9e\022\uff9e\023" +
    "\uff9e\026\uff9e\027\uff9e\030\uff9e\037\uff9e\040\uff9e\061\uff9e" +
    "\070\uff9e\001\002\000\006\064\367\070\366\001\002\000" +
    "\004\055\372\001\002\000\004\055\370\001\002\000\004" +
    "\063\371\001\002\000\046\003\uff9f\004\uff9f\005\uff9f\006" +
    "\uff9f\007\uff9f\010\uff9f\013\uff9f\015\uff9f\020\uff9f\022\uff9f" +
    "\023\uff9f\026\uff9f\027\uff9f\030\uff9f\037\uff9f\040\uff9f\061" +
    "\uff9f\070\uff9f\001\002\000\004\063\373\001\002\000\046" +
    "\003\uffa0\004\uffa0\005\uffa0\006\uffa0\007\uffa0\010\uffa0\013" +
    "\uffa0\015\uffa0\020\uffa0\022\uffa0\023\uffa0\026\uffa0\027\uffa0" +
    "\030\uffa0\037\uffa0\040\uffa0\061\uffa0\070\uffa0\001\002\000" +
    "\050\003\uffda\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda" +
    "\013\uffda\015\uffda\020\uffda\022\uffda\023\uffda\026\uffda\027" +
    "\uffda\030\uffda\037\uffda\040\uffda\055\uffda\061\uffda\070\uffda" +
    "\001\002\000\004\054\ufff4\001\002\000\004\054\ufff6\001" +
    "\002\000\004\054\ufff5\001\002\000\012\002\ufffd\004\ufffd" +
    "\007\ufffd\010\ufffd\001\002\000\004\054\u0104\001\002\000" +
    "\012\002\uffff\004\012\007\010\010\011\001\002\000\012" +
    "\002\ufffc\004\ufffc\007\ufffc\010\ufffc\001\002\000\016\004" +
    "\025\005\021\006\065\007\062\010\042\055\u0105\001\002" +
    "\000\004\060\u0112\001\002\000\006\055\ufff3\062\u0110\001" +
    "\002\000\004\070\u010f\001\002\000\004\070\u010e\001\002" +
    "\000\004\055\u010a\001\002\000\004\060\u010b\001\002\000" +
    "\042\003\047\004\025\005\021\006\065\007\062\010\042" +
    "\013\045\015\036\020\071\022\026\026\023\027\024\030" +
    "\070\037\055\040\057\070\040\001\002\000\004\061\u010d" +
    "\001\002\000\012\002\ufffb\004\ufffb\007\ufffb\010\ufffb\001" +
    "\002\000\006\055\ufff0\062\ufff0\001\002\000\006\055\ufff1" +
    "\062\ufff1\001\002\000\014\004\025\005\021\006\065\007" +
    "\062\010\042\001\002\000\004\055\ufff2\001\002\000\042" +
    "\003\047\004\025\005\021\006\065\007\062\010\042\013" +
    "\045\015\036\020\071\022\026\026\023\027\024\030\070" +
    "\037\055\040\057\070\040\001\002\000\004\061\u0114\001" +
    "\002\000\012\002\ufffa\004\ufffa\007\ufffa\010\ufffa\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0113\000\012\002\003\006\004\007\005\010\006\001" +
    "\001\000\002\001\001\000\012\004\u0101\005\377\007\005" +
    "\010\u0100\001\001\000\004\011\375\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\072\003\050\012" +
    "\030\015\040\016\063\017\036\020\066\021\017\022\065" +
    "\023\053\026\015\033\045\034\027\035\057\036\016\051" +
    "\042\052\021\053\052\054\032\060\031\061\051\066\043" +
    "\067\055\070\062\072\047\075\060\076\026\077\034\100" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\055\321\056\320\057\316\001\001" +
    "\000\004\070\312\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\027\226\037\227\040\122\042\111\043\230\045\106" +
    "\046\121\047\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\070\003" +
    "\050\015\175\016\063\017\036\020\066\021\017\022\065" +
    "\023\053\026\015\033\045\034\027\035\057\036\016\051" +
    "\042\052\021\053\052\054\032\060\031\061\051\066\043" +
    "\067\055\070\062\072\047\075\060\076\026\077\034\100" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\076\003" +
    "\050\016\077\017\036\020\066\021\017\022\065\023\053" +
    "\026\015\033\045\034\027\035\057\036\016\051\042\052" +
    "\021\053\052\054\032\060\031\061\051\062\076\063\074" +
    "\064\073\065\072\066\043\067\055\070\062\072\047\075" +
    "\060\076\026\077\034\100\033\001\001\000\002\001\001" +
    "\000\074\003\050\016\077\017\036\020\066\021\017\022" +
    "\065\023\053\026\015\033\045\034\027\035\057\036\016" +
    "\051\042\052\021\053\052\054\032\060\031\061\051\063" +
    "\165\064\073\065\072\066\043\067\055\070\062\072\047" +
    "\075\060\076\026\077\034\100\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\040\122\042" +
    "\111\043\113\045\106\046\121\047\115\001\001\000\006" +
    "\040\163\042\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\042\162\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\044" +
    "\151\001\001\000\004\042\157\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\040\122\042\111\043\156\045\106\046\121\047\115" +
    "\001\001\000\006\041\130\050\144\001\001\000\016\040" +
    "\125\042\111\043\124\045\106\046\121\047\115\001\001" +
    "\000\004\044\151\001\001\000\006\041\130\050\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\040\150" +
    "\042\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\040\145" +
    "\042\111\001\001\000\004\041\130\001\001\000\006\040" +
    "\147\042\111\001\001\000\004\041\130\001\001\000\004" +
    "\041\130\001\001\000\016\040\122\042\111\043\155\045" +
    "\106\046\121\047\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\044\151\001\001\000" +
    "\004\044\151\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\041\130\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\073\207\074\206\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\073\214\074\206\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\044" +
    "\151\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\073\234\074\206\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\023\263\027\262\030\257\031\264\032\260" +
    "\037\227\040\122\042\111\043\230\045\106\046\121\047" +
    "\115\001\001\000\002\001\001\000\026\024\247\025\251" +
    "\027\250\037\227\040\122\042\111\043\230\045\106\046" +
    "\121\047\115\001\001\000\004\071\243\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\024\253\025\251\027\250\037" +
    "\227\040\122\042\111\043\230\045\106\046\121\047\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\023\302\027\301\030\300\031\264\032\260\037" +
    "\227\040\122\042\111\043\230\045\106\046\121\047\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\040\122\042\111\043\304" +
    "\045\106\046\121\047\115\001\001\000\004\044\151\001" +
    "\001\000\002\001\001\000\072\003\050\012\307\015\040" +
    "\016\063\017\036\020\066\021\017\022\065\023\053\026" +
    "\015\033\045\034\027\035\057\036\016\051\042\052\021" +
    "\053\052\054\032\060\031\061\051\066\043\067\055\070" +
    "\062\072\047\075\060\076\026\077\034\100\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\071\243\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\055\323\056\320\001\001\000\004\057\322\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\040\122\042" +
    "\111\043\325\045\106\046\121\047\115\001\001\000\004" +
    "\044\151\001\001\000\002\001\001\000\072\003\050\012" +
    "\330\015\040\016\063\017\036\020\066\021\017\022\065" +
    "\023\053\026\015\033\045\034\027\035\057\036\016\051" +
    "\042\052\021\053\052\054\032\060\031\061\051\066\043" +
    "\067\055\070\062\072\047\075\060\076\026\077\034\100" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\072" +
    "\003\050\012\333\015\040\016\063\017\036\020\066\021" +
    "\017\022\065\023\053\026\015\033\045\034\027\035\057" +
    "\036\016\051\042\052\021\053\052\054\032\060\031\061" +
    "\051\066\043\067\055\070\062\072\047\075\060\076\026" +
    "\077\034\100\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\003\050" +
    "\017\342\021\340\100\341\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\040\122\042\111\043\345\045\106\046\121\047\115\001" +
    "\001\000\004\044\151\001\001\000\014\003\050\017\342" +
    "\020\347\021\017\100\341\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\076\003\050\016\077" +
    "\017\036\020\066\021\017\022\065\023\053\026\015\033" +
    "\045\034\027\035\057\036\016\051\042\052\021\053\052" +
    "\054\032\060\031\061\051\062\353\063\074\064\073\065" +
    "\072\066\043\067\055\070\062\072\047\075\060\076\026" +
    "\077\034\100\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\u0102\007\005\010\u0100\001\001" +
    "\000\002\001\001\000\012\003\u0106\013\u0108\014\u0105\100" +
    "\u0107\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\072\003\050\012\u010b\015\040\016\063\017\036" +
    "\020\066\021\017\022\065\023\053\026\015\033\045\034" +
    "\027\035\057\036\016\051\042\052\021\053\052\054\032" +
    "\060\031\061\051\066\043\067\055\070\062\072\047\075" +
    "\060\076\026\077\034\100\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\u0106\013\u0110\014\u0105\100\u0107\001\001\000\002" +
    "\001\001\000\072\003\050\012\u0112\015\040\016\063\017" +
    "\036\020\066\021\017\022\065\023\053\026\015\033\045" +
    "\034\027\035\057\036\016\051\042\052\021\053\052\054" +
    "\032\060\031\061\051\066\043\067\055\070\062\072\047" +
    "\075\060\076\026\077\034\100\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return token = lex.next_token(); 
    }


    Lexer lex;
    Symbol token;
    @SuppressWarnings("deprecation")
    public parser(Lexer lex){
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    private HashMap<String, ArrayList<String>> listaTablaSimbolos = new HashMap<String, ArrayList<String>>();
    String currentHash;

    private void imprimirTablaSimbolos(){
        for(String key: listaTablaSimbolos.keySet()){
            System.out.println("-------------------------");
            System.out.println("");
            System.out.println("Tabla de símbolos: "+key);
            System.out.println("Valores: ");
            for(String item: listaTablaSimbolos.get(key)){
                System.out.println(item);
            }

            System.out.println("");
        }

    }
    private void manejoError(String error){
        int linea = lex.getLine();
        int columna = lex.getColumn();
        System.out.println("Error Sintáctico: " + error + " en la linea: " + linea + " y columna: " + columna);
        System.out.println("Se continua con el análisis sintáctico.");
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= nuevoLenguaje EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // nuevoLenguaje ::= funcionMain 
            {
              Object RESULT =null;
		 imprimirTablaSimbolos(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nuevoLenguaje",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // nuevoLenguaje ::= funcionMain funciones 
            {
              Object RESULT =null;
		 imprimirTablaSimbolos(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nuevoLenguaje",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // funcionMain ::= iniFun LPARENT RPARENT INIBLOQUE bloque FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionMain",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // funciones ::= funcion 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // funciones ::= funciones funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // funcion ::= iniFun LPARENT parametros RPARENT INIBLOQUE bloque FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // funcion ::= iniFun LPARENT RPARENT INIBLOQUE bloque FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipoRet ::= INT 
            {
              Object RESULT =null;
		 RESULT = "int";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoRet",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipoRet ::= FLOAT 
            {
              Object RESULT =null;
		 RESULT = "float";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoRet",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipoRet ::= BOOLEAN 
            {
              Object RESULT =null;
		 RESULT = "boolean";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoRet",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // iniFun ::= tipoRet identifier 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
           String tipoTabla;
           if(id.toString().equals("main")){
            tipoTabla = "tipo:main: "+tip.toString();
           }
           else{
            tipoTabla = "tipo:funcion: "+tip.toString();
           }
           ArrayList<String> listaSimbolos = new ArrayList<String>();
           currentHash = id.toString();
           listaSimbolos.add(tipoTabla);
           listaTablaSimbolos.put(currentHash, listaSimbolos);
           RESULT = tip.toString()+" "+id.toString();


              CUP$parser$result = parser.getSymbolFactory().newSymbol("iniFun",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // identifier ::= MAIN 
            {
              Object RESULT =null;
		 RESULT = "main";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // identifier ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = id.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parametros ::= parametro COMA parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parametro ::= tipoVar ID 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 listaTablaSimbolos.get(currentHash).add("Parámetro: "+id.toString()+": "+tip.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parametro ::= tipoSubset ID 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 listaTablaSimbolos.get(currentHash).add("Parámetro: "+id.toString()+": "+tip.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipoVar ::= FLOAT 
            {
              Object RESULT =null;
		 RESULT = "float";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVar",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipoVar ::= STRING 
            {
              Object RESULT =null;
		 RESULT = "string";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVar",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipoVar ::= BOOLEAN 
            {
              Object RESULT =null;
		 RESULT = "boolean";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVar",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bloque ::= sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencias ::= sentencia sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentencia ::= creaVar FINEXP 
            {
              Object RESULT =null;
		int cvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  
                        listaTablaSimbolos.get(currentHash).add(cv.toString()); 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencia ::= usaVar 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentencia ::= asignacion 
            {
              Object RESULT =null;
		int asignleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asignright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object asign = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        if(asign != null){
                            listaTablaSimbolos.get(currentHash).add(asign.toString());
                        }  
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentencia ::= llamaFunc 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentencia ::= output 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentencia ::= control 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentencia ::= returnFunc 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentencia ::= creaArreglo 
            {
              Object RESULT =null;
		int creaArrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int creaArrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object creaArr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      listaTablaSimbolos.get(currentHash).add(creaArr.toString()); 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentencia ::= asignaArreglo 
            {
              Object RESULT =null;
		int asigArrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asigArrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object asigArr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        if(asigArr != null){
                            listaTablaSimbolos.get(currentHash).add(asigArr.toString());
                        }  
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentencia ::= error 
            {
              Object RESULT =null;
		 manejoError("Error de sentencia"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // usaVar ::= ID FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("usaVar",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // usaVar ::= PLUS_UN ID FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("usaVar",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // usaVar ::= MINUS_UN ID FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("usaVar",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // creaVar ::= tipoVar ID 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n.toString()+": "+tip.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaVar",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // creaVar ::= tipoSubset ID 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n.toString()+": "+tip.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaVar",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // asignacion ::= creaAsignaVar FINEXP 
            {
              Object RESULT =null;
		int cvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = cv.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // asignacion ::= ID EQUIV literal FINEXP 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // asignacion ::= ID EQUIV llamaFunc FINEXP 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // asignacion ::= ID EQUIV input FINEXP 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // creaAsignaVar ::= creaVar EQUIV literal 
            {
              Object RESULT =null;
		int cvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object cv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = cv.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaAsignaVar",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // creaAsignaVar ::= creaVar EQUIV llamaFunc 
            {
              Object RESULT =null;
		int cvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object cv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = cv.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaAsignaVar",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // creaAsignaVar ::= creaVar EQUIV input 
            {
              Object RESULT =null;
		int cvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object cv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = cv.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaAsignaVar",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // literal ::= operacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // literal ::= CADENA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // literal ::= CARACTER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // literal ::= error 
            {
              Object RESULT =null;
		 manejoError("Error de literal"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operacion ::= operacionLogica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // operacionAritmetica ::= operandoArit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // operacionAritmetica ::= PLUS_UN operandoArit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // operacionAritmetica ::= MINUS_UN operandoArit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // operacionAritmetica ::= operacionAritmetica operadorArit operacionAritmetica 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // operacionAritmetica ::= LPARENT operacionAritmetica RPARENT 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // operacionAritmetica ::= MINUS operacionAritmetica 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // operadorArit ::= PLUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operadorArit ::= MINUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // operadorArit ::= TIMES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // operadorArit ::= DIV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // operadorArit ::= POWER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operadorArit ::= MODULE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // operandoArit ::= ENTERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // operandoArit ::= DECIMAL 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // operandoArit ::= ID 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // operacionRelacional ::= operacionAritmetica operadorRel operacionAritmetica 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionRelacional",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operadorRel ::= MAYOR_QUE 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operadorRel ::= MAYOR_IGUAL 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operadorRel ::= MENOR_QUE 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // operadorRel ::= MENOR_IGUAL 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operadorRel ::= DEQUIV 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operadorRel ::= DIF 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // operacionLogica ::= operandoLog 
            {
              Object RESULT =null;
		int opLogicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opLogicright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opLogic = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = opLogic.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionLogica",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // operacionLogica ::= operacionRelacional 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionLogica",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // operacionLogica ::= operacionAritmetica 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionLogica",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // operacionLogica ::= operacionLogica operadorLog operacionLogica 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionLogica",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // operacionLogica ::= LPARENT operacionLogica RPARENT 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionLogica",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // operacionLogica ::= negacion operacionLogica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionLogica",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // operandoLog ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoLog",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // operandoLog ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoLog",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // operadorLog ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLog",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // operadorLog ::= OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLog",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // negacion ::= NOT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("negacion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // negacion ::= EXCLAMACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("negacion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // llamaFunc ::= ID LPARENT parametrosLlamada RPARENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamaFunc",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // llamaFunc ::= ID LPARENT RPARENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamaFunc",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // parametrosLlamada ::= parametroLlamada 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosLlamada",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // parametrosLlamada ::= parametroLlamada COMA parametrosLlamada 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosLlamada",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // parametroLlamada ::= literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroLlamada",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // input ::= leeInt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("input",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // input ::= leeFloat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("input",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // leeInt ::= READ_INT LPARENT RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leeInt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // leeFloat ::= READ_FLOAT LPARENT RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leeFloat",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // output ::= escribeInt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("output",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // output ::= escribeFloat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("output",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // output ::= escribeString 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("output",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // escribeInt ::= PRINT_INT LPARENT ID RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribeInt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // escribeInt ::= PRINT_INT LPARENT ENTERO RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribeInt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // escribeFloat ::= PRINT_FLOAT LPARENT ID RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribeFloat",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // escribeFloat ::= PRINT_FLOAT LPARENT DECIMAL RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribeFloat",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // escribeString ::= PRINT_STRING LPARENT ID RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribeString",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // escribeString ::= PRINT_STRING LPARENT CADENA RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribeString",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // control ::= condicional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // control ::= ciclo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // condicional ::= condIf condsElif condElse 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // condicional ::= condIf condsElif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // condicional ::= condIf condElse 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // condicional ::= condIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // condIf ::= IF LPARENT operacionLogica RPARENT INIBLOQUE bloque FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condIf",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // condsElif ::= condElif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condsElif",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // condsElif ::= condElif condsElif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condsElif",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // condElif ::= ELIF LPARENT operacionLogica RPARENT INIBLOQUE bloque FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condElif",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // condElse ::= ELSE INIBLOQUE bloque FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condElse",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ciclo ::= cicloDoWhile 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ciclo ::= cicloFor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // cicloDoWhile ::= DO INIBLOQUE bloqueCiclo FINBLOQUE WHILE LPARENT operacionLogica RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cicloDoWhile",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // cicloFor ::= FOR LPARENT creaAsignaVar FINEXP operacionLogica FINEXP asignacion RPARENT INIBLOQUE bloqueCiclo FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cicloFor",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // bloqueCiclo ::= sentenciasCiclo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueCiclo",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // sentenciasCiclo ::= sentenciaCiclo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasCiclo",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // sentenciasCiclo ::= sentenciaCiclo sentenciasCiclo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasCiclo",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // sentenciaCiclo ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaCiclo",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // sentenciaCiclo ::= breakCiclo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaCiclo",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // breakCiclo ::= BREAK FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("breakCiclo",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // returnFunc ::= RETURN literal FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnFunc",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // asignaArreglo ::= asignaElementoArreglo FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaArreglo",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // asignaArreglo ::= creaAsignaArreglo FINEXP 
            {
              Object RESULT =null;
		int creaArrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int creaArrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object creaArr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = creaArr.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaArreglo",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // arregloSinTam ::= tipoSubset ID LPARENT_CUAD RPARENT_CUAD 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = id.toString()+": "+tip.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arregloSinTam",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // creaArreglo ::= tipoArreglo FINEXP 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = tip.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaArreglo",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // creaAsignaArreglo ::= tipoArreglo EQUIV INIBLOQUE arregloValores FINBLOQUE 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = tip.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaAsignaArreglo",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // creaAsignaArreglo ::= arregloSinTam EQUIV INIBLOQUE arregloValores FINBLOQUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = a.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaAsignaArreglo",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // tipoArreglo ::= tipoSubset expArreglo 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp.toString()+": "+tip.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoArreglo",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // arregloValores ::= arregloValor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arregloValores",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // arregloValores ::= arregloValor COMA arregloValores 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arregloValores",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // arregloValor ::= CARACTER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arregloValor",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // arregloValor ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arregloValor",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // arregloValor ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arregloValor",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // cantidadArreglo ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cantidadArreglo",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // cantidadArreglo ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cantidadArreglo",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // tipoSubset ::= INT 
            {
              Object RESULT =null;
		 RESULT = "int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoSubset",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // tipoSubset ::= CHAR 
            {
              Object RESULT =null;
		 RESULT = "char"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoSubset",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // asignaElementoArreglo ::= expArreglo EQUIV ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaElementoArreglo",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // asignaElementoArreglo ::= expArreglo EQUIV CARACTER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaElementoArreglo",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // asignaElementoArreglo ::= expArreglo EQUIV ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaElementoArreglo",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // expArreglo ::= ID LPARENT_CUAD cantidadArreglo RPARENT_CUAD 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = id.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArreglo",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
