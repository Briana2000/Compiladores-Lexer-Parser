
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ParserLexer;

import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\216\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\006\011\000\002\004\003\000\002\004\004" +
    "\000\002\005\012\000\002\005\011\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\011\003\000\002" +
    "\011\005\000\002\012\004\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\010\003\000\002\013\003" +
    "\000\002\013\004\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\020\004\000\002\020\005\000\002\020\005" +
    "\000\002\015\005\000\002\015\005\000\002\016\004\000" +
    "\002\016\006\000\002\016\006\000\002\016\006\000\002" +
    "\017\006\000\002\017\006\000\002\017\006\000\002\017" +
    "\006\000\002\017\006\000\002\017\006\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\035\003\000" +
    "\002\036\003\000\002\036\004\000\002\036\004\000\002" +
    "\036\005\000\002\036\005\000\002\036\004\000\002\037" +
    "\003\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\045\005\000\002" +
    "\046\003\000\002\046\003\000\002\046\003\000\002\046" +
    "\003\000\002\046\003\000\002\046\003\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\041\005\000" +
    "\002\041\005\000\002\041\004\000\002\043\003\000\002" +
    "\043\003\000\002\042\003\000\002\042\003\000\002\044" +
    "\003\000\002\044\003\000\002\021\007\000\002\021\006" +
    "\000\002\022\003\000\002\022\005\000\002\023\003\000" +
    "\002\026\003\000\002\026\003\000\002\027\006\000\002" +
    "\030\006\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\032\007\000\002\032\007\000\002\033\007" +
    "\000\002\033\007\000\002\034\007\000\002\034\007\000" +
    "\002\047\003\000\002\047\003\000\002\051\005\000\002" +
    "\051\004\000\002\051\004\000\002\051\003\000\002\052" +
    "\011\000\002\053\003\000\002\053\004\000\002\054\011" +
    "\000\002\055\006\000\002\050\003\000\002\050\003\000" +
    "\002\056\013\000\002\057\015\000\002\060\003\000\002" +
    "\061\003\000\002\061\004\000\002\062\003\000\002\062" +
    "\003\000\002\063\004\000\002\024\005\000\002\070\004" +
    "\000\002\070\004\000\002\064\006\000\002\074\004\000" +
    "\002\073\007\000\002\073\007\000\002\072\004\000\002" +
    "\071\003\000\002\071\005\000\002\070\003\000\002\070" +
    "\003\000\002\070\003\000\002\067\003\000\002\067\003" +
    "\000\002\075\003\000\002\075\003\000\002\065\005\000" +
    "\002\065\005\000\002\065\005\000\002\066\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0118\000\004\004\006\001\002\000\004\002\u011a\001" +
    "\002\000\012\002\000\004\u0108\007\u0105\010\u0106\001\002" +
    "\000\004\014\007\001\002\000\004\054\010\001\002\000" +
    "\004\055\011\001\002\000\004\060\012\001\002\000\044" +
    "\004\023\005\016\006\063\007\060\010\041\013\044\015" +
    "\035\020\067\022\026\026\021\027\022\030\066\037\053" +
    "\040\055\064\020\067\031\070\040\001\002\000\050\004" +
    "\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\013\uffe7\015\uffe7" +
    "\020\uffe7\022\uffe7\023\uffe7\026\uffe7\027\uffe7\030\uffe7\037" +
    "\uffe7\040\uffe7\061\uffe7\064\uffe7\067\uffe7\070\uffe7\001\002" +
    "\000\050\004\uffa4\005\uffa4\006\uffa4\007\uffa4\010\uffa4\013" +
    "\uffa4\015\uffa4\020\uffa4\022\uffa4\023\uffa4\026\uffa4\027\uffa4" +
    "\030\uffa4\037\uffa4\040\uffa4\061\uffa4\064\uffa4\067\uffa4\070" +
    "\uffa4\001\002\000\004\063\u0102\001\002\000\004\070\uff78" +
    "\001\002\000\050\004\uff9c\005\uff9c\006\uff9c\007\uff9c\010" +
    "\uff9c\013\uff9c\015\uff9c\020\uff9c\022\uff9c\023\uff9c\026\uff9c" +
    "\027\uff9c\030\uff9c\037\uff9c\040\uff9c\061\uff9c\064\uff9c\067" +
    "\uff9c\070\uff9c\001\002\000\052\004\uff7d\005\uff7d\006\uff7d" +
    "\007\uff7d\010\uff7d\013\uff7d\015\uff7d\020\uff7d\022\uff7d\023" +
    "\uff7d\026\uff7d\027\uff7d\030\uff7d\037\uff7d\040\uff7d\061\uff7d" +
    "\062\uff7d\064\uff7d\067\uff7d\070\uff7d\001\002\000\004\054" +
    "\373\001\002\000\004\054\364\001\002\000\004\070\uff79" +
    "\001\002\000\050\004\uffa6\005\uffa6\006\uffa6\007\uffa6\010" +
    "\uffa6\013\uffa6\015\uffa6\020\uffa6\022\uffa6\023\uffa6\026\uffa6" +
    "\027\uffa6\030\uffa6\037\uffa6\040\uffa6\061\uffa6\064\uffa6\067" +
    "\uffa6\070\uffa6\001\002\000\004\063\363\001\002\000\004" +
    "\054\344\001\002\000\004\061\343\001\002\000\050\004" +
    "\uff92\005\uff92\006\uff92\007\uff92\010\uff92\013\uff92\015\uff92" +
    "\020\uff92\022\uff92\023\uff92\026\uff92\027\uff92\030\uff92\037" +
    "\uff92\040\uff92\061\uff92\064\uff92\067\uff92\070\uff92\001\002" +
    "\000\052\004\uff7e\005\uff7e\006\uff7e\007\uff7e\010\uff7e\013" +
    "\uff7e\015\uff7e\020\uff7e\022\uff7e\023\uff7e\026\uff7e\027\uff7e" +
    "\030\uff7e\037\uff7e\040\uff7e\061\uff7e\062\uff7e\064\uff7e\067" +
    "\uff7e\070\uff7e\001\002\000\054\004\uff98\005\uff98\006\uff98" +
    "\007\uff98\010\uff98\013\uff98\015\uff98\016\324\017\323\020" +
    "\uff98\022\uff98\023\uff98\026\uff98\027\uff98\030\uff98\037\uff98" +
    "\040\uff98\061\uff98\064\uff98\067\uff98\070\uff98\001\002\000" +
    "\004\070\315\001\002\000\050\004\uffe6\005\uffe6\006\uffe6" +
    "\007\uffe6\010\uffe6\013\uffe6\015\uffe6\020\uffe6\022\uffe6\023" +
    "\uffe6\026\uffe6\027\uffe6\030\uffe6\037\uffe6\040\uffe6\061\uffe6" +
    "\064\uffe6\067\uffe6\070\uffe6\001\002\000\004\054\307\001" +
    "\002\000\050\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed" +
    "\013\uffed\015\uffed\020\uffed\022\uffed\023\uffed\026\uffed\027" +
    "\uffed\030\uffed\037\uffed\040\uffed\061\uffed\064\uffed\067\uffed" +
    "\070\uffed\001\002\000\004\061\ufff0\001\002\000\060\004" +
    "\uff7c\005\uff7c\006\uff7c\007\uff7c\010\uff7c\013\uff7c\015\uff7c" +
    "\020\uff7c\022\uff7c\023\uff7c\026\uff7c\027\uff7c\030\uff7c\037" +
    "\uff7c\040\uff7c\053\277\054\257\056\211\061\uff7c\063\300" +
    "\064\uff7c\067\uff7c\070\uff7c\001\002\000\004\070\ufff1\001" +
    "\002\000\050\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8" +
    "\013\uffe8\015\uffe8\020\uffe8\022\uffe8\023\uffe8\026\uffe8\027" +
    "\uffe8\030\uffe8\037\uffe8\040\uffe8\061\uffe8\064\uffe8\067\uffe8" +
    "\070\uffe8\001\002\000\004\053\273\001\002\000\034\011" +
    "\107\012\115\032\102\037\113\040\106\043\117\044\104" +
    "\054\122\064\111\065\103\066\235\067\240\070\116\001" +
    "\002\000\050\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9" +
    "\013\uffe9\015\uffe9\020\uffe9\022\uffe9\023\uffe9\026\uffe9\027" +
    "\uffe9\030\uffe9\037\uffe9\040\uffe9\061\uffe9\064\uffe9\067\uffe9" +
    "\070\uffe9\001\002\000\050\004\uffe5\005\uffe5\006\uffe5\007" +
    "\uffe5\010\uffe5\013\uffe5\015\uffe5\020\uffe5\022\uffe5\023\uffe5" +
    "\026\uffe5\027\uffe5\030\uffe5\037\uffe5\040\uffe5\061\uffe5\064" +
    "\uffe5\067\uffe5\070\uffe5\001\002\000\004\070\232\001\002" +
    "\000\050\004\uff91\005\uff91\006\uff91\007\uff91\010\uff91\013" +
    "\uff91\015\uff91\020\uff91\022\uff91\023\uff91\026\uff91\027\uff91" +
    "\030\uff91\037\uff91\040\uff91\061\uff91\064\uff91\067\uff91\070" +
    "\uff91\001\002\000\050\004\uff9d\005\uff9d\006\uff9d\007\uff9d" +
    "\010\uff9d\013\uff9d\015\uff9d\020\uff9d\022\uff9d\023\uff9d\026" +
    "\uff9d\027\uff9d\030\uff9d\037\uff9d\040\uff9d\061\uff9d\064\uff9d" +
    "\067\uff9d\070\uff9d\001\002\000\050\004\uffea\005\uffea\006" +
    "\uffea\007\uffea\010\uffea\013\uffea\015\uffea\020\uffea\022\uffea" +
    "\023\uffea\026\uffea\027\uffea\030\uffea\037\uffea\040\uffea\061" +
    "\uffea\064\uffea\067\uffea\070\uffea\001\002\000\004\070\230" +
    "\001\002\000\004\063\227\001\002\000\004\070\225\001" +
    "\002\000\050\004\uffa5\005\uffa5\006\uffa5\007\uffa5\010\uffa5" +
    "\013\uffa5\015\uffa5\020\uffa5\022\uffa5\023\uffa5\026\uffa5\027" +
    "\uffa5\030\uffa5\037\uffa5\040\uffa5\061\uffa5\064\uffa5\067\uffa5" +
    "\070\uffa5\001\002\000\006\053\201\063\202\001\002\000" +
    "\004\070\ufff3\001\002\000\004\053\175\001\002\000\046" +
    "\004\023\005\016\006\063\007\060\010\041\013\044\015" +
    "\035\020\067\022\026\026\021\027\022\030\066\037\053" +
    "\040\055\061\uffef\064\020\067\031\070\040\001\002\000" +
    "\004\070\ufff2\001\002\000\050\004\uffec\005\uffec\006\uffec" +
    "\007\uffec\010\uffec\013\uffec\015\uffec\020\uffec\022\uffec\023" +
    "\uffec\026\uffec\027\uffec\030\uffec\037\uffec\040\uffec\061\uffec" +
    "\064\uffec\067\uffec\070\uffec\001\002\000\050\004\uffeb\005" +
    "\uffeb\006\uffeb\007\uffeb\010\uffeb\013\uffeb\015\uffeb\020\uffeb" +
    "\022\uffeb\023\uffeb\026\uffeb\027\uffeb\030\uffeb\037\uffeb\040" +
    "\uffeb\061\uffeb\064\uffeb\067\uffeb\070\uffeb\001\002\000\004" +
    "\054\165\001\002\000\004\060\070\001\002\000\046\004" +
    "\023\005\016\006\063\007\060\010\041\013\044\015\035" +
    "\020\067\022\026\023\074\026\021\027\022\030\066\037" +
    "\053\040\055\064\020\067\031\070\040\001\002\000\050" +
    "\004\uff8a\005\uff8a\006\uff8a\007\uff8a\010\uff8a\013\uff8a\015" +
    "\uff8a\020\uff8a\022\uff8a\023\uff8a\026\uff8a\027\uff8a\030\uff8a" +
    "\037\uff8a\040\uff8a\061\uff8a\064\uff8a\067\uff8a\070\uff8a\001" +
    "\002\000\050\004\023\005\016\006\063\007\060\010\041" +
    "\013\044\015\035\020\067\022\026\023\074\026\021\027" +
    "\022\030\066\037\053\040\055\061\uff8d\064\020\067\031" +
    "\070\040\001\002\000\004\061\uff8e\001\002\000\004\063" +
    "\163\001\002\000\004\061\077\001\002\000\050\004\uff8b" +
    "\005\uff8b\006\uff8b\007\uff8b\010\uff8b\013\uff8b\015\uff8b\020" +
    "\uff8b\022\uff8b\023\uff8b\026\uff8b\027\uff8b\030\uff8b\037\uff8b" +
    "\040\uff8b\061\uff8b\064\uff8b\067\uff8b\070\uff8b\001\002\000" +
    "\004\021\100\001\002\000\004\054\101\001\002\000\030" +
    "\011\107\012\115\032\102\037\113\040\106\043\117\044" +
    "\104\054\122\064\111\065\103\070\116\001\002\000\020" +
    "\032\102\037\113\040\106\054\145\064\111\065\103\070" +
    "\116\001\002\000\044\031\uffc4\032\uffc4\033\uffc4\034\uffc4" +
    "\035\uffc4\036\uffc4\041\uffc4\042\uffc4\045\uffc4\046\uffc4\047" +
    "\uffc4\050\uffc4\051\uffc4\052\uffc4\055\uffc4\062\uffc4\063\uffc4" +
    "\001\002\000\030\011\uffb0\012\uffb0\032\uffb0\037\uffb0\040" +
    "\uffb0\043\uffb0\044\uffb0\054\uffb0\064\uffb0\065\uffb0\070\uffb0" +
    "\001\002\000\014\041\uffbb\042\uffbb\055\uffbb\062\uffbb\063" +
    "\uffbb\001\002\000\010\064\111\065\103\070\116\001\002" +
    "\000\014\041\uffb5\042\uffb5\055\uffb5\062\uffb5\063\uffb5\001" +
    "\002\000\044\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1" +
    "\036\uffd1\041\uffd1\042\uffd1\045\uffd1\046\uffd1\047\uffd1\050" +
    "\uffd1\051\uffd1\052\uffd1\055\uffd1\062\uffd1\063\uffd1\001\002" +
    "\000\044\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036" +
    "\uffc5\041\uffc5\042\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5" +
    "\051\uffc5\052\uffc5\055\uffc5\062\uffc5\063\uffc5\001\002\000" +
    "\010\041\152\042\153\055\157\001\002\000\010\064\111" +
    "\065\103\070\116\001\002\000\014\041\uffba\042\uffba\055" +
    "\uffba\062\uffba\063\uffba\001\002\000\014\041\uffb4\042\uffb4" +
    "\055\uffb4\062\uffb4\063\uffb4\001\002\000\044\031\uffc3\032" +
    "\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\041\uffc3\042\uffc3" +
    "\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\055" +
    "\uffc3\062\uffc3\063\uffc3\001\002\000\030\011\uffb1\012\uffb1" +
    "\032\uffb1\037\uffb1\040\uffb1\043\uffb1\044\uffb1\054\uffb1\064" +
    "\uffb1\065\uffb1\070\uffb1\001\002\000\030\011\107\012\115" +
    "\032\102\037\113\040\106\043\117\044\104\054\122\064" +
    "\111\065\103\070\116\001\002\000\044\031\134\032\125" +
    "\033\140\034\136\035\137\036\130\041\uffb9\042\uffb9\045" +
    "\131\046\132\047\135\050\142\051\141\052\133\055\uffb9" +
    "\062\uffb9\063\uffb9\001\002\000\030\011\107\012\115\032" +
    "\102\037\113\040\106\043\117\044\104\054\122\064\111" +
    "\065\103\070\116\001\002\000\010\041\152\042\153\055" +
    "\151\001\002\000\040\031\134\032\125\033\140\034\136" +
    "\035\137\036\130\041\uffb9\042\uffb9\045\131\046\132\047" +
    "\135\050\142\051\141\052\133\055\126\001\002\000\010" +
    "\064\uffca\065\uffca\070\uffca\001\002\000\044\031\uffcd\032" +
    "\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\041\uffcd\042\uffcd" +
    "\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\055" +
    "\uffcd\062\uffcd\063\uffcd\001\002\000\010\064\111\065\103" +
    "\070\116\001\002\000\010\064\uffc6\065\uffc6\070\uffc6\001" +
    "\002\000\020\032\uffc1\037\uffc1\040\uffc1\054\uffc1\064\uffc1" +
    "\065\uffc1\070\uffc1\001\002\000\020\032\uffc0\037\uffc0\040" +
    "\uffc0\054\uffc0\064\uffc0\065\uffc0\070\uffc0\001\002\000\020" +
    "\032\uffbc\037\uffbc\040\uffbc\054\uffbc\064\uffbc\065\uffbc\070" +
    "\uffbc\001\002\000\010\064\uffcb\065\uffcb\070\uffcb\001\002" +
    "\000\020\032\uffbf\037\uffbf\040\uffbf\054\uffbf\064\uffbf\065" +
    "\uffbf\070\uffbf\001\002\000\010\064\uffc8\065\uffc8\070\uffc8" +
    "\001\002\000\010\064\uffc7\065\uffc7\070\uffc7\001\002\000" +
    "\010\064\uffc9\065\uffc9\070\uffc9\001\002\000\020\032\uffbd" +
    "\037\uffbd\040\uffbd\054\uffbd\064\uffbd\065\uffbd\070\uffbd\001" +
    "\002\000\020\032\uffbe\037\uffbe\040\uffbe\054\uffbe\064\uffbe" +
    "\065\uffbe\070\uffbe\001\002\000\020\032\102\037\113\040" +
    "\106\054\145\064\111\065\103\070\116\001\002\000\030" +
    "\031\134\032\125\033\140\034\136\035\137\036\130\041" +
    "\uffc2\042\uffc2\055\uffc2\062\uffc2\063\uffc2\001\002\000\020" +
    "\032\102\037\113\040\106\054\145\064\111\065\103\070" +
    "\116\001\002\000\020\031\134\032\125\033\140\034\136" +
    "\035\137\036\130\055\126\001\002\000\044\031\uffce\032" +
    "\uffce\033\uffce\034\uffce\035\uffce\036\uffce\041\uffce\042\uffce" +
    "\045\uffce\046\uffce\047\uffce\050\uffce\051\uffce\052\uffce\055" +
    "\uffce\062\uffce\063\uffce\001\002\000\030\011\107\012\115" +
    "\032\102\037\113\040\106\043\117\044\104\054\122\064" +
    "\111\065\103\070\116\001\002\000\014\041\uffb7\042\uffb7" +
    "\055\uffb7\062\uffb7\063\uffb7\001\002\000\030\011\uffb3\012" +
    "\uffb3\032\uffb3\037\uffb3\040\uffb3\043\uffb3\044\uffb3\054\uffb3" +
    "\064\uffb3\065\uffb3\070\uffb3\001\002\000\030\011\uffb2\012" +
    "\uffb2\032\uffb2\037\uffb2\040\uffb2\043\uffb2\044\uffb2\054\uffb2" +
    "\064\uffb2\065\uffb2\070\uffb2\001\002\000\014\041\152\042" +
    "\153\055\uffb8\062\uffb8\063\uffb8\001\002\000\014\041\152" +
    "\042\153\055\uffb6\062\uffb6\063\uffb6\001\002\000\044\031" +
    "\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\041\uffd0" +
    "\042\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052" +
    "\uffd0\055\uffd0\062\uffd0\063\uffd0\001\002\000\004\063\160" +
    "\001\002\000\050\004\uff90\005\uff90\006\uff90\007\uff90\010" +
    "\uff90\013\uff90\015\uff90\020\uff90\022\uff90\023\uff90\026\uff90" +
    "\027\uff90\030\uff90\037\uff90\040\uff90\061\uff90\064\uff90\067" +
    "\uff90\070\uff90\001\002\000\044\031\uffcf\032\uffcf\033\uffcf" +
    "\034\uffcf\035\uffcf\036\uffcf\041\uffcf\042\uffcf\045\uffcf\046" +
    "\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\055\uffcf\062\uffcf" +
    "\063\uffcf\001\002\000\044\031\uffcc\032\uffcc\033\140\034" +
    "\136\035\137\036\130\041\uffcc\042\uffcc\045\uffcc\046\uffcc" +
    "\047\uffcc\050\uffcc\051\uffcc\052\uffcc\055\uffcc\062\uffcc\063" +
    "\uffcc\001\002\000\050\004\uff89\005\uff89\006\uff89\007\uff89" +
    "\010\uff89\013\uff89\015\uff89\020\uff89\022\uff89\023\uff89\026" +
    "\uff89\027\uff89\030\uff89\037\uff89\040\uff89\061\uff89\064\uff89" +
    "\067\uff89\070\uff89\001\002\000\004\061\uff8c\001\002\000" +
    "\006\066\167\070\166\001\002\000\004\055\172\001\002" +
    "\000\004\055\170\001\002\000\004\063\171\001\002\000" +
    "\050\004\uff9e\005\uff9e\006\uff9e\007\uff9e\010\uff9e\013\uff9e" +
    "\015\uff9e\020\uff9e\022\uff9e\023\uff9e\026\uff9e\027\uff9e\030" +
    "\uff9e\037\uff9e\040\uff9e\061\uff9e\064\uff9e\067\uff9e\070\uff9e" +
    "\001\002\000\004\063\173\001\002\000\050\004\uff9f\005" +
    "\uff9f\006\uff9f\007\uff9f\010\uff9f\013\uff9f\015\uff9f\020\uff9f" +
    "\022\uff9f\023\uff9f\026\uff9f\027\uff9f\030\uff9f\037\uff9f\040" +
    "\uff9f\061\uff9f\064\uff9f\067\uff9f\070\uff9f\001\002\000\004" +
    "\061\uffee\001\002\000\010\064\200\067\177\070\176\001" +
    "\002\000\004\063\uff75\001\002\000\004\063\uff76\001\002" +
    "\000\004\063\uff77\001\002\000\004\060\203\001\002\000" +
    "\050\004\uff84\005\uff84\006\uff84\007\uff84\010\uff84\013\uff84" +
    "\015\uff84\020\uff84\022\uff84\023\uff84\026\uff84\027\uff84\030" +
    "\uff84\037\uff84\040\uff84\061\uff84\064\uff84\067\uff84\070\uff84" +
    "\001\002\000\014\004\023\005\016\064\020\067\031\070" +
    "\210\001\002\000\004\053\201\001\002\000\004\061\224" +
    "\001\002\000\006\061\uff80\062\222\001\002\000\004\070" +
    "\216\001\002\000\010\056\211\061\uff7c\062\uff7c\001\002" +
    "\000\006\064\214\070\212\001\002\000\004\057\uff7a\001" +
    "\002\000\004\057\215\001\002\000\004\057\uff7b\001\002" +
    "\000\006\053\uff74\063\uff74\001\002\000\004\056\220\001" +
    "\002\000\006\053\uff81\063\uff81\001\002\000\010\057\221" +
    "\064\214\070\212\001\002\000\004\053\uff85\001\002\000" +
    "\014\004\023\005\016\064\020\067\031\070\210\001\002" +
    "\000\004\061\uff7f\001\002\000\004\063\uff83\001\002\000" +
    "\004\063\226\001\002\000\050\004\uffe2\005\uffe2\006\uffe2" +
    "\007\uffe2\010\uffe2\013\uffe2\015\uffe2\020\uffe2\022\uffe2\023" +
    "\uffe2\026\uffe2\027\uffe2\030\uffe2\037\uffe2\040\uffe2\061\uffe2" +
    "\064\uffe2\067\uffe2\070\uffe2\001\002\000\052\004\uff87\005" +
    "\uff87\006\uff87\007\uff87\010\uff87\013\uff87\015\uff87\020\uff87" +
    "\022\uff87\023\uff87\026\uff87\027\uff87\030\uff87\037\uff87\040" +
    "\uff87\061\uff87\062\uff87\064\uff87\067\uff87\070\uff87\001\002" +
    "\000\004\063\231\001\002\000\050\004\uffe3\005\uffe3\006" +
    "\uffe3\007\uffe3\010\uffe3\013\uffe3\015\uffe3\020\uffe3\022\uffe3" +
    "\023\uffe3\026\uffe3\027\uffe3\030\uffe3\037\uffe3\040\uffe3\061" +
    "\uffe3\064\uffe3\067\uffe3\070\uffe3\001\002\000\006\053\233" +
    "\063\234\001\002\000\040\011\107\012\115\024\243\025" +
    "\237\032\102\037\113\040\106\043\117\044\104\054\122" +
    "\064\111\065\103\066\235\067\240\070\236\001\002\000" +
    "\050\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\013\uffe1" +
    "\015\uffe1\020\uffe1\022\uffe1\023\uffe1\026\uffe1\027\uffe1\030" +
    "\uffe1\037\uffe1\040\uffe1\061\uffe1\064\uffe1\067\uffe1\070\uffe1" +
    "\001\002\000\010\055\uffd4\062\uffd4\063\uffd4\001\002\000" +
    "\042\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3" +
    "\041\uffc3\042\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051" +
    "\uffc3\052\uffc3\054\257\063\uffc3\001\002\000\004\054\254" +
    "\001\002\000\010\055\uffd3\062\uffd3\063\uffd3\001\002\000" +
    "\004\063\uffd9\001\002\000\004\063\uffa9\001\002\000\004" +
    "\054\251\001\002\000\004\063\uffdb\001\002\000\004\063" +
    "\uffda\001\002\000\010\055\uffd5\062\uffd5\063\uffd5\001\002" +
    "\000\004\063\uffaa\001\002\000\014\041\152\042\153\055" +
    "\uffd2\062\uffd2\063\uffd2\001\002\000\004\055\252\001\002" +
    "\000\004\063\253\001\002\000\004\063\uffa8\001\002\000" +
    "\004\055\255\001\002\000\004\063\256\001\002\000\004" +
    "\063\uffa7\001\002\000\036\011\107\012\115\032\102\037" +
    "\113\040\106\043\117\044\104\054\122\055\260\064\111" +
    "\065\103\066\235\067\240\070\116\001\002\000\004\063" +
    "\270\001\002\000\004\055\266\001\002\000\006\055\uffab" +
    "\062\uffab\001\002\000\006\055\uffad\062\264\001\002\000" +
    "\034\011\107\012\115\032\102\037\113\040\106\043\117" +
    "\044\104\054\122\064\111\065\103\066\235\067\240\070" +
    "\116\001\002\000\004\055\uffac\001\002\000\004\063\267" +
    "\001\002\000\052\004\uffaf\005\uffaf\006\uffaf\007\uffaf\010" +
    "\uffaf\013\uffaf\015\uffaf\020\uffaf\022\uffaf\023\uffaf\026\uffaf" +
    "\027\uffaf\030\uffaf\037\uffaf\040\uffaf\061\uffaf\063\uffaf\064" +
    "\uffaf\067\uffaf\070\uffaf\001\002\000\052\004\uffae\005\uffae" +
    "\006\uffae\007\uffae\010\uffae\013\uffae\015\uffae\020\uffae\022" +
    "\uffae\023\uffae\026\uffae\027\uffae\030\uffae\037\uffae\040\uffae" +
    "\061\uffae\063\uffae\064\uffae\067\uffae\070\uffae\001\002\000" +
    "\004\063\272\001\002\000\050\004\uff88\005\uff88\006\uff88" +
    "\007\uff88\010\uff88\013\uff88\015\uff88\020\uff88\022\uff88\023" +
    "\uff88\026\uff88\027\uff88\030\uff88\037\uff88\040\uff88\061\uff88" +
    "\064\uff88\067\uff88\070\uff88\001\002\000\004\060\274\001" +
    "\002\000\014\004\023\005\016\064\020\067\031\070\210" +
    "\001\002\000\004\061\276\001\002\000\004\063\uff82\001" +
    "\002\000\040\011\107\012\115\024\243\025\237\032\102" +
    "\037\113\040\106\043\117\044\104\054\122\064\111\065" +
    "\103\066\235\067\240\070\236\001\002\000\050\004\uffe4" +
    "\005\uffe4\006\uffe4\007\uffe4\010\uffe4\013\uffe4\015\uffe4\020" +
    "\uffe4\022\uffe4\023\uffe4\026\uffe4\027\uffe4\030\uffe4\037\uffe4" +
    "\040\uffe4\061\uffe4\064\uffe4\067\uffe4\070\uffe4\001\002\000" +
    "\004\063\306\001\002\000\004\063\305\001\002\000\004" +
    "\063\304\001\002\000\052\004\uffdd\005\uffdd\006\uffdd\007" +
    "\uffdd\010\uffdd\013\uffdd\015\uffdd\020\uffdd\022\uffdd\023\uffdd" +
    "\026\uffdd\027\uffdd\030\uffdd\037\uffdd\040\uffdd\055\uffdd\061" +
    "\uffdd\064\uffdd\067\uffdd\070\uffdd\001\002\000\052\004\uffde" +
    "\005\uffde\006\uffde\007\uffde\010\uffde\013\uffde\015\uffde\020" +
    "\uffde\022\uffde\023\uffde\026\uffde\027\uffde\030\uffde\037\uffde" +
    "\040\uffde\055\uffde\061\uffde\064\uffde\067\uffde\070\uffde\001" +
    "\002\000\052\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc" +
    "\013\uffdc\015\uffdc\020\uffdc\022\uffdc\023\uffdc\026\uffdc\027" +
    "\uffdc\030\uffdc\037\uffdc\040\uffdc\055\uffdc\061\uffdc\064\uffdc" +
    "\067\uffdc\070\uffdc\001\002\000\030\011\107\012\115\032" +
    "\102\037\113\040\106\043\117\044\104\054\122\064\111" +
    "\065\103\070\116\001\002\000\010\041\152\042\153\055" +
    "\311\001\002\000\004\060\312\001\002\000\044\004\023" +
    "\005\016\006\063\007\060\010\041\013\044\015\035\020" +
    "\067\022\026\026\021\027\022\030\066\037\053\040\055" +
    "\064\020\067\031\070\040\001\002\000\004\061\314\001" +
    "\002\000\054\004\uff97\005\uff97\006\uff97\007\uff97\010\uff97" +
    "\013\uff97\015\uff97\016\uff97\017\uff97\020\uff97\022\uff97\023" +
    "\uff97\026\uff97\027\uff97\030\uff97\037\uff97\040\uff97\061\uff97" +
    "\064\uff97\067\uff97\070\uff97\001\002\000\010\053\316\056" +
    "\220\063\317\001\002\000\040\011\107\012\115\024\243" +
    "\025\237\032\102\037\113\040\106\043\117\044\104\054" +
    "\122\064\111\065\103\066\235\067\240\070\236\001\002" +
    "\000\050\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\013" +
    "\uffe0\015\uffe0\020\uffe0\022\uffe0\023\uffe0\026\uffe0\027\uffe0" +
    "\030\uffe0\037\uffe0\040\uffe0\061\uffe0\064\uffe0\067\uffe0\070" +
    "\uffe0\001\002\000\004\063\uffd6\001\002\000\004\063\uffd8" +
    "\001\002\000\004\063\uffd7\001\002\000\004\060\340\001" +
    "\002\000\004\054\332\001\002\000\050\004\uff99\005\uff99" +
    "\006\uff99\007\uff99\010\uff99\013\uff99\015\uff99\020\uff99\022" +
    "\uff99\023\uff99\026\uff99\027\uff99\030\uff99\037\uff99\040\uff99" +
    "\061\uff99\064\uff99\067\uff99\070\uff99\001\002\000\054\004" +
    "\uff96\005\uff96\006\uff96\007\uff96\010\uff96\013\uff96\015\uff96" +
    "\016\324\017\uff96\020\uff96\022\uff96\023\uff96\026\uff96\027" +
    "\uff96\030\uff96\037\uff96\040\uff96\061\uff96\064\uff96\067\uff96" +
    "\070\uff96\001\002\000\052\004\uff9a\005\uff9a\006\uff9a\007" +
    "\uff9a\010\uff9a\013\uff9a\015\uff9a\017\323\020\uff9a\022\uff9a" +
    "\023\uff9a\026\uff9a\027\uff9a\030\uff9a\037\uff9a\040\uff9a\061" +
    "\uff9a\064\uff9a\067\uff9a\070\uff9a\001\002\000\050\004\uff9b" +
    "\005\uff9b\006\uff9b\007\uff9b\010\uff9b\013\uff9b\015\uff9b\020" +
    "\uff9b\022\uff9b\023\uff9b\026\uff9b\027\uff9b\030\uff9b\037\uff9b" +
    "\040\uff9b\061\uff9b\064\uff9b\067\uff9b\070\uff9b\001\002\000" +
    "\052\004\uff95\005\uff95\006\uff95\007\uff95\010\uff95\013\uff95" +
    "\015\uff95\017\uff95\020\uff95\022\uff95\023\uff95\026\uff95\027" +
    "\uff95\030\uff95\037\uff95\040\uff95\061\uff95\064\uff95\067\uff95" +
    "\070\uff95\001\002\000\030\011\107\012\115\032\102\037" +
    "\113\040\106\043\117\044\104\054\122\064\111\065\103" +
    "\070\116\001\002\000\010\041\152\042\153\055\334\001" +
    "\002\000\004\060\335\001\002\000\044\004\023\005\016" +
    "\006\063\007\060\010\041\013\044\015\035\020\067\022" +
    "\026\026\021\027\022\030\066\037\053\040\055\064\020" +
    "\067\031\070\040\001\002\000\004\061\337\001\002\000" +
    "\054\004\uff94\005\uff94\006\uff94\007\uff94\010\uff94\013\uff94" +
    "\015\uff94\016\uff94\017\uff94\020\uff94\022\uff94\023\uff94\026" +
    "\uff94\027\uff94\030\uff94\037\uff94\040\uff94\061\uff94\064\uff94" +
    "\067\uff94\070\uff94\001\002\000\044\004\023\005\016\006" +
    "\063\007\060\010\041\013\044\015\035\020\067\022\026" +
    "\026\021\027\022\030\066\037\053\040\055\064\020\067" +
    "\031\070\040\001\002\000\004\061\342\001\002\000\050" +
    "\004\uff93\005\uff93\006\uff93\007\uff93\010\uff93\013\uff93\015" +
    "\uff93\020\uff93\022\uff93\023\uff93\026\uff93\027\uff93\030\uff93" +
    "\037\uff93\040\uff93\061\uff93\064\uff93\067\uff93\070\uff93\001" +
    "\002\000\012\002\ufffe\004\ufffe\007\ufffe\010\ufffe\001\002" +
    "\000\014\004\023\005\016\006\063\007\060\010\041\001" +
    "\002\000\004\070\362\001\002\000\004\063\351\001\002" +
    "\000\004\070\350\001\002\000\004\053\316\001\002\000" +
    "\030\011\107\012\115\032\102\037\113\040\106\043\117" +
    "\044\104\054\122\064\111\065\103\070\116\001\002\000" +
    "\010\041\152\042\153\063\353\001\002\000\016\004\023" +
    "\005\016\006\063\007\060\010\041\070\355\001\002\000" +
    "\004\055\356\001\002\000\004\053\277\001\002\000\004" +
    "\060\357\001\002\000\046\004\023\005\016\006\063\007" +
    "\060\010\041\013\044\015\035\020\067\022\026\023\074" +
    "\026\021\027\022\030\066\037\053\040\055\064\020\067" +
    "\031\070\040\001\002\000\004\061\361\001\002\000\050" +
    "\004\uff8f\005\uff8f\006\uff8f\007\uff8f\010\uff8f\013\uff8f\015" +
    "\uff8f\020\uff8f\022\uff8f\023\uff8f\026\uff8f\027\uff8f\030\uff8f" +
    "\037\uff8f\040\uff8f\061\uff8f\064\uff8f\067\uff8f\070\uff8f\001" +
    "\002\000\004\053\233\001\002\000\052\004\uff86\005\uff86" +
    "\006\uff86\007\uff86\010\uff86\013\uff86\015\uff86\020\uff86\022" +
    "\uff86\023\uff86\026\uff86\027\uff86\030\uff86\037\uff86\040\uff86" +
    "\061\uff86\062\uff86\064\uff86\067\uff86\070\uff86\001\002\000" +
    "\006\065\366\070\365\001\002\000\004\055\371\001\002" +
    "\000\004\055\367\001\002\000\004\063\370\001\002\000" +
    "\050\004\uffa0\005\uffa0\006\uffa0\007\uffa0\010\uffa0\013\uffa0" +
    "\015\uffa0\020\uffa0\022\uffa0\023\uffa0\026\uffa0\027\uffa0\030" +
    "\uffa0\037\uffa0\040\uffa0\061\uffa0\064\uffa0\067\uffa0\070\uffa0" +
    "\001\002\000\004\063\372\001\002\000\050\004\uffa1\005" +
    "\uffa1\006\uffa1\007\uffa1\010\uffa1\013\uffa1\015\uffa1\020\uffa1" +
    "\022\uffa1\023\uffa1\026\uffa1\027\uffa1\030\uffa1\037\uffa1\040" +
    "\uffa1\061\uffa1\064\uffa1\067\uffa1\070\uffa1\001\002\000\006" +
    "\064\375\070\374\001\002\000\004\055\u0100\001\002\000" +
    "\004\055\376\001\002\000\004\063\377\001\002\000\050" +
    "\004\uffa2\005\uffa2\006\uffa2\007\uffa2\010\uffa2\013\uffa2\015" +
    "\uffa2\020\uffa2\022\uffa2\023\uffa2\026\uffa2\027\uffa2\030\uffa2" +
    "\037\uffa2\040\uffa2\061\uffa2\064\uffa2\067\uffa2\070\uffa2\001" +
    "\002\000\004\063\u0101\001\002\000\050\004\uffa3\005\uffa3" +
    "\006\uffa3\007\uffa3\010\uffa3\013\uffa3\015\uffa3\020\uffa3\022" +
    "\uffa3\023\uffa3\026\uffa3\027\uffa3\030\uffa3\037\uffa3\040\uffa3" +
    "\061\uffa3\064\uffa3\067\uffa3\070\uffa3\001\002\000\052\004" +
    "\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\013\uffdf\015\uffdf" +
    "\020\uffdf\022\uffdf\023\uffdf\026\uffdf\027\uffdf\030\uffdf\037" +
    "\uffdf\040\uffdf\055\uffdf\061\uffdf\064\uffdf\067\uffdf\070\uffdf" +
    "\001\002\000\004\070\u010a\001\002\000\012\002\ufffd\004" +
    "\ufffd\007\ufffd\010\ufffd\001\002\000\004\070\ufff8\001\002" +
    "\000\004\070\ufff7\001\002\000\012\002\uffff\004\u0108\007" +
    "\u0105\010\u0106\001\002\000\004\070\ufff9\001\002\000\012" +
    "\002\ufffc\004\ufffc\007\ufffc\010\ufffc\001\002\000\004\054" +
    "\u010b\001\002\000\012\006\063\007\060\010\041\055\u010e" +
    "\001\002\000\004\070\u0119\001\002\000\004\055\u0115\001" +
    "\002\000\004\060\u0112\001\002\000\006\055\ufff6\062\u0110" +
    "\001\002\000\010\006\063\007\060\010\041\001\002\000" +
    "\004\055\ufff5\001\002\000\044\004\023\005\016\006\063" +
    "\007\060\010\041\013\044\015\035\020\067\022\026\026" +
    "\021\027\022\030\066\037\053\040\055\064\020\067\031" +
    "\070\040\001\002\000\004\061\u0114\001\002\000\012\002" +
    "\ufffa\004\ufffa\007\ufffa\010\ufffa\001\002\000\004\060\u0116" +
    "\001\002\000\044\004\023\005\016\006\063\007\060\010" +
    "\041\013\044\015\035\020\067\022\026\026\021\027\022" +
    "\030\066\037\053\040\055\064\020\067\031\070\040\001" +
    "\002\000\004\061\u0118\001\002\000\012\002\ufffb\004\ufffb" +
    "\007\ufffb\010\ufffb\001\002\000\006\055\ufff4\062\ufff4\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0118\000\006\002\003\006\004\001\001\000\002\001" +
    "\001\000\010\004\u0106\005\u0103\007\u0102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\072\003\046\010\026\013\036\014\061\015\035" +
    "\016\064\017\014\020\063\021\051\024\012\031\044\032" +
    "\023\033\055\034\013\047\041\050\016\051\050\052\031" +
    "\056\027\057\047\064\042\065\053\066\060\070\045\072" +
    "\056\073\024\074\033\075\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\053\326\054\325\055\324\001" +
    "\001\000\004\066\216\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\025\270\035\245\036\120\040\107\041\247\043" +
    "\104\044\117\045\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\070\003\046\013\173" +
    "\014\061\015\035\016\064\017\014\020\063\021\051\024" +
    "\012\031\044\032\023\033\055\034\013\047\041\050\016" +
    "\051\050\052\031\056\027\057\047\064\042\065\053\066" +
    "\060\070\045\072\056\073\024\074\033\075\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\076\003\046\014\075" +
    "\015\035\016\064\017\014\020\063\021\051\024\012\031" +
    "\044\032\023\033\055\034\013\047\041\050\016\051\050" +
    "\052\031\056\027\057\047\060\074\061\072\062\071\063" +
    "\070\064\042\065\053\066\060\070\045\072\056\073\024" +
    "\074\033\075\032\001\001\000\002\001\001\000\074\003" +
    "\046\014\075\015\035\016\064\017\014\020\063\021\051" +
    "\024\012\031\044\032\023\033\055\034\013\047\041\050" +
    "\016\051\050\052\031\056\027\057\047\061\163\062\071" +
    "\063\070\064\042\065\053\066\060\070\045\072\056\073" +
    "\024\074\033\075\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\036\120\040\107\041\111" +
    "\043\104\044\117\045\113\001\001\000\006\036\161\040" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\040\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\042\147\001\001" +
    "\000\004\040\155\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\036\120" +
    "\040\107\041\154\043\104\044\117\045\113\001\001\000" +
    "\006\037\126\046\142\001\001\000\016\036\123\040\107" +
    "\041\122\043\104\044\117\045\113\001\001\000\004\042" +
    "\147\001\001\000\006\037\126\046\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\146\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\036\143\040\107\001\001\000" +
    "\004\037\126\001\001\000\006\036\145\040\107\001\001" +
    "\000\004\037\126\001\001\000\002\001\001\000\016\036" +
    "\120\040\107\041\153\043\104\044\117\045\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\147\001\001\000\004\042\147\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\037\126\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\064\042\065\053\066" +
    "\060\070\205\071\204\072\203\073\024\075\206\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\066\216\001\001\000\002\001\001\000\004\067\212" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\067\212\001\001\000\002\001\001\000\022\064" +
    "\042\065\053\066\060\070\205\071\222\072\203\073\024" +
    "\075\206\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\021" +
    "\244\025\243\026\240\027\246\030\241\035\245\036\120" +
    "\040\107\041\247\043\104\044\117\045\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\042\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\022\260\023\262\025\261\035\245\036\120\040\107" +
    "\041\247\043\104\044\117\045\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\022\264\023\262\025\261\035\245\036\120\040" +
    "\107\041\247\043\104\044\117\045\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\064\042\065\053\066\060\070\205\071\274\072" +
    "\203\073\024\075\206\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\021\302\025\301\026\300\027\246\030" +
    "\241\035\245\036\120\040\107\041\247\043\104\044\117" +
    "\045\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\036\120\040\107\041" +
    "\307\043\104\044\117\045\113\001\001\000\004\042\147" +
    "\001\001\000\002\001\001\000\072\003\046\010\312\013" +
    "\036\014\061\015\035\016\064\017\014\020\063\021\051" +
    "\024\012\031\044\032\023\033\055\034\013\047\041\050" +
    "\016\051\050\052\031\056\027\057\047\064\042\065\053" +
    "\066\060\070\045\072\056\073\024\074\033\075\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\021\321\025\320\026\317\027\246\030\241\035" +
    "\245\036\120\040\107\041\247\043\104\044\117\045\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\053\330\054\325\001\001\000" +
    "\004\055\327\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\036\120\040\107\041\332\043\104\044\117\045" +
    "\113\001\001\000\004\042\147\001\001\000\002\001\001" +
    "\000\072\003\046\010\335\013\036\014\061\015\035\016" +
    "\064\017\014\020\063\021\051\024\012\031\044\032\023" +
    "\033\055\034\013\047\041\050\016\051\050\052\031\056" +
    "\027\057\047\064\042\065\053\066\060\070\045\072\056" +
    "\073\024\074\033\075\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\072\003\046\010\340\013\036\014\061" +
    "\015\035\016\064\017\014\020\063\021\051\024\012\031" +
    "\044\032\023\033\055\034\013\047\041\050\016\051\050" +
    "\052\031\056\027\057\047\064\042\065\053\066\060\070" +
    "\045\072\056\073\024\074\033\075\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\344\017\345\075\346\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\036" +
    "\120\040\107\041\351\043\104\044\117\045\113\001\001" +
    "\000\004\042\147\001\001\000\012\003\344\016\353\017" +
    "\014\075\346\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\076\003\046\014\075\015\035\016" +
    "\064\017\014\020\063\021\051\024\012\031\044\032\023" +
    "\033\055\034\013\047\041\050\016\051\050\052\031\056" +
    "\027\057\047\060\357\061\072\062\071\063\070\064\042" +
    "\065\053\066\060\070\045\072\056\073\024\074\033\075" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\u0108\007\u0102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\u010b\011\u010c\012\u010e\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\u010b\011\u0110\012\u010e\001\001\000\002\001\001\000" +
    "\072\003\046\010\u0112\013\036\014\061\015\035\016\064" +
    "\017\014\020\063\021\051\024\012\031\044\032\023\033" +
    "\055\034\013\047\041\050\016\051\050\052\031\056\027" +
    "\057\047\064\042\065\053\066\060\070\045\072\056\073" +
    "\024\074\033\075\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\072\003\046\010\u0116\013" +
    "\036\014\061\015\035\016\064\017\014\020\063\021\051" +
    "\024\012\031\044\032\023\033\055\034\013\047\041\050" +
    "\016\051\050\052\031\056\027\057\047\064\042\065\053" +
    "\066\060\070\045\072\056\073\024\074\033\075\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


    Lexer lex;
    private SymbolTable currentTable = new SymbolTable(null); // Tabla de símbolos
    private Stack<SymbolTable> symbolTableStack = new Stack<>();
    List<String> listaParams = new ArrayList<String>(); 

    @SuppressWarnings("deprecation")
    public parser(Lexer lex){
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }

    private void pushSymbolTable() {
        SymbolTable newTable = new SymbolTable(this.currentTable);
        symbolTableStack.push(this.currentTable);
        this.currentTable = newTable;
    }
    private void popSymbolTable() {
        this.currentTable = symbolTableStack.pop();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= nuevoLenguaje EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // nuevoLenguaje ::= funcionMain 
            {
              Object RESULT =null;
		System.out.println("Funcion main");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nuevoLenguaje",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // nuevoLenguaje ::= funcionMain funciones 
            {
              Object RESULT =null;
		System.out.println("Funciones y funcion main");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nuevoLenguaje",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // funcionMain ::= INT MAIN LPARENT RPARENT INIBLOQUE bloque FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionMain",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // funciones ::= funcion 
            {
              Object RESULT =null;
		 System.out.println("funcion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // funciones ::= funciones funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // funcion ::= tipoRet ID LPARENT parametros RPARENT INIBLOQUE bloque FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // funcion ::= tipoRet ID LPARENT RPARENT INIBLOQUE bloque FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipoRet ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoRet",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipoRet ::= FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoRet",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipoRet ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoRet",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parametros ::= parametro COMA parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parametro ::= tipoVar ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipoVar ::= FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVar",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipoVar ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVar",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipoVar ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVar",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // bloque ::= sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencias ::= sentencia sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia ::= creaVar 
            {
              Object RESULT =null;
		System.out.println("Sentencia Crea variable");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia ::= usaVar 
            {
              Object RESULT =null;
		System.out.println("Sentencia Usa variable");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia ::= asignacion 
            {
              Object RESULT =null;
		System.out.println("Sentencia Asignacion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencia ::= llamaFunc 
            {
              Object RESULT =null;
		System.out.println("Sentencia Llamada a funcion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentencia ::= output 
            {
              Object RESULT =null;
		System.out.println("Sentencia Salida");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencia ::= control 
            {
              Object RESULT =null;
		System.out.println("Sentencia Control");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentencia ::= returnFunc 
            {
              Object RESULT =null;
		System.out.println("Sentencia Return");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentencia ::= creaArreglo 
            {
              Object RESULT =null;
		System.out.println("Sentencia Creacion de arreglo");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentencia ::= asignaArreglo 
            {
              Object RESULT =null;
		System.out.println("Sentencia Asignacion de arreglo");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // usaVar ::= ID FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("usaVar",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // usaVar ::= PLUS_UN ID FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("usaVar",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // usaVar ::= MINUS_UN ID FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("usaVar",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // creaVar ::= tipoVar ID FINEXP 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("Variable: "+ n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaVar",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // creaVar ::= tipoSubset ID FINEXP 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("Variable: "+ n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaVar",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // asignacion ::= creaAsignaVar FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // asignacion ::= ID EQUIV literal FINEXP 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("Asignacion: "+ n + " = " + n3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // asignacion ::= ID EQUIV llamaFunc FINEXP 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("Asignacion: "+ n + " = " + n3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // asignacion ::= ID EQUIV input FINEXP 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("Asignacion: "+ n + " = " + n3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // creaAsignaVar ::= tipoVar ID EQUIV literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaAsignaVar",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // creaAsignaVar ::= tipoVar ID EQUIV llamaFunc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaAsignaVar",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // creaAsignaVar ::= tipoVar ID EQUIV input 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaAsignaVar",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // creaAsignaVar ::= tipoSubset ID EQUIV literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaAsignaVar",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // creaAsignaVar ::= tipoSubset ID EQUIV llamaFunc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaAsignaVar",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // creaAsignaVar ::= tipoSubset ID EQUIV input 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaAsignaVar",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // literal ::= operacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // literal ::= CADENA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Cadena: "+ n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // literal ::= CARACTER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Caracter: "+ n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // operacion ::= operacionLogica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operacionAritmetica ::= operandoArit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operacionAritmetica ::= PLUS_UN operandoArit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operacionAritmetica ::= MINUS_UN operandoArit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // operacionAritmetica ::= operacionAritmetica operadorArit operandoArit 
            {
              Object RESULT =null;
		System.out.println("Operacion Arit +-*/ Arit");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // operacionAritmetica ::= LPARENT operacionAritmetica RPARENT 
            {
              Object RESULT =null;
		System.out.println("Operacion Arit (Arit)");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // operacionAritmetica ::= MINUS operacionAritmetica 
            {
              Object RESULT =null;
		System.out.println("Operacion Arit -Arit");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // operadorArit ::= PLUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // operadorArit ::= MINUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // operadorArit ::= TIMES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // operadorArit ::= DIV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operadorArit ::= POWER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // operadorArit ::= MODULE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // operandoArit ::= ENTERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Entero: "+ n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // operandoArit ::= DECIMAL 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Decimal: "+ n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operandoArit ::= ID 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("ID: "+ n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // operacionRelacional ::= operacionAritmetica operadorRel operacionAritmetica 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println( "Operacion Relacional");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionRelacional",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // operadorRel ::= MAYOR_QUE 
            {
              Object RESULT =null;
		System.out.println(">");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // operadorRel ::= MAYOR_IGUAL 
            {
              Object RESULT =null;
		System.out.println(">=");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // operadorRel ::= MENOR_QUE 
            {
              Object RESULT =null;
		System.out.println("<");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operadorRel ::= MENOR_IGUAL 
            {
              Object RESULT =null;
		System.out.println("<=");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operadorRel ::= DEQUIV 
            {
              Object RESULT =null;
		System.out.println("==");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operadorRel ::= DIF 
            {
              Object RESULT =null;
		System.out.println("!=");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // operacionLogica ::= operandoLog 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionLogica",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operacionLogica ::= operacionRelacional 
            {
              Object RESULT =null;
		System.out.println("Operacion Rel");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionLogica",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operacionLogica ::= operacionAritmetica 
            {
              Object RESULT =null;
		System.out.println("Operacion Arit");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionLogica",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // operacionLogica ::= operacionLogica operadorLog operacionLogica 
            {
              Object RESULT =null;
		System.out.println("Operacion Logica");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionLogica",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // operacionLogica ::= LPARENT operacionLogica RPARENT 
            {
              Object RESULT =null;
		System.out.println("Parentesis");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionLogica",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // operacionLogica ::= negacion operacionLogica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionLogica",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // operandoLog ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoLog",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // operandoLog ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoLog",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // operadorLog ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLog",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // operadorLog ::= OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLog",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // negacion ::= NOT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("negacion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // negacion ::= EXCLAMACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("negacion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // llamaFunc ::= ID LPARENT parametrosLlamada RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamaFunc",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // llamaFunc ::= ID LPARENT RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamaFunc",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // parametrosLlamada ::= parametroLlamada 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosLlamada",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // parametrosLlamada ::= parametroLlamada COMA parametrosLlamada 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosLlamada",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // parametroLlamada ::= literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroLlamada",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // input ::= leeInt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("input",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // input ::= leeFloat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("input",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // leeInt ::= READ_INT LPARENT RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leeInt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // leeFloat ::= READ_FLOAT LPARENT RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leeFloat",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // output ::= escribeInt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("output",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // output ::= escribeFloat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("output",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // output ::= escribeString 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("output",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // escribeInt ::= PRINT_INT LPARENT ID RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribeInt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // escribeInt ::= PRINT_INT LPARENT ENTERO RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribeInt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // escribeFloat ::= PRINT_FLOAT LPARENT ID RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribeFloat",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // escribeFloat ::= PRINT_FLOAT LPARENT DECIMAL RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribeFloat",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // escribeString ::= PRINT_STRING LPARENT ID RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribeString",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // escribeString ::= PRINT_STRING LPARENT CADENA RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribeString",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // control ::= condicional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // control ::= ciclo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // condicional ::= condIf condsElif condElse 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // condicional ::= condIf condsElif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // condicional ::= condIf condElse 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // condicional ::= condIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // condIf ::= IF LPARENT operacionLogica RPARENT INIBLOQUE bloque FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condIf",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // condsElif ::= condElif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condsElif",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // condsElif ::= condElif condsElif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condsElif",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // condElif ::= ELIF LPARENT operacionLogica RPARENT INIBLOQUE bloque FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condElif",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // condElse ::= ELSE INIBLOQUE bloque FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condElse",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ciclo ::= cicloDoWhile 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ciclo ::= cicloFor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // cicloDoWhile ::= DO INIBLOQUE bloqueCiclo FINBLOQUE WHILE LPARENT operacionLogica RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cicloDoWhile",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // cicloFor ::= FOR LPARENT creaAsignaVar FINEXP operacionLogica FINEXP asignacion RPARENT INIBLOQUE bloqueCiclo FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cicloFor",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // bloqueCiclo ::= sentenciasCiclo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueCiclo",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // sentenciasCiclo ::= sentenciaCiclo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasCiclo",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // sentenciasCiclo ::= sentenciaCiclo sentenciasCiclo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasCiclo",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // sentenciaCiclo ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaCiclo",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // sentenciaCiclo ::= breakCiclo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaCiclo",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // breakCiclo ::= BREAK FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("breakCiclo",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // returnFunc ::= RETURN literal FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnFunc",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // asignaArreglo ::= asignaElementoArreglo FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaArreglo",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // asignaArreglo ::= creaAsignaArreglo FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaArreglo",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // arregloSinTam ::= tipoSubset ID LPARENT_CUAD RPARENT_CUAD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arregloSinTam",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // creaArreglo ::= tipoArreglo FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaArreglo",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // creaAsignaArreglo ::= tipoArreglo EQUIV INIBLOQUE asignaArreglos FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaAsignaArreglo",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // creaAsignaArreglo ::= arregloSinTam EQUIV INIBLOQUE asignaArreglos FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaAsignaArreglo",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // tipoArreglo ::= tipoSubset expArreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoArreglo",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // asignaArreglos ::= asignaArreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaArreglos",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // asignaArreglos ::= asignaArreglo COMA asignaArreglos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaArreglos",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // asignaArreglo ::= CARACTER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaArreglo",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // asignaArreglo ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaArreglo",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // asignaArreglo ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaArreglo",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // cantidadArreglo ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cantidadArreglo",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // cantidadArreglo ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cantidadArreglo",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // tipoSubset ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoSubset",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // tipoSubset ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoSubset",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // asignaElementoArreglo ::= expArreglo EQUIV ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaElementoArreglo",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // asignaElementoArreglo ::= expArreglo EQUIV CARACTER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaElementoArreglo",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // asignaElementoArreglo ::= expArreglo EQUIV ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaElementoArreglo",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // expArreglo ::= ID LPARENT_CUAD cantidadArreglo RPARENT_CUAD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArreglo",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
