
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ParserLexer;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\143\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\006\011\000\002\004\003\000\002\004\004" +
    "\000\002\005\012\000\002\005\011\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\011\003\000\002" +
    "\011\005\000\002\012\004\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\010\003\000\002\013\003\000\002\013\004\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\015\005\000\002\016" +
    "\004\000\002\016\006\000\002\016\006\000\002\016\006" +
    "\000\002\017\006\000\002\017\006\000\002\017\006\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\033\003\000\002\034\003\000\002\034\005\000\002\034" +
    "\005\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\043\005\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\044\003\000\002\044\003\000\002\044\003" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\037\005\000\002\037\005\000\002\037\004\000\002" +
    "\041\003\000\002\041\003\000\002\040\003\000\002\040" +
    "\003\000\002\042\003\000\002\042\003\000\002\020\007" +
    "\000\002\020\006\000\002\021\003\000\002\021\005\000" +
    "\002\022\003\000\002\024\003\000\002\024\003\000\002" +
    "\025\006\000\002\026\006\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\030\007\000\002\030\007" +
    "\000\002\031\007\000\002\031\007\000\002\032\007\000" +
    "\002\032\007\000\002\045\003\000\002\045\003\000\002" +
    "\047\005\000\002\047\004\000\002\047\004\000\002\047" +
    "\003\000\002\050\011\000\002\051\003\000\002\051\004" +
    "\000\002\052\011\000\002\053\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\266\000\004\004\006\001\002\000\004\002\270\001" +
    "\002\000\012\002\000\004\246\007\243\010\244\001\002" +
    "\000\004\014\007\001\002\000\004\054\010\001\002\000" +
    "\004\055\011\001\002\000\004\060\012\001\002\000\026" +
    "\004\014\005\017\006\031\007\033\010\030\015\022\026" +
    "\037\027\027\030\035\071\023\001\002\000\030\004\uffeb" +
    "\005\uffeb\006\uffeb\007\uffeb\010\uffeb\015\uffeb\026\uffeb\027" +
    "\uffeb\030\uffeb\061\uffeb\071\uffeb\001\002\000\004\071\ufff3" +
    "\001\002\000\004\061\uffee\001\002\000\004\071\233\001" +
    "\002\000\004\071\ufff1\001\002\000\004\063\232\001\002" +
    "\000\004\061\231\001\002\000\004\054\223\001\002\000" +
    "\006\053\163\054\164\001\002\000\030\004\uffea\005\uffea" +
    "\006\uffea\007\uffea\010\uffea\015\uffea\026\uffea\027\uffea\030" +
    "\uffea\061\uffea\071\uffea\001\002\000\030\004\uffe8\005\uffe8" +
    "\006\uffe8\007\uffe8\010\uffe8\015\uffe8\026\uffe8\027\uffe8\030" +
    "\uffe8\061\uffe8\071\uffe8\001\002\000\030\004\uffe7\005\uffe7" +
    "\006\uffe7\007\uffe7\010\uffe7\015\uffe7\026\uffe7\027\uffe7\030" +
    "\uffe7\061\uffe7\071\uffe7\001\002\000\004\054\154\001\002" +
    "\000\004\071\uffef\001\002\000\004\071\ufff0\001\002\000" +
    "\030\004\014\005\017\006\031\007\033\010\030\015\022" +
    "\026\037\027\027\030\035\061\uffed\071\023\001\002\000" +
    "\004\071\ufff2\001\002\000\030\004\uffa9\005\uffa9\006\uffa9" +
    "\007\uffa9\010\uffa9\015\uffa9\026\uffa9\027\uffa9\030\uffa9\061" +
    "\uffa9\071\uffa9\001\002\000\004\054\144\001\002\000\030" +
    "\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0\015\uffb0\026" +
    "\uffb0\027\uffb0\030\uffb0\061\uffb0\071\uffb0\001\002\000\004" +
    "\054\135\001\002\000\030\004\uffe9\005\uffe9\006\uffe9\007" +
    "\uffe9\010\uffe9\015\uffe9\026\uffe9\027\uffe9\030\uffe9\061\uffe9" +
    "\071\uffe9\001\002\000\030\004\uffa8\005\uffa8\006\uffa8\007" +
    "\uffa8\010\uffa8\015\uffa8\026\uffa8\027\uffa8\030\uffa8\061\uffa8" +
    "\071\uffa8\001\002\000\030\004\uffb1\005\uffb1\006\uffb1\007" +
    "\uffb1\010\uffb1\015\uffb1\026\uffb1\027\uffb1\030\uffb1\061\uffb1" +
    "\071\uffb1\001\002\000\034\004\uffa4\005\uffa4\006\uffa4\007" +
    "\uffa4\010\uffa4\015\uffa4\016\046\017\045\026\uffa4\027\uffa4" +
    "\030\uffa4\061\uffa4\071\uffa4\001\002\000\030\004\uffb2\005" +
    "\uffb2\006\uffb2\007\uffb2\010\uffb2\015\uffb2\026\uffb2\027\uffb2" +
    "\030\uffb2\061\uffb2\071\uffb2\001\002\000\004\060\132\001" +
    "\002\000\004\054\054\001\002\000\030\004\uffa5\005\uffa5" +
    "\006\uffa5\007\uffa5\010\uffa5\015\uffa5\026\uffa5\027\uffa5\030" +
    "\uffa5\061\uffa5\071\uffa5\001\002\000\034\004\uffa2\005\uffa2" +
    "\006\uffa2\007\uffa2\010\uffa2\015\uffa2\016\046\017\uffa2\026" +
    "\uffa2\027\uffa2\030\uffa2\061\uffa2\071\uffa2\001\002\000\032" +
    "\004\uffa6\005\uffa6\006\uffa6\007\uffa6\010\uffa6\015\uffa6\017" +
    "\045\026\uffa6\027\uffa6\030\uffa6\061\uffa6\071\uffa6\001\002" +
    "\000\030\004\uffa7\005\uffa7\006\uffa7\007\uffa7\010\uffa7\015" +
    "\uffa7\026\uffa7\027\uffa7\030\uffa7\061\uffa7\071\uffa7\001\002" +
    "\000\032\004\uffa1\005\uffa1\006\uffa1\007\uffa1\010\uffa1\015" +
    "\uffa1\017\uffa1\026\uffa1\027\uffa1\030\uffa1\061\uffa1\071\uffa1" +
    "\001\002\000\022\011\060\012\065\043\067\044\056\054" +
    "\072\064\062\065\055\071\066\001\002\000\044\031\uffd0" +
    "\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\041\uffd0\042" +
    "\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0" +
    "\055\uffd0\062\uffd0\063\uffd0\001\002\000\022\011\uffbc\012" +
    "\uffbc\043\uffbc\044\uffbc\054\uffbc\064\uffbc\065\uffbc\071\uffbc" +
    "\001\002\000\014\041\uffc7\042\uffc7\055\uffc7\062\uffc7\063" +
    "\uffc7\001\002\000\014\041\uffc1\042\uffc1\055\uffc1\062\uffc1" +
    "\063\uffc1\001\002\000\044\031\uffda\032\uffda\033\uffda\034" +
    "\uffda\035\uffda\036\uffda\041\uffda\042\uffda\045\uffda\046\uffda" +
    "\047\uffda\050\uffda\051\uffda\052\uffda\055\uffda\062\uffda\063" +
    "\uffda\001\002\000\044\031\uffd1\032\uffd1\033\uffd1\034\uffd1" +
    "\035\uffd1\036\uffd1\041\uffd1\042\uffd1\045\uffd1\046\uffd1\047" +
    "\uffd1\050\uffd1\051\uffd1\052\uffd1\055\uffd1\062\uffd1\063\uffd1" +
    "\001\002\000\010\041\121\042\123\055\126\001\002\000" +
    "\014\041\uffc6\042\uffc6\055\uffc6\062\uffc6\063\uffc6\001\002" +
    "\000\014\041\uffc0\042\uffc0\055\uffc0\062\uffc0\063\uffc0\001" +
    "\002\000\044\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf" +
    "\036\uffcf\041\uffcf\042\uffcf\045\uffcf\046\uffcf\047\uffcf\050" +
    "\uffcf\051\uffcf\052\uffcf\055\uffcf\062\uffcf\063\uffcf\001\002" +
    "\000\022\011\uffbd\012\uffbd\043\uffbd\044\uffbd\054\uffbd\064" +
    "\uffbd\065\uffbd\071\uffbd\001\002\000\022\011\060\012\065" +
    "\043\067\044\056\054\072\064\062\065\055\071\066\001" +
    "\002\000\044\031\104\032\077\033\110\034\106\035\107" +
    "\036\100\041\uffc5\042\uffc5\045\101\046\102\047\105\050" +
    "\112\051\111\052\103\055\uffc5\062\uffc5\063\uffc5\001\002" +
    "\000\022\011\060\012\065\043\067\044\056\054\072\064" +
    "\062\065\055\071\066\001\002\000\010\041\121\042\123" +
    "\055\122\001\002\000\040\031\104\032\077\033\110\034" +
    "\106\035\107\036\100\041\uffc5\042\uffc5\045\101\046\102" +
    "\047\105\050\112\051\111\052\103\055\075\001\002\000" +
    "\044\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8" +
    "\041\uffd8\042\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\051" +
    "\uffd8\052\uffd8\055\uffd8\062\uffd8\063\uffd8\001\002\000\010" +
    "\064\062\065\055\071\066\001\002\000\010\064\uffd6\065" +
    "\uffd6\071\uffd6\001\002\000\010\064\uffd2\065\uffd2\071\uffd2" +
    "\001\002\000\012\054\uffcd\064\uffcd\065\uffcd\071\uffcd\001" +
    "\002\000\012\054\uffcc\064\uffcc\065\uffcc\071\uffcc\001\002" +
    "\000\012\054\uffc8\064\uffc8\065\uffc8\071\uffc8\001\002\000" +
    "\010\064\uffd7\065\uffd7\071\uffd7\001\002\000\012\054\uffcb" +
    "\064\uffcb\065\uffcb\071\uffcb\001\002\000\010\064\uffd4\065" +
    "\uffd4\071\uffd4\001\002\000\010\064\uffd3\065\uffd3\071\uffd3" +
    "\001\002\000\010\064\uffd5\065\uffd5\071\uffd5\001\002\000" +
    "\012\054\uffc9\064\uffc9\065\uffc9\071\uffc9\001\002\000\012" +
    "\054\uffca\064\uffca\065\uffca\071\uffca\001\002\000\012\054" +
    "\115\064\062\065\055\071\066\001\002\000\030\031\104" +
    "\032\077\033\110\034\106\035\107\036\100\041\uffce\042" +
    "\uffce\055\uffce\062\uffce\063\uffce\001\002\000\012\054\115" +
    "\064\062\065\055\071\066\001\002\000\020\031\104\032" +
    "\077\033\110\034\106\035\107\036\100\055\075\001\002" +
    "\000\044\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036" +
    "\uffd9\041\uffd9\042\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9" +
    "\051\uffd9\052\uffd9\055\uffd9\062\uffd9\063\uffd9\001\002\000" +
    "\022\011\060\012\065\043\067\044\056\054\072\064\062" +
    "\065\055\071\066\001\002\000\022\011\uffbf\012\uffbf\043" +
    "\uffbf\044\uffbf\054\uffbf\064\uffbf\065\uffbf\071\uffbf\001\002" +
    "\000\014\041\uffc3\042\uffc3\055\uffc3\062\uffc3\063\uffc3\001" +
    "\002\000\022\011\uffbe\012\uffbe\043\uffbe\044\uffbe\054\uffbe" +
    "\064\uffbe\065\uffbe\071\uffbe\001\002\000\014\041\121\042" +
    "\123\055\uffc4\062\uffc4\063\uffc4\001\002\000\014\041\121" +
    "\042\123\055\uffc2\062\uffc2\063\uffc2\001\002\000\004\060" +
    "\127\001\002\000\026\004\014\005\017\006\031\007\033" +
    "\010\030\015\022\026\037\027\027\030\035\071\023\001" +
    "\002\000\004\061\131\001\002\000\034\004\uffa0\005\uffa0" +
    "\006\uffa0\007\uffa0\010\uffa0\015\uffa0\016\uffa0\017\uffa0\026" +
    "\uffa0\027\uffa0\030\uffa0\061\uffa0\071\uffa0\001\002\000\026" +
    "\004\014\005\017\006\031\007\033\010\030\015\022\026" +
    "\037\027\027\030\035\071\023\001\002\000\004\061\134" +
    "\001\002\000\030\004\uff9f\005\uff9f\006\uff9f\007\uff9f\010" +
    "\uff9f\015\uff9f\026\uff9f\027\uff9f\030\uff9f\061\uff9f\071\uff9f" +
    "\001\002\000\006\064\137\071\136\001\002\000\004\055" +
    "\142\001\002\000\004\055\140\001\002\000\004\063\141" +
    "\001\002\000\030\004\uffae\005\uffae\006\uffae\007\uffae\010" +
    "\uffae\015\uffae\026\uffae\027\uffae\030\uffae\061\uffae\071\uffae" +
    "\001\002\000\004\063\143\001\002\000\030\004\uffaf\005" +
    "\uffaf\006\uffaf\007\uffaf\010\uffaf\015\uffaf\026\uffaf\027\uffaf" +
    "\030\uffaf\061\uffaf\071\uffaf\001\002\000\006\066\146\071" +
    "\145\001\002\000\004\055\151\001\002\000\004\055\147" +
    "\001\002\000\004\063\150\001\002\000\030\004\uffaa\005" +
    "\uffaa\006\uffaa\007\uffaa\010\uffaa\015\uffaa\026\uffaa\027\uffaa" +
    "\030\uffaa\061\uffaa\071\uffaa\001\002\000\004\063\152\001" +
    "\002\000\030\004\uffab\005\uffab\006\uffab\007\uffab\010\uffab" +
    "\015\uffab\026\uffab\027\uffab\030\uffab\061\uffab\071\uffab\001" +
    "\002\000\004\061\uffec\001\002\000\006\065\156\071\155" +
    "\001\002\000\004\055\161\001\002\000\004\055\157\001" +
    "\002\000\004\063\160\001\002\000\030\004\uffac\005\uffac" +
    "\006\uffac\007\uffac\010\uffac\015\uffac\026\uffac\027\uffac\030" +
    "\uffac\061\uffac\071\uffac\001\002\000\004\063\162\001\002" +
    "\000\030\004\uffad\005\uffad\006\uffad\007\uffad\010\uffad\015" +
    "\uffad\026\uffad\027\uffad\030\uffad\061\uffad\071\uffad\001\002" +
    "\000\032\011\060\012\065\024\206\025\203\043\067\044" +
    "\056\054\072\064\062\065\055\066\165\070\167\071\202" +
    "\001\002\000\030\011\060\012\065\043\067\044\056\054" +
    "\072\055\166\064\062\065\055\066\165\070\167\071\066" +
    "\001\002\000\010\055\uffdd\062\uffdd\063\uffdd\001\002\000" +
    "\004\063\201\001\002\000\010\055\uffdc\062\uffdc\063\uffdc" +
    "\001\002\000\004\055\177\001\002\000\006\055\uffb7\062" +
    "\uffb7\001\002\000\006\055\uffb9\062\175\001\002\000\010" +
    "\055\uffde\062\uffde\063\uffde\001\002\000\014\041\121\042" +
    "\123\055\uffdb\062\uffdb\063\uffdb\001\002\000\026\011\060" +
    "\012\065\043\067\044\056\054\072\064\062\065\055\066" +
    "\165\070\167\071\066\001\002\000\004\055\uffb8\001\002" +
    "\000\004\063\200\001\002\000\032\004\uffbb\005\uffbb\006" +
    "\uffbb\007\uffbb\010\uffbb\015\uffbb\026\uffbb\027\uffbb\030\uffbb" +
    "\061\uffbb\063\uffbb\071\uffbb\001\002\000\032\004\uffba\005" +
    "\uffba\006\uffba\007\uffba\010\uffba\015\uffba\026\uffba\027\uffba" +
    "\030\uffba\061\uffba\063\uffba\071\uffba\001\002\000\042\031" +
    "\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\041\uffcf" +
    "\042\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052" +
    "\uffcf\054\164\063\uffcf\001\002\000\004\054\220\001\002" +
    "\000\004\063\217\001\002\000\004\063\uffb5\001\002\000" +
    "\004\054\214\001\002\000\004\063\213\001\002\000\004" +
    "\063\212\001\002\000\004\063\uffb6\001\002\000\030\004" +
    "\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\015\uffe3\026\uffe3" +
    "\027\uffe3\030\uffe3\061\uffe3\071\uffe3\001\002\000\030\004" +
    "\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\015\uffe4\026\uffe4" +
    "\027\uffe4\030\uffe4\061\uffe4\071\uffe4\001\002\000\004\055" +
    "\215\001\002\000\004\063\216\001\002\000\004\063\uffb4" +
    "\001\002\000\030\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010" +
    "\uffe2\015\uffe2\026\uffe2\027\uffe2\030\uffe2\061\uffe2\071\uffe2" +
    "\001\002\000\004\055\221\001\002\000\004\063\222\001" +
    "\002\000\004\063\uffb3\001\002\000\022\011\060\012\065" +
    "\043\067\044\056\054\072\064\062\065\055\071\066\001" +
    "\002\000\010\041\121\042\123\055\225\001\002\000\004" +
    "\060\226\001\002\000\026\004\014\005\017\006\031\007" +
    "\033\010\030\015\022\026\037\027\027\030\035\071\023" +
    "\001\002\000\004\061\230\001\002\000\034\004\uffa3\005" +
    "\uffa3\006\uffa3\007\uffa3\010\uffa3\015\uffa3\016\uffa3\017\uffa3" +
    "\026\uffa3\027\uffa3\030\uffa3\061\uffa3\071\uffa3\001\002\000" +
    "\012\002\ufffe\004\ufffe\007\ufffe\010\ufffe\001\002\000\030" +
    "\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\015\uffe5\026" +
    "\uffe5\027\uffe5\030\uffe5\061\uffe5\071\uffe5\001\002\000\006" +
    "\053\234\063\235\001\002\000\032\011\060\012\065\024" +
    "\206\025\203\043\067\044\056\054\072\064\062\065\055" +
    "\066\165\070\167\071\202\001\002\000\030\004\uffe6\005" +
    "\uffe6\006\uffe6\007\uffe6\010\uffe6\015\uffe6\026\uffe6\027\uffe6" +
    "\030\uffe6\061\uffe6\071\uffe6\001\002\000\004\063\uffdf\001" +
    "\002\000\004\063\uffe1\001\002\000\004\063\uffe0\001\002" +
    "\000\004\071\250\001\002\000\012\002\ufffd\004\ufffd\007" +
    "\ufffd\010\ufffd\001\002\000\004\071\ufff8\001\002\000\004" +
    "\071\ufff7\001\002\000\012\002\uffff\004\246\007\243\010" +
    "\244\001\002\000\004\071\ufff9\001\002\000\012\002\ufffc" +
    "\004\ufffc\007\ufffc\010\ufffc\001\002\000\004\054\251\001" +
    "\002\000\016\004\014\005\017\006\031\007\033\010\030" +
    "\055\252\001\002\000\004\060\265\001\002\000\006\055" +
    "\ufff6\062\263\001\002\000\004\071\262\001\002\000\004" +
    "\055\256\001\002\000\004\060\257\001\002\000\026\004" +
    "\014\005\017\006\031\007\033\010\030\015\022\026\037" +
    "\027\027\030\035\071\023\001\002\000\004\061\261\001" +
    "\002\000\012\002\ufffb\004\ufffb\007\ufffb\010\ufffb\001\002" +
    "\000\006\055\ufff4\062\ufff4\001\002\000\014\004\014\005" +
    "\017\006\031\007\033\010\030\001\002\000\004\055\ufff5" +
    "\001\002\000\026\004\014\005\017\006\031\007\033\010" +
    "\030\015\022\026\037\027\027\030\035\071\023\001\002" +
    "\000\004\061\267\001\002\000\012\002\ufffa\004\ufffa\007" +
    "\ufffa\010\ufffa\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\266\000\006\002\003\006\004\001\001\000\002\001" +
    "\001\000\010\004\244\005\241\007\240\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\003\015\010\020\013\014\014\031\015\012" +
    "\016\023\017\017\020\037\027\024\030\043\031\041\032" +
    "\035\045\025\046\040\047\033\050\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\003\015\013\152\014" +
    "\031\015\012\016\023\017\017\020\037\027\024\030\043" +
    "\031\041\032\035\045\025\046\040\047\033\050\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\051\050\052\047" +
    "\053\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\051\052\052\047" +
    "\001\001\000\004\053\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\034\070\036\060\037\062\041\056" +
    "\042\067\043\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\034\070\036\060\037\124\041\056\042\067\043" +
    "\063\001\001\000\006\035\075\044\112\001\001\000\016" +
    "\034\073\036\060\037\072\041\056\042\067\043\063\001" +
    "\001\000\004\040\117\001\001\000\006\035\075\044\112" +
    "\001\001\000\002\001\001\000\004\036\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\034\113\036" +
    "\060\001\001\000\004\035\075\001\001\000\006\034\115" +
    "\036\060\001\001\000\004\035\075\001\001\000\002\001" +
    "\001\000\016\034\070\036\060\037\123\041\056\042\067" +
    "\043\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\117\001\001\000\004\040\117" +
    "\001\001\000\002\001\001\000\042\003\015\010\127\013" +
    "\014\014\031\015\012\016\023\017\017\020\037\027\024" +
    "\030\043\031\041\032\035\045\025\046\040\047\033\050" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\003\015\010\132\013\014\014\031\015\012\016\023\017" +
    "\017\020\037\027\024\030\043\031\041\032\035\045\025" +
    "\046\040\047\033\050\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\020\207\023\206\024\203\025\210\026\204\033" +
    "\172\034\070\036\060\037\173\041\056\042\067\043\063" +
    "\001\001\000\026\021\167\022\171\023\170\033\172\034" +
    "\070\036\060\037\173\041\056\042\067\043\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\040\117\001\001\000\026\021\175\022" +
    "\171\023\170\033\172\034\070\036\060\037\173\041\056" +
    "\042\067\043\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\034\070\036\060\037\223\041\056\042\067\043\063" +
    "\001\001\000\004\040\117\001\001\000\002\001\001\000" +
    "\042\003\015\010\226\013\014\014\031\015\012\016\023" +
    "\017\017\020\037\027\024\030\043\031\041\032\035\045" +
    "\025\046\040\047\033\050\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\020\237\023\236\024\235\025\210" +
    "\026\204\033\172\034\070\036\060\037\173\041\056\042" +
    "\067\043\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\246\007\240\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\253\011\254\012\252" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\003\015" +
    "\010\257\013\014\014\031\015\012\016\023\017\017\020" +
    "\037\027\024\030\043\031\041\032\035\045\025\046\040" +
    "\047\033\050\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\253\011\263\012\252" +
    "\001\001\000\002\001\001\000\042\003\015\010\265\013" +
    "\014\014\031\015\012\016\023\017\017\020\037\027\024" +
    "\030\043\031\041\032\035\045\025\046\040\047\033\050" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


    Lexer lex;

    @SuppressWarnings("deprecation")
    public parser(Lexer lex){
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= nuevoLenguaje EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // nuevoLenguaje ::= funcionMain 
            {
              Object RESULT =null;
		System.out.println("Funcion main");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nuevoLenguaje",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // nuevoLenguaje ::= funcionMain funciones 
            {
              Object RESULT =null;
		System.out.println("Funciones y funcion main");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nuevoLenguaje",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // funcionMain ::= INT MAIN LPARENT RPARENT INIBLOQUE bloque FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionMain",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // funciones ::= funcion 
            {
              Object RESULT =null;
		 System.out.println("funcion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // funciones ::= funciones funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // funcion ::= tipoRet ID LPARENT parametros RPARENT INIBLOQUE bloque FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // funcion ::= tipoRet ID LPARENT RPARENT INIBLOQUE bloque FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipoRet ::= INT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(n + " de tipo ret");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoRet",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipoRet ::= FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoRet",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipoRet ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoRet",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parametros ::= parametro COMA parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parametro ::= tipoVar ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipoVar ::= INT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVar",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipoVar ::= FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVar",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipoVar ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVar",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipoVar ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVar",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipoVar ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVar",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bloque ::= sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencias ::= sentencia sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia ::= creaVar 
            {
              Object RESULT =null;
		System.out.println("Sentencia Crea variable");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencia ::= asignacion 
            {
              Object RESULT =null;
		System.out.println("Sentencia Asignacion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentencia ::= llamaFunc 
            {
              Object RESULT =null;
		System.out.println("Sentencia Llamada a funcion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencia ::= output 
            {
              Object RESULT =null;
		System.out.println("Sentencia Salida");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentencia ::= control 
            {
              Object RESULT =null;
		System.out.println("Sentencia Control");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // creaVar ::= tipoVar ID FINEXP 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("Variable: "+ n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaVar",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // asignacion ::= creaAsignaVar FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // asignacion ::= ID EQUIV literal FINEXP 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("Asignacion: "+ n + " = " + n3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // asignacion ::= ID EQUIV llamaFunc FINEXP 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("Asignacion: "+ n + " = " + n3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // asignacion ::= ID EQUIV input FINEXP 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("Asignacion: "+ n + " = " + n3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // creaAsignaVar ::= tipoVar ID EQUIV literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaAsignaVar",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // creaAsignaVar ::= tipoVar ID EQUIV llamaFunc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaAsignaVar",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // creaAsignaVar ::= tipoVar ID EQUIV input 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaAsignaVar",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // literal ::= operacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // literal ::= CADENA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Cadena: "+ n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // literal ::= CARACTER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operacion ::= operacionLogica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operacionAritmetica ::= operandoArit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operacionAritmetica ::= operacionAritmetica operadorArit operandoArit 
            {
              Object RESULT =null;
		System.out.println("Operacion Arit +-*/ Arit");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operacionAritmetica ::= LPARENT operacionAritmetica RPARENT 
            {
              Object RESULT =null;
		System.out.println("Operacion Arit (Arit)");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operadorArit ::= PLUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operadorArit ::= MINUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operadorArit ::= TIMES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operadorArit ::= DIV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operadorArit ::= POWER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // operadorArit ::= MODULE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operandoArit ::= ENTERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Entero: "+ n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operandoArit ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operandoArit ::= ID 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Entero: "+ n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // operacionRelacional ::= operacionAritmetica operadorRel operacionAritmetica 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println( "Operacion Arit >=<== Arit");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionRelacional",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // operadorRel ::= MAYOR_QUE 
            {
              Object RESULT =null;
		System.out.println(">");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // operadorRel ::= MAYOR_IGUAL 
            {
              Object RESULT =null;
		System.out.println(">=");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // operadorRel ::= MENOR_QUE 
            {
              Object RESULT =null;
		System.out.println("<");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // operadorRel ::= MENOR_IGUAL 
            {
              Object RESULT =null;
		System.out.println("<=");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // operadorRel ::= DEQUIV 
            {
              Object RESULT =null;
		System.out.println("==");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // operadorRel ::= DIF 
            {
              Object RESULT =null;
		System.out.println("!=");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operacionLogica ::= operandoLog 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionLogica",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // operacionLogica ::= operacionRelacional 
            {
              Object RESULT =null;
		System.out.println("Operacion Rel");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionLogica",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // operacionLogica ::= operacionAritmetica 
            {
              Object RESULT =null;
		System.out.println("Operacion Arit");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionLogica",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // operacionLogica ::= operacionLogica operadorLog operacionLogica 
            {
              Object RESULT =null;
		System.out.println("Operacion Logica");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionLogica",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operacionLogica ::= LPARENT operacionLogica RPARENT 
            {
              Object RESULT =null;
		System.out.println("Parentesis");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionLogica",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // operacionLogica ::= negacion operacionLogica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionLogica",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // operandoLog ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoLog",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // operandoLog ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoLog",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // operadorLog ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLog",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operadorLog ::= OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLog",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // negacion ::= NOT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("negacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // negacion ::= EXCLAMACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("negacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // llamaFunc ::= ID LPARENT parametrosLlamada RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamaFunc",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // llamaFunc ::= ID LPARENT RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamaFunc",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // parametrosLlamada ::= parametroLlamada 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosLlamada",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // parametrosLlamada ::= parametroLlamada COMA parametrosLlamada 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosLlamada",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // parametroLlamada ::= literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroLlamada",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // input ::= leeInt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("input",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // input ::= leeFloat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("input",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // leeInt ::= READ_INT LPARENT RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leeInt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // leeFloat ::= READ_FLOAT LPARENT RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leeFloat",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // output ::= escribeInt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("output",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // output ::= escribeFloat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("output",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // output ::= escribeString 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("output",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // escribeInt ::= PRINT_INT LPARENT ID RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribeInt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // escribeInt ::= PRINT_INT LPARENT ENTERO RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribeInt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // escribeFloat ::= PRINT_FLOAT LPARENT ID RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribeFloat",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // escribeFloat ::= PRINT_FLOAT LPARENT DECIMAL RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribeFloat",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // escribeString ::= PRINT_STRING LPARENT ID RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribeString",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // escribeString ::= PRINT_STRING LPARENT CADENA RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribeString",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // control ::= condicional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // control ::= ciclo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // condicional ::= condIf condsElif condElse 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // condicional ::= condIf condsElif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // condicional ::= condIf condElse 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // condicional ::= condIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // condIf ::= IF LPARENT operacionLogica RPARENT INIBLOQUE bloque FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condIf",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // condsElif ::= condElif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condsElif",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // condsElif ::= condElif condsElif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condsElif",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // condElif ::= ELIF LPARENT operacionLogica RPARENT INIBLOQUE bloque FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condElif",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // condElse ::= ELSE INIBLOQUE bloque FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condElse",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
