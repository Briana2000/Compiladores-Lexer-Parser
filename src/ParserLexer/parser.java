
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ParserLexer;

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\226\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\006\010\000\002\006\003\000\002\004\003" +
    "\000\002\004\004\000\002\005\011\000\002\005\010\000" +
    "\002\005\011\000\002\005\010\000\002\005\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\010" +
    "\004\000\002\011\003\000\002\011\003\000\002\013\003" +
    "\000\002\013\005\000\002\014\004\000\002\014\004\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\012\003\000\002\015\003\000\002\015\004\000\002\016" +
    "\004\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\022\004\000\002\022\005\000\002\022\005\000\002\017" +
    "\004\000\002\017\004\000\002\020\004\000\002\020\006" +
    "\000\002\020\006\000\002\020\006\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\037" +
    "\003\000\002\040\003\000\002\040\004\000\002\040\004" +
    "\000\002\040\005\000\002\040\005\000\002\040\004\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\042" +
    "\003\000\002\042\003\000\002\042\003\000\002\047\005" +
    "\000\002\050\003\000\002\050\003\000\002\050\003\000" +
    "\002\050\003\000\002\050\003\000\002\050\003\000\002" +
    "\043\003\000\002\043\003\000\002\043\003\000\002\043" +
    "\005\000\002\043\005\000\002\043\004\000\002\045\003" +
    "\000\002\045\003\000\002\044\003\000\002\044\003\000" +
    "\002\046\003\000\002\046\003\000\002\023\006\000\002" +
    "\023\005\000\002\024\003\000\002\024\005\000\002\025" +
    "\003\000\002\030\003\000\002\030\003\000\002\031\006" +
    "\000\002\032\006\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\034\007\000\002\034\007\000\002" +
    "\035\007\000\002\035\007\000\002\036\007\000\002\036" +
    "\007\000\002\051\003\000\002\051\003\000\002\053\005" +
    "\000\002\053\004\000\002\053\004\000\002\053\003\000" +
    "\002\054\011\000\002\055\003\000\002\055\004\000\002" +
    "\056\011\000\002\057\006\000\002\052\003\000\002\052" +
    "\003\000\002\060\013\000\002\061\015\000\002\062\003" +
    "\000\002\063\003\000\002\063\004\000\002\064\003\000" +
    "\002\064\003\000\002\065\004\000\002\026\005\000\002" +
    "\072\004\000\002\072\004\000\002\066\006\000\002\077" +
    "\004\000\002\076\007\000\002\076\007\000\002\076\005" +
    "\000\002\075\004\000\002\073\003\000\002\073\005\000" +
    "\002\074\003\000\002\074\003\000\002\074\003\000\002" +
    "\071\003\000\002\071\003\000\002\100\003\000\002\100" +
    "\003\000\002\067\005\000\002\067\005\000\002\067\005" +
    "\000\002\070\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011b\000\012\003\007\004\013\007\011\010\012\001" +
    "\002\000\004\002\u011d\001\002\000\014\002\000\003\u0103" +
    "\004\013\007\011\010\012\001\002\000\006\014\u0102\070" +
    "\u0100\001\002\000\014\002\ufffd\003\ufffd\004\ufffd\007\ufffd" +
    "\010\ufffd\001\002\000\004\054\014\001\002\000\006\014" +
    "\ufff4\070\ufff4\001\002\000\006\014\ufff3\070\ufff3\001\002" +
    "\000\006\014\ufff5\070\ufff5\001\002\000\004\055\015\001" +
    "\002\000\004\060\016\001\002\000\042\003\050\004\025" +
    "\005\022\006\066\007\063\010\043\013\046\015\036\020" +
    "\072\022\031\026\024\027\026\030\071\037\056\040\060" +
    "\070\041\001\002\000\046\003\uffdf\004\uffdf\005\uffdf\006" +
    "\uffdf\007\uffdf\010\uffdf\013\uffdf\015\uffdf\020\uffdf\022\uffdf" +
    "\023\uffdf\026\uffdf\027\uffdf\030\uffdf\037\uffdf\040\uffdf\061" +
    "\uffdf\070\uffdf\001\002\000\046\003\uff9d\004\uff9d\005\uff9d" +
    "\006\uff9d\007\uff9d\010\uff9d\013\uff9d\015\uff9d\020\uff9d\022" +
    "\uff9d\023\uff9d\026\uff9d\027\uff9d\030\uff9d\037\uff9d\040\uff9d" +
    "\061\uff9d\070\uff9d\001\002\000\004\063\377\001\002\000" +
    "\004\070\uff70\001\002\000\046\003\uff95\004\uff95\005\uff95" +
    "\006\uff95\007\uff95\010\uff95\013\uff95\015\uff95\020\uff95\022" +
    "\uff95\023\uff95\026\uff95\027\uff95\030\uff95\037\uff95\040\uff95" +
    "\061\uff95\070\uff95\001\002\000\004\054\370\001\002\000" +
    "\004\070\uff71\001\002\000\004\054\361\001\002\000\046" +
    "\003\uff9f\004\uff9f\005\uff9f\006\uff9f\007\uff9f\010\uff9f\013" +
    "\uff9f\015\uff9f\020\uff9f\022\uff9f\023\uff9f\026\uff9f\027\uff9f" +
    "\030\uff9f\037\uff9f\040\uff9f\061\uff9f\070\uff9f\001\002\000" +
    "\004\063\360\001\002\000\004\054\342\001\002\000\004" +
    "\061\341\001\002\000\046\003\uff8b\004\uff8b\005\uff8b\006" +
    "\uff8b\007\uff8b\010\uff8b\013\uff8b\015\uff8b\020\uff8b\022\uff8b" +
    "\023\uff8b\026\uff8b\027\uff8b\030\uff8b\037\uff8b\040\uff8b\061" +
    "\uff8b\070\uff8b\001\002\000\052\003\uff91\004\uff91\005\uff91" +
    "\006\uff91\007\uff91\010\uff91\013\uff91\015\uff91\016\322\017" +
    "\321\020\uff91\022\uff91\023\uff91\026\uff91\027\uff91\030\uff91" +
    "\037\uff91\040\uff91\061\uff91\070\uff91\001\002\000\004\070" +
    "\315\001\002\000\004\054\307\001\002\000\046\003\uffde" +
    "\004\uffde\005\uffde\006\uffde\007\uffde\010\uffde\013\uffde\015" +
    "\uffde\020\uffde\022\uffde\023\uffde\026\uffde\027\uffde\030\uffde" +
    "\037\uffde\040\uffde\061\uffde\070\uffde\001\002\000\006\053" +
    "\302\063\303\001\002\000\012\053\242\054\245\056\244" +
    "\063\243\001\002\000\004\061\uffe8\001\002\000\004\070" +
    "\uffe9\001\002\000\046\003\uffe0\004\uffe0\005\uffe0\006\uffe0" +
    "\007\uffe0\010\uffe0\013\uffe0\015\uffe0\020\uffe0\022\uffe0\023" +
    "\uffe0\026\uffe0\027\uffe0\030\uffe0\037\uffe0\040\uffe0\061\uffe0" +
    "\070\uffe0\001\002\000\006\053\234\061\235\001\002\000" +
    "\036\003\227\011\112\012\120\032\105\037\116\040\111" +
    "\043\124\044\107\054\125\064\113\065\106\066\225\067" +
    "\226\070\121\001\002\000\046\003\uffe1\004\uffe1\005\uffe1" +
    "\006\uffe1\007\uffe1\010\uffe1\013\uffe1\015\uffe1\020\uffe1\022" +
    "\uffe1\023\uffe1\026\uffe1\027\uffe1\030\uffe1\037\uffe1\040\uffe1" +
    "\061\uffe1\070\uffe1\001\002\000\046\003\uffdc\004\uffdc\005" +
    "\uffdc\006\uffdc\007\uffdc\010\uffdc\013\uffdc\015\uffdc\020\uffdc" +
    "\022\uffdc\023\uffdc\026\uffdc\027\uffdc\030\uffdc\037\uffdc\040" +
    "\uffdc\061\uffdc\070\uffdc\001\002\000\046\003\uffdd\004\uffdd" +
    "\005\uffdd\006\uffdd\007\uffdd\010\uffdd\013\uffdd\015\uffdd\020" +
    "\uffdd\022\uffdd\023\uffdd\026\uffdd\027\uffdd\030\uffdd\037\uffdd" +
    "\040\uffdd\061\uffdd\070\uffdd\001\002\000\004\070\224\001" +
    "\002\000\046\003\uff8a\004\uff8a\005\uff8a\006\uff8a\007\uff8a" +
    "\010\uff8a\013\uff8a\015\uff8a\020\uff8a\022\uff8a\023\uff8a\026" +
    "\uff8a\027\uff8a\030\uff8a\037\uff8a\040\uff8a\061\uff8a\070\uff8a" +
    "\001\002\000\046\003\uff96\004\uff96\005\uff96\006\uff96\007" +
    "\uff96\010\uff96\013\uff96\015\uff96\020\uff96\022\uff96\023\uff96" +
    "\026\uff96\027\uff96\030\uff96\037\uff96\040\uff96\061\uff96\070" +
    "\uff96\001\002\000\046\003\uffe2\004\uffe2\005\uffe2\006\uffe2" +
    "\007\uffe2\010\uffe2\013\uffe2\015\uffe2\020\uffe2\022\uffe2\023" +
    "\uffe2\026\uffe2\027\uffe2\030\uffe2\037\uffe2\040\uffe2\061\uffe2" +
    "\070\uffe2\001\002\000\004\070\222\001\002\000\004\063" +
    "\221\001\002\000\004\070\217\001\002\000\046\003\uff9e" +
    "\004\uff9e\005\uff9e\006\uff9e\007\uff9e\010\uff9e\013\uff9e\015" +
    "\uff9e\020\uff9e\022\uff9e\023\uff9e\026\uff9e\027\uff9e\030\uff9e" +
    "\037\uff9e\040\uff9e\061\uff9e\070\uff9e\001\002\000\006\053" +
    "\204\063\205\001\002\000\004\070\uffeb\001\002\000\004" +
    "\053\200\001\002\000\044\003\050\004\025\005\022\006" +
    "\066\007\063\010\043\013\046\015\036\020\072\022\031" +
    "\026\024\027\026\030\071\037\056\040\060\061\uffe7\070" +
    "\041\001\002\000\004\070\uffea\001\002\000\046\003\uffe4" +
    "\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\013\uffe4\015" +
    "\uffe4\020\uffe4\022\uffe4\023\uffe4\026\uffe4\027\uffe4\030\uffe4" +
    "\037\uffe4\040\uffe4\061\uffe4\070\uffe4\001\002\000\046\003" +
    "\uffe3\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\013\uffe3" +
    "\015\uffe3\020\uffe3\022\uffe3\023\uffe3\026\uffe3\027\uffe3\030" +
    "\uffe3\037\uffe3\040\uffe3\061\uffe3\070\uffe3\001\002\000\004" +
    "\054\170\001\002\000\004\060\073\001\002\000\044\003" +
    "\050\004\025\005\022\006\066\007\063\010\043\013\046" +
    "\015\036\020\072\022\031\023\077\026\024\027\026\030" +
    "\071\037\056\040\060\070\041\001\002\000\046\003\uff83" +
    "\004\uff83\005\uff83\006\uff83\007\uff83\010\uff83\013\uff83\015" +
    "\uff83\020\uff83\022\uff83\023\uff83\026\uff83\027\uff83\030\uff83" +
    "\037\uff83\040\uff83\061\uff83\070\uff83\001\002\000\046\003" +
    "\050\004\025\005\022\006\066\007\063\010\043\013\046" +
    "\015\036\020\072\022\031\023\077\026\024\027\026\030" +
    "\071\037\056\040\060\061\uff86\070\041\001\002\000\004" +
    "\061\uff87\001\002\000\004\063\166\001\002\000\004\061" +
    "\102\001\002\000\046\003\uff84\004\uff84\005\uff84\006\uff84" +
    "\007\uff84\010\uff84\013\uff84\015\uff84\020\uff84\022\uff84\023" +
    "\uff84\026\uff84\027\uff84\030\uff84\037\uff84\040\uff84\061\uff84" +
    "\070\uff84\001\002\000\004\021\103\001\002\000\004\054" +
    "\104\001\002\000\030\011\112\012\120\032\105\037\116" +
    "\040\111\043\124\044\107\054\125\064\113\065\106\070" +
    "\121\001\002\000\020\032\105\037\116\040\111\054\150" +
    "\064\113\065\106\070\121\001\002\000\044\031\uffbd\032" +
    "\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\041\uffbd\042\uffbd" +
    "\045\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\055" +
    "\uffbd\062\uffbd\063\uffbd\001\002\000\030\011\uffa9\012\uffa9" +
    "\032\uffa9\037\uffa9\040\uffa9\043\uffa9\044\uffa9\054\uffa9\064" +
    "\uffa9\065\uffa9\070\uffa9\001\002\000\014\041\uffb4\042\uffb4" +
    "\055\uffb4\062\uffb4\063\uffb4\001\002\000\010\064\113\065" +
    "\106\070\121\001\002\000\014\041\uffae\042\uffae\055\uffae" +
    "\062\uffae\063\uffae\001\002\000\044\031\uffbe\032\uffbe\033" +
    "\uffbe\034\uffbe\035\uffbe\036\uffbe\041\uffbe\042\uffbe\045\uffbe" +
    "\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\055\uffbe\062" +
    "\uffbe\063\uffbe\001\002\000\044\031\uffca\032\uffca\033\uffca" +
    "\034\uffca\035\uffca\036\uffca\041\uffca\042\uffca\045\uffca\046" +
    "\uffca\047\uffca\050\uffca\051\uffca\052\uffca\055\uffca\062\uffca" +
    "\063\uffca\001\002\000\010\041\155\042\156\055\162\001" +
    "\002\000\010\064\113\065\106\070\121\001\002\000\014" +
    "\041\uffb3\042\uffb3\055\uffb3\062\uffb3\063\uffb3\001\002\000" +
    "\014\041\uffad\042\uffad\055\uffad\062\uffad\063\uffad\001\002" +
    "\000\044\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036" +
    "\uffbc\041\uffbc\042\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc" +
    "\051\uffbc\052\uffbc\055\uffbc\062\uffbc\063\uffbc\001\002\000" +
    "\030\011\112\012\120\032\105\037\116\040\111\043\124" +
    "\044\107\054\125\064\113\065\106\070\121\001\002\000" +
    "\044\031\137\032\131\033\142\034\141\035\143\036\133" +
    "\041\uffb2\042\uffb2\045\134\046\135\047\140\050\145\051" +
    "\144\052\136\055\uffb2\062\uffb2\063\uffb2\001\002\000\030" +
    "\011\uffaa\012\uffaa\032\uffaa\037\uffaa\040\uffaa\043\uffaa\044" +
    "\uffaa\054\uffaa\064\uffaa\065\uffaa\070\uffaa\001\002\000\030" +
    "\011\112\012\120\032\105\037\116\040\111\043\124\044" +
    "\107\054\125\064\113\065\106\070\121\001\002\000\010" +
    "\041\155\042\156\055\154\001\002\000\040\031\137\032" +
    "\131\033\142\034\141\035\143\036\133\041\uffb2\042\uffb2" +
    "\045\134\046\135\047\140\050\145\051\144\052\136\055" +
    "\132\001\002\000\020\032\105\037\116\040\111\054\150" +
    "\064\113\065\106\070\121\001\002\000\020\032\uffc3\037" +
    "\uffc3\040\uffc3\054\uffc3\064\uffc3\065\uffc3\070\uffc3\001\002" +
    "\000\044\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036" +
    "\uffc6\041\uffc6\042\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6" +
    "\051\uffc6\052\uffc6\055\uffc6\062\uffc6\063\uffc6\001\002\000" +
    "\020\032\uffbf\037\uffbf\040\uffbf\054\uffbf\064\uffbf\065\uffbf" +
    "\070\uffbf\001\002\000\020\032\uffba\037\uffba\040\uffba\054" +
    "\uffba\064\uffba\065\uffba\070\uffba\001\002\000\020\032\uffb9" +
    "\037\uffb9\040\uffb9\054\uffb9\064\uffb9\065\uffb9\070\uffb9\001" +
    "\002\000\020\032\uffb5\037\uffb5\040\uffb5\054\uffb5\064\uffb5" +
    "\065\uffb5\070\uffb5\001\002\000\020\032\uffc4\037\uffc4\040" +
    "\uffc4\054\uffc4\064\uffc4\065\uffc4\070\uffc4\001\002\000\020" +
    "\032\uffb8\037\uffb8\040\uffb8\054\uffb8\064\uffb8\065\uffb8\070" +
    "\uffb8\001\002\000\020\032\uffc1\037\uffc1\040\uffc1\054\uffc1" +
    "\064\uffc1\065\uffc1\070\uffc1\001\002\000\020\032\uffc2\037" +
    "\uffc2\040\uffc2\054\uffc2\064\uffc2\065\uffc2\070\uffc2\001\002" +
    "\000\020\032\uffc0\037\uffc0\040\uffc0\054\uffc0\064\uffc0\065" +
    "\uffc0\070\uffc0\001\002\000\020\032\uffb6\037\uffb6\040\uffb6" +
    "\054\uffb6\064\uffb6\065\uffb6\070\uffb6\001\002\000\020\032" +
    "\uffb7\037\uffb7\040\uffb7\054\uffb7\064\uffb7\065\uffb7\070\uffb7" +
    "\001\002\000\020\032\105\037\116\040\111\054\150\064" +
    "\113\065\106\070\121\001\002\000\030\031\137\032\131" +
    "\033\142\034\141\035\143\036\133\041\uffbb\042\uffbb\055" +
    "\uffbb\062\uffbb\063\uffbb\001\002\000\020\032\105\037\116" +
    "\040\111\054\150\064\113\065\106\070\121\001\002\000" +
    "\020\031\137\032\131\033\142\034\141\035\143\036\133" +
    "\055\132\001\002\000\044\031\137\032\131\033\142\034" +
    "\141\035\143\036\133\041\uffc7\042\uffc7\045\uffc7\046\uffc7" +
    "\047\uffc7\050\uffc7\051\uffc7\052\uffc7\055\uffc7\062\uffc7\063" +
    "\uffc7\001\002\000\030\011\112\012\120\032\105\037\116" +
    "\040\111\043\124\044\107\054\125\064\113\065\106\070" +
    "\121\001\002\000\014\041\uffb0\042\uffb0\055\uffb0\062\uffb0" +
    "\063\uffb0\001\002\000\030\011\uffac\012\uffac\032\uffac\037" +
    "\uffac\040\uffac\043\uffac\044\uffac\054\uffac\064\uffac\065\uffac" +
    "\070\uffac\001\002\000\030\011\uffab\012\uffab\032\uffab\037" +
    "\uffab\040\uffab\043\uffab\044\uffab\054\uffab\064\uffab\065\uffab" +
    "\070\uffab\001\002\000\014\041\155\042\156\055\uffb1\062" +
    "\uffb1\063\uffb1\001\002\000\014\041\155\042\156\055\uffaf" +
    "\062\uffaf\063\uffaf\001\002\000\044\031\uffc9\032\uffc9\033" +
    "\uffc9\034\uffc9\035\uffc9\036\uffc9\041\uffc9\042\uffc9\045\uffc9" +
    "\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\055\uffc9\062" +
    "\uffc9\063\uffc9\001\002\000\004\063\163\001\002\000\046" +
    "\003\uff89\004\uff89\005\uff89\006\uff89\007\uff89\010\uff89\013" +
    "\uff89\015\uff89\020\uff89\022\uff89\023\uff89\026\uff89\027\uff89" +
    "\030\uff89\037\uff89\040\uff89\061\uff89\070\uff89\001\002\000" +
    "\044\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8" +
    "\041\uffc8\042\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051" +
    "\uffc8\052\uffc8\055\uffc8\062\uffc8\063\uffc8\001\002\000\044" +
    "\031\uffc5\032\uffc5\033\142\034\141\035\143\036\133\041" +
    "\uffc5\042\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5" +
    "\052\uffc5\055\uffc5\062\uffc5\063\uffc5\001\002\000\046\003" +
    "\uff82\004\uff82\005\uff82\006\uff82\007\uff82\010\uff82\013\uff82" +
    "\015\uff82\020\uff82\022\uff82\023\uff82\026\uff82\027\uff82\030" +
    "\uff82\037\uff82\040\uff82\061\uff82\070\uff82\001\002\000\004" +
    "\061\uff85\001\002\000\006\066\172\070\171\001\002\000" +
    "\004\055\175\001\002\000\004\055\173\001\002\000\004" +
    "\063\174\001\002\000\046\003\uff97\004\uff97\005\uff97\006" +
    "\uff97\007\uff97\010\uff97\013\uff97\015\uff97\020\uff97\022\uff97" +
    "\023\uff97\026\uff97\027\uff97\030\uff97\037\uff97\040\uff97\061" +
    "\uff97\070\uff97\001\002\000\004\063\176\001\002\000\046" +
    "\003\uff98\004\uff98\005\uff98\006\uff98\007\uff98\010\uff98\013" +
    "\uff98\015\uff98\020\uff98\022\uff98\023\uff98\026\uff98\027\uff98" +
    "\030\uff98\037\uff98\040\uff98\061\uff98\070\uff98\001\002\000" +
    "\004\061\uffe6\001\002\000\010\064\203\067\202\070\201" +
    "\001\002\000\004\063\uff6d\001\002\000\004\063\uff6e\001" +
    "\002\000\004\063\uff6f\001\002\000\004\060\206\001\002" +
    "\000\046\003\uff7d\004\uff7d\005\uff7d\006\uff7d\007\uff7d\010" +
    "\uff7d\013\uff7d\015\uff7d\020\uff7d\022\uff7d\023\uff7d\026\uff7d" +
    "\027\uff7d\030\uff7d\037\uff7d\040\uff7d\061\uff7d\070\uff7d\001" +
    "\002\000\010\064\213\067\212\070\207\001\002\000\006" +
    "\061\uff74\062\uff74\001\002\000\006\061\uff78\062\215\001" +
    "\002\000\004\061\214\001\002\000\006\061\uff76\062\uff76" +
    "\001\002\000\006\061\uff75\062\uff75\001\002\000\004\063" +
    "\uff7c\001\002\000\010\064\213\067\212\070\207\001\002" +
    "\000\004\061\uff77\001\002\000\004\063\220\001\002\000" +
    "\046\003\uffd9\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9" +
    "\013\uffd9\015\uffd9\020\uffd9\022\uffd9\023\uffd9\026\uffd9\027" +
    "\uffd9\030\uffd9\037\uffd9\040\uffd9\061\uffd9\070\uffd9\001\002" +
    "\000\046\003\uff80\004\uff80\005\uff80\006\uff80\007\uff80\010" +
    "\uff80\013\uff80\015\uff80\020\uff80\022\uff80\023\uff80\026\uff80" +
    "\027\uff80\030\uff80\037\uff80\040\uff80\061\uff80\070\uff80\001" +
    "\002\000\004\063\223\001\002\000\046\003\uffda\004\uffda" +
    "\005\uffda\006\uffda\007\uffda\010\uffda\013\uffda\015\uffda\020" +
    "\uffda\022\uffda\023\uffda\026\uffda\027\uffda\030\uffda\037\uffda" +
    "\040\uffda\061\uffda\070\uffda\001\002\000\006\053\uffd8\063" +
    "\uffd8\001\002\000\010\055\uffce\062\uffce\063\uffce\001\002" +
    "\000\010\055\uffcd\062\uffcd\063\uffcd\001\002\000\010\055" +
    "\uffcc\062\uffcc\063\uffcc\001\002\000\004\063\233\001\002" +
    "\000\010\055\uffcf\062\uffcf\063\uffcf\001\002\000\014\041" +
    "\155\042\156\055\uffcb\062\uffcb\063\uffcb\001\002\000\046" +
    "\003\uff81\004\uff81\005\uff81\006\uff81\007\uff81\010\uff81\013" +
    "\uff81\015\uff81\020\uff81\022\uff81\023\uff81\026\uff81\027\uff81" +
    "\030\uff81\037\uff81\040\uff81\061\uff81\070\uff81\001\002\000" +
    "\004\060\237\001\002\000\004\003\236\001\002\000\004" +
    "\063\uff7a\001\002\000\010\064\213\067\212\070\207\001" +
    "\002\000\004\061\241\001\002\000\004\063\uff7b\001\002" +
    "\000\042\003\227\011\112\012\120\024\265\025\262\032" +
    "\105\037\116\040\111\043\124\044\107\054\125\064\113" +
    "\065\106\066\225\067\226\070\261\001\002\000\046\003" +
    "\uffdb\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb\013\uffdb" +
    "\015\uffdb\020\uffdb\022\uffdb\023\uffdb\026\uffdb\027\uffdb\030" +
    "\uffdb\037\uffdb\040\uffdb\061\uffdb\070\uffdb\001\002\000\006" +
    "\064\257\070\255\001\002\000\040\003\227\011\112\012" +
    "\120\032\105\037\116\040\111\043\124\044\107\054\125" +
    "\055\246\064\113\065\106\066\225\067\226\070\121\001" +
    "\002\000\050\003\uffa7\004\uffa7\005\uffa7\006\uffa7\007\uffa7" +
    "\010\uffa7\013\uffa7\015\uffa7\020\uffa7\022\uffa7\023\uffa7\026" +
    "\uffa7\027\uffa7\030\uffa7\037\uffa7\040\uffa7\061\uffa7\063\uffa7" +
    "\070\uffa7\001\002\000\004\055\254\001\002\000\006\055" +
    "\uffa4\062\uffa4\001\002\000\006\055\uffa6\062\252\001\002" +
    "\000\036\003\227\011\112\012\120\032\105\037\116\040" +
    "\111\043\124\044\107\054\125\064\113\065\106\066\225" +
    "\067\226\070\121\001\002\000\004\055\uffa5\001\002\000" +
    "\050\003\uffa8\004\uffa8\005\uffa8\006\uffa8\007\uffa8\010\uffa8" +
    "\013\uffa8\015\uffa8\020\uffa8\022\uffa8\023\uffa8\026\uffa8\027" +
    "\uffa8\030\uffa8\037\uffa8\040\uffa8\061\uffa8\063\uffa8\070\uffa8" +
    "\001\002\000\004\057\uff72\001\002\000\004\057\260\001" +
    "\002\000\004\057\uff73\001\002\000\006\053\uff6c\063\uff6c" +
    "\001\002\000\042\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035" +
    "\uffbc\036\uffbc\041\uffbc\042\uffbc\045\uffbc\046\uffbc\047\uffbc" +
    "\050\uffbc\051\uffbc\052\uffbc\054\245\063\uffbc\001\002\000" +
    "\004\054\277\001\002\000\004\063\276\001\002\000\004" +
    "\063\uffa2\001\002\000\004\054\273\001\002\000\004\063" +
    "\272\001\002\000\004\063\271\001\002\000\004\063\uffa3" +
    "\001\002\000\050\003\uffd4\004\uffd4\005\uffd4\006\uffd4\007" +
    "\uffd4\010\uffd4\013\uffd4\015\uffd4\020\uffd4\022\uffd4\023\uffd4" +
    "\026\uffd4\027\uffd4\030\uffd4\037\uffd4\040\uffd4\055\uffd4\061" +
    "\uffd4\070\uffd4\001\002\000\050\003\uffd5\004\uffd5\005\uffd5" +
    "\006\uffd5\007\uffd5\010\uffd5\013\uffd5\015\uffd5\020\uffd5\022" +
    "\uffd5\023\uffd5\026\uffd5\027\uffd5\030\uffd5\037\uffd5\040\uffd5" +
    "\055\uffd5\061\uffd5\070\uffd5\001\002\000\004\055\274\001" +
    "\002\000\004\063\275\001\002\000\004\063\uffa1\001\002" +
    "\000\050\003\uffd3\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010" +
    "\uffd3\013\uffd3\015\uffd3\020\uffd3\022\uffd3\023\uffd3\026\uffd3" +
    "\027\uffd3\030\uffd3\037\uffd3\040\uffd3\055\uffd3\061\uffd3\070" +
    "\uffd3\001\002\000\004\055\300\001\002\000\004\063\301" +
    "\001\002\000\004\063\uffa0\001\002\000\042\003\227\011" +
    "\112\012\120\024\265\025\262\032\105\037\116\040\111" +
    "\043\124\044\107\054\125\064\113\065\106\066\225\067" +
    "\226\070\261\001\002\000\046\003\uffe5\004\uffe5\005\uffe5" +
    "\006\uffe5\007\uffe5\010\uffe5\013\uffe5\015\uffe5\020\uffe5\022" +
    "\uffe5\023\uffe5\026\uffe5\027\uffe5\030\uffe5\037\uffe5\040\uffe5" +
    "\061\uffe5\070\uffe5\001\002\000\004\063\uffd0\001\002\000" +
    "\004\063\uffd2\001\002\000\004\063\uffd1\001\002\000\030" +
    "\011\112\012\120\032\105\037\116\040\111\043\124\044" +
    "\107\054\125\064\113\065\106\070\121\001\002\000\010" +
    "\041\155\042\156\055\311\001\002\000\004\060\312\001" +
    "\002\000\042\003\050\004\025\005\022\006\066\007\063" +
    "\010\043\013\046\015\036\020\072\022\031\026\024\027" +
    "\026\030\071\037\056\040\060\070\041\001\002\000\004" +
    "\061\314\001\002\000\052\003\uff90\004\uff90\005\uff90\006" +
    "\uff90\007\uff90\010\uff90\013\uff90\015\uff90\016\uff90\017\uff90" +
    "\020\uff90\022\uff90\023\uff90\026\uff90\027\uff90\030\uff90\037" +
    "\uff90\040\uff90\061\uff90\070\uff90\001\002\000\010\053\uffd7" +
    "\056\317\063\uffd7\001\002\000\006\053\uff79\063\uff79\001" +
    "\002\000\010\057\320\064\257\070\255\001\002\000\006" +
    "\053\uff7e\061\uff7e\001\002\000\004\060\336\001\002\000" +
    "\004\054\330\001\002\000\046\003\uff92\004\uff92\005\uff92" +
    "\006\uff92\007\uff92\010\uff92\013\uff92\015\uff92\020\uff92\022" +
    "\uff92\023\uff92\026\uff92\027\uff92\030\uff92\037\uff92\040\uff92" +
    "\061\uff92\070\uff92\001\002\000\052\003\uff8f\004\uff8f\005" +
    "\uff8f\006\uff8f\007\uff8f\010\uff8f\013\uff8f\015\uff8f\016\322" +
    "\017\uff8f\020\uff8f\022\uff8f\023\uff8f\026\uff8f\027\uff8f\030" +
    "\uff8f\037\uff8f\040\uff8f\061\uff8f\070\uff8f\001\002\000\050" +
    "\003\uff93\004\uff93\005\uff93\006\uff93\007\uff93\010\uff93\013" +
    "\uff93\015\uff93\017\321\020\uff93\022\uff93\023\uff93\026\uff93" +
    "\027\uff93\030\uff93\037\uff93\040\uff93\061\uff93\070\uff93\001" +
    "\002\000\046\003\uff94\004\uff94\005\uff94\006\uff94\007\uff94" +
    "\010\uff94\013\uff94\015\uff94\020\uff94\022\uff94\023\uff94\026" +
    "\uff94\027\uff94\030\uff94\037\uff94\040\uff94\061\uff94\070\uff94" +
    "\001\002\000\050\003\uff8e\004\uff8e\005\uff8e\006\uff8e\007" +
    "\uff8e\010\uff8e\013\uff8e\015\uff8e\017\uff8e\020\uff8e\022\uff8e" +
    "\023\uff8e\026\uff8e\027\uff8e\030\uff8e\037\uff8e\040\uff8e\061" +
    "\uff8e\070\uff8e\001\002\000\030\011\112\012\120\032\105" +
    "\037\116\040\111\043\124\044\107\054\125\064\113\065" +
    "\106\070\121\001\002\000\010\041\155\042\156\055\332" +
    "\001\002\000\004\060\333\001\002\000\042\003\050\004" +
    "\025\005\022\006\066\007\063\010\043\013\046\015\036" +
    "\020\072\022\031\026\024\027\026\030\071\037\056\040" +
    "\060\070\041\001\002\000\004\061\335\001\002\000\052" +
    "\003\uff8d\004\uff8d\005\uff8d\006\uff8d\007\uff8d\010\uff8d\013" +
    "\uff8d\015\uff8d\016\uff8d\017\uff8d\020\uff8d\022\uff8d\023\uff8d" +
    "\026\uff8d\027\uff8d\030\uff8d\037\uff8d\040\uff8d\061\uff8d\070" +
    "\uff8d\001\002\000\042\003\050\004\025\005\022\006\066" +
    "\007\063\010\043\013\046\015\036\020\072\022\031\026" +
    "\024\027\026\030\071\037\056\040\060\070\041\001\002" +
    "\000\004\061\340\001\002\000\046\003\uff8c\004\uff8c\005" +
    "\uff8c\006\uff8c\007\uff8c\010\uff8c\013\uff8c\015\uff8c\020\uff8c" +
    "\022\uff8c\023\uff8c\026\uff8c\027\uff8c\030\uff8c\037\uff8c\040" +
    "\uff8c\061\uff8c\070\uff8c\001\002\000\014\002\ufffe\003\ufffe" +
    "\004\ufffe\007\ufffe\010\ufffe\001\002\000\014\004\025\005" +
    "\022\006\066\007\063\010\043\001\002\000\004\063\347" +
    "\001\002\000\004\053\302\001\002\000\004\070\346\001" +
    "\002\000\004\053\uffd7\001\002\000\030\011\112\012\120" +
    "\032\105\037\116\040\111\043\124\044\107\054\125\064" +
    "\113\065\106\070\121\001\002\000\010\041\155\042\156" +
    "\063\351\001\002\000\016\004\025\005\022\006\066\007" +
    "\063\010\043\070\353\001\002\000\004\055\354\001\002" +
    "\000\004\053\242\001\002\000\004\060\355\001\002\000" +
    "\044\003\050\004\025\005\022\006\066\007\063\010\043" +
    "\013\046\015\036\020\072\022\031\023\077\026\024\027" +
    "\026\030\071\037\056\040\060\070\041\001\002\000\004" +
    "\061\357\001\002\000\046\003\uff88\004\uff88\005\uff88\006" +
    "\uff88\007\uff88\010\uff88\013\uff88\015\uff88\020\uff88\022\uff88" +
    "\023\uff88\026\uff88\027\uff88\030\uff88\037\uff88\040\uff88\061" +
    "\uff88\070\uff88\001\002\000\046\003\uff7f\004\uff7f\005\uff7f" +
    "\006\uff7f\007\uff7f\010\uff7f\013\uff7f\015\uff7f\020\uff7f\022" +
    "\uff7f\023\uff7f\026\uff7f\027\uff7f\030\uff7f\037\uff7f\040\uff7f" +
    "\061\uff7f\070\uff7f\001\002\000\006\065\363\070\362\001" +
    "\002\000\004\055\366\001\002\000\004\055\364\001\002" +
    "\000\004\063\365\001\002\000\046\003\uff99\004\uff99\005" +
    "\uff99\006\uff99\007\uff99\010\uff99\013\uff99\015\uff99\020\uff99" +
    "\022\uff99\023\uff99\026\uff99\027\uff99\030\uff99\037\uff99\040" +
    "\uff99\061\uff99\070\uff99\001\002\000\004\063\367\001\002" +
    "\000\046\003\uff9a\004\uff9a\005\uff9a\006\uff9a\007\uff9a\010" +
    "\uff9a\013\uff9a\015\uff9a\020\uff9a\022\uff9a\023\uff9a\026\uff9a" +
    "\027\uff9a\030\uff9a\037\uff9a\040\uff9a\061\uff9a\070\uff9a\001" +
    "\002\000\006\064\372\070\371\001\002\000\004\055\375" +
    "\001\002\000\004\055\373\001\002\000\004\063\374\001" +
    "\002\000\046\003\uff9b\004\uff9b\005\uff9b\006\uff9b\007\uff9b" +
    "\010\uff9b\013\uff9b\015\uff9b\020\uff9b\022\uff9b\023\uff9b\026" +
    "\uff9b\027\uff9b\030\uff9b\037\uff9b\040\uff9b\061\uff9b\070\uff9b" +
    "\001\002\000\004\063\376\001\002\000\046\003\uff9c\004" +
    "\uff9c\005\uff9c\006\uff9c\007\uff9c\010\uff9c\013\uff9c\015\uff9c" +
    "\020\uff9c\022\uff9c\023\uff9c\026\uff9c\027\uff9c\030\uff9c\037" +
    "\uff9c\040\uff9c\061\uff9c\070\uff9c\001\002\000\050\003\uffd6" +
    "\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6\013\uffd6\015" +
    "\uffd6\020\uffd6\022\uffd6\023\uffd6\026\uffd6\027\uffd6\030\uffd6" +
    "\037\uffd6\040\uffd6\055\uffd6\061\uffd6\070\uffd6\001\002\000" +
    "\004\054\ufff0\001\002\000\004\054\ufff2\001\002\000\004" +
    "\054\ufff1\001\002\000\014\002\ufff6\003\ufff6\004\ufff6\007" +
    "\ufff6\010\ufff6\001\002\000\014\002\ufffc\003\ufffc\004\ufffc" +
    "\007\ufffc\010\ufffc\001\002\000\004\054\u0108\001\002\000" +
    "\014\002\uffff\003\u0103\004\013\007\011\010\012\001\002" +
    "\000\014\002\ufffb\003\ufffb\004\ufffb\007\ufffb\010\ufffb\001" +
    "\002\000\016\004\025\005\022\006\066\007\063\010\043" +
    "\055\u0109\001\002\000\004\060\u0118\001\002\000\006\055" +
    "\uffef\062\u0116\001\002\000\004\070\u0115\001\002\000\004" +
    "\070\u0114\001\002\000\004\055\u010e\001\002\000\004\060" +
    "\u010f\001\002\000\044\003\050\004\025\005\022\006\066" +
    "\007\063\010\043\013\046\015\036\020\072\022\031\026" +
    "\024\027\026\030\071\037\056\040\060\061\u0111\070\041" +
    "\001\002\000\004\061\u0113\001\002\000\004\003\u0112\001" +
    "\002\000\014\002\ufff8\003\ufff8\004\ufff8\007\ufff8\010\ufff8" +
    "\001\002\000\014\002\ufffa\003\ufffa\004\ufffa\007\ufffa\010" +
    "\ufffa\001\002\000\006\055\uffec\062\uffec\001\002\000\006" +
    "\055\uffed\062\uffed\001\002\000\014\004\025\005\022\006" +
    "\066\007\063\010\043\001\002\000\004\055\uffee\001\002" +
    "\000\044\003\050\004\025\005\022\006\066\007\063\010" +
    "\043\013\046\015\036\020\072\022\031\026\024\027\026" +
    "\030\071\037\056\040\060\061\u011a\070\041\001\002\000" +
    "\004\061\u011c\001\002\000\004\003\u011b\001\002\000\014" +
    "\002\ufff7\003\ufff7\004\ufff7\007\ufff7\010\ufff7\001\002\000" +
    "\014\002\ufff9\003\ufff9\004\ufff9\007\ufff9\010\ufff9\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011b\000\012\002\003\006\004\007\005\010\007\001" +
    "\001\000\002\001\001\000\012\004\u0105\005\u0103\007\005" +
    "\010\u0104\001\001\000\004\011\u0100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\072\003\051\012\031\015\041\016\064\017\037\020\067" +
    "\021\020\022\066\023\054\026\016\033\046\034\026\035" +
    "\060\036\017\051\043\052\022\053\053\054\033\060\032" +
    "\061\052\066\044\067\056\070\063\072\050\075\061\076" +
    "\027\077\036\100\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\055\324\056\323" +
    "\057\322\001\001\000\004\070\315\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\027\227\037\230\040\122\042\113" +
    "\043\231\045\107\046\121\047\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\070\003\051\015\176\016\064\017\037\020\067" +
    "\021\020\022\066\023\054\026\016\033\046\034\026\035" +
    "\060\036\017\051\043\052\022\053\053\054\033\060\032" +
    "\061\052\066\044\067\056\070\063\072\050\075\061\076" +
    "\027\077\036\100\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\076\003\051\016\100\017\037\020\067\021\020" +
    "\022\066\023\054\026\016\033\046\034\026\035\060\036" +
    "\017\051\043\052\022\053\053\054\033\060\032\061\052" +
    "\062\077\063\075\064\074\065\073\066\044\067\056\070" +
    "\063\072\050\075\061\076\027\077\036\100\034\001\001" +
    "\000\002\001\001\000\074\003\051\016\100\017\037\020" +
    "\067\021\020\022\066\023\054\026\016\033\046\034\026" +
    "\035\060\036\017\051\043\052\022\053\053\054\033\060" +
    "\032\061\052\063\166\064\074\065\073\066\044\067\056" +
    "\070\063\072\050\075\061\076\027\077\036\100\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\040\122\042\113\043\114\045\107\046\121\047\116" +
    "\001\001\000\006\040\164\042\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\042\163" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\044\152\001\001\000\004\042\160\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\040\122\042\113\043\157\045\107\046\121\047\116" +
    "\001\001\000\006\041\127\050\145\001\001\000\002\001" +
    "\001\000\016\040\126\042\113\043\125\045\107\046\121" +
    "\047\116\001\001\000\004\044\152\001\001\000\006\041" +
    "\127\050\145\001\001\000\006\040\151\042\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\040\146\042\113\001\001\000\004\041\127\001" +
    "\001\000\006\040\150\042\113\001\001\000\004\041\127" +
    "\001\001\000\004\041\127\001\001\000\016\040\122\042" +
    "\113\043\156\045\107\046\121\047\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\044" +
    "\152\001\001\000\004\044\152\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\073\210\074\207\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\073" +
    "\215\074\207\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\044\152\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\073" +
    "\237\074\207\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\023\266\027\265\030\262\031\267\032\263\037" +
    "\230\040\122\042\113\043\231\045\107\046\121\047\116" +
    "\001\001\000\002\001\001\000\004\071\255\001\001\000" +
    "\026\024\246\025\250\027\247\037\230\040\122\042\113" +
    "\043\231\045\107\046\121\047\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\024\252\025\250\027\247\037\230\040\122\042" +
    "\113\043\231\045\107\046\121\047\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\023\305\027\304\030\303\031\267\032\263\037\230" +
    "\040\122\042\113\043\231\045\107\046\121\047\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\040\122\042\113\043\307\045" +
    "\107\046\121\047\116\001\001\000\004\044\152\001\001" +
    "\000\002\001\001\000\072\003\051\012\312\015\041\016" +
    "\064\017\037\020\067\021\020\022\066\023\054\026\016" +
    "\033\046\034\026\035\060\036\017\051\043\052\022\053" +
    "\053\054\033\060\032\061\052\066\044\067\056\070\063" +
    "\072\050\075\061\076\027\077\036\100\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\071\255\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\055\326\056\323\001\001\000\004\057\325\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\040\122\042\113" +
    "\043\330\045\107\046\121\047\116\001\001\000\004\044" +
    "\152\001\001\000\002\001\001\000\072\003\051\012\333" +
    "\015\041\016\064\017\037\020\067\021\020\022\066\023" +
    "\054\026\016\033\046\034\026\035\060\036\017\051\043" +
    "\052\022\053\053\054\033\060\032\061\052\066\044\067" +
    "\056\070\063\072\050\075\061\076\027\077\036\100\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\072\003" +
    "\051\012\336\015\041\016\064\017\037\020\067\021\020" +
    "\022\066\023\054\026\016\033\046\034\026\035\060\036" +
    "\017\051\043\052\022\053\053\054\033\060\032\061\052" +
    "\066\044\067\056\070\063\072\050\075\061\076\027\077" +
    "\036\100\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\003\051\017\343\021\342\100" +
    "\344\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\040\122\042\113\043" +
    "\347\045\107\046\121\047\116\001\001\000\004\044\152" +
    "\001\001\000\014\003\051\017\343\020\351\021\020\100" +
    "\344\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\076\003\051\016\100\017\037\020\067\021" +
    "\020\022\066\023\054\026\016\033\046\034\026\035\060" +
    "\036\017\051\043\052\022\053\053\054\033\060\032\061" +
    "\052\062\355\063\075\064\074\065\073\066\044\067\056" +
    "\070\063\072\050\075\061\076\027\077\036\100\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\u0106\007\005\010" +
    "\u0104\001\001\000\002\001\001\000\012\003\u010a\013\u010c" +
    "\014\u0109\100\u010b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\072\003\051\012\u010f\015\041\016" +
    "\064\017\037\020\067\021\020\022\066\023\054\026\016" +
    "\033\046\034\026\035\060\036\017\051\043\052\022\053" +
    "\053\054\033\060\032\061\052\066\044\067\056\070\063" +
    "\072\050\075\061\076\027\077\036\100\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\u010a\013\u0116\014\u0109\100\u010b\001\001\000\002\001\001" +
    "\000\072\003\051\012\u0118\015\041\016\064\017\037\020" +
    "\067\021\020\022\066\023\054\026\016\033\046\034\026" +
    "\035\060\036\017\051\043\052\022\053\053\054\033\060" +
    "\032\061\052\066\044\067\056\070\063\072\050\075\061" +
    "\076\027\077\036\100\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return token = lex.next_token(); 
    }


    Lexer lex;
    Symbol token;
    Boolean errores = false;
    @SuppressWarnings("deprecation")
    public parser(Lexer lex){
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }
    
    public boolean getErrores(){
        return errores;
    }

    private HashMap<String, ArrayList<String>> listaTablaSimbolos = new HashMap<String, ArrayList<String>>();
    String currentHash;

    private void imprimirTablaSimbolos(){
        for(String key: listaTablaSimbolos.keySet()){
            System.out.println("-------------------------");
            System.out.println("");
            System.out.println("Tabla de símbolos: "+key);
            System.out.println("Valores: ");
            for(String item: listaTablaSimbolos.get(key)){
                System.out.println(item);
            }

            System.out.println("");
        }

    }
    public HashMap<String, ArrayList<String>> getTablaSimbolos(){
        return listaTablaSimbolos;
    }

    private void manejoError(String error){
        errores = true;
        int linea = lex.getLine();
        int columna = lex.getColumn();
        System.out.println("Error Sintáctico: " + error + " en la linea: " + linea + " y columna: " + columna);
        System.out.println("Se continua con el análisis sintáctico.");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



    

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= nuevoLenguaje EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // nuevoLenguaje ::= funcionMain 
            {
              Object RESULT =null;
		 imprimirTablaSimbolos(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nuevoLenguaje",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // nuevoLenguaje ::= funcionMain funciones 
            {
              Object RESULT =null;
		 imprimirTablaSimbolos(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nuevoLenguaje",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // funcionMain ::= iniFun LPARENT RPARENT INIBLOQUE bloque FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionMain",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // funcionMain ::= error 
            {
              Object RESULT =null;
		 manejoError("Error de creación de función main"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionMain",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // funciones ::= funcion 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // funciones ::= funciones funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // funcion ::= iniFun LPARENT parametros RPARENT INIBLOQUE bloque FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // funcion ::= iniFun LPARENT RPARENT INIBLOQUE bloque FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // funcion ::= iniFun LPARENT parametros RPARENT INIBLOQUE FINBLOQUE error 
            {
              Object RESULT =null;
		 manejoError("Funcion debe tener sentencias debido a que debe retornar un valor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // funcion ::= iniFun LPARENT RPARENT INIBLOQUE FINBLOQUE error 
            {
              Object RESULT =null;
		 manejoError("Funcion debe tener sentencias debido a que debe retornar un valor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // funcion ::= error 
            {
              Object RESULT =null;
		 manejoError("Error de creación de función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipoRet ::= INT 
            {
              Object RESULT =null;
		 RESULT = "int";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoRet",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipoRet ::= FLOAT 
            {
              Object RESULT =null;
		 RESULT = "float";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoRet",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipoRet ::= BOOLEAN 
            {
              Object RESULT =null;
		 RESULT = "boolean";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoRet",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // iniFun ::= tipoRet identifier 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
           String tipoTabla;
           if(id.toString().equals("main")){
            tipoTabla = "tipo:main: "+tip.toString();
           }
           else{
            tipoTabla = "tipo:funcion: "+tip.toString();
           }
           ArrayList<String> listaSimbolos = new ArrayList<String>();
           currentHash = id.toString();
           listaSimbolos.add(tipoTabla);
           listaTablaSimbolos.put(currentHash, listaSimbolos);
           RESULT = tip.toString()+" "+id.toString();


              CUP$parser$result = parser.getSymbolFactory().newSymbol("iniFun",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // identifier ::= MAIN 
            {
              Object RESULT =null;
		 RESULT = "main";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // identifier ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = id.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // parametros ::= parametro COMA parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // parametro ::= tipoVar ID 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 listaTablaSimbolos.get(currentHash).add("Parámetro: "+id.toString()+": "+tip.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // parametro ::= tipoSubset ID 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 listaTablaSimbolos.get(currentHash).add("Parámetro: "+id.toString()+": "+tip.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipoVar ::= FLOAT 
            {
              Object RESULT =null;
		 RESULT = "float";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVar",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipoVar ::= STRING 
            {
              Object RESULT =null;
		 RESULT = "string";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVar",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipoVar ::= BOOLEAN 
            {
              Object RESULT =null;
		 RESULT = "boolean";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVar",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bloque ::= sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentencias ::= sentencia sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentencia ::= creaVar FINEXP 
            {
              Object RESULT =null;
		int cvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  
                        listaTablaSimbolos.get(currentHash).add(cv.toString()); 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentencia ::= usaVar 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentencia ::= asignacion 
            {
              Object RESULT =null;
		int asignleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asignright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object asign = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        if(asign != null){
                            listaTablaSimbolos.get(currentHash).add(asign.toString());
                        }  
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentencia ::= llamaFunc 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentencia ::= output 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentencia ::= control 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentencia ::= returnFunc 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentencia ::= creaArreglo 
            {
              Object RESULT =null;
		int creaArrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int creaArrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object creaArr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      listaTablaSimbolos.get(currentHash).add(creaArr.toString()); 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentencia ::= asignaArreglo 
            {
              Object RESULT =null;
		int asigArrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asigArrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object asigArr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        if(asigArr != null){
                            listaTablaSimbolos.get(currentHash).add(asigArr.toString());
                        }  
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentencia ::= error 
            {
              Object RESULT =null;
		 manejoError("Error de sentencia"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // usaVar ::= ID FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("usaVar",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // usaVar ::= PLUS_UN ID FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("usaVar",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // usaVar ::= MINUS_UN ID FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("usaVar",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // creaVar ::= tipoVar ID 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n.toString()+": "+tip.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaVar",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // creaVar ::= tipoSubset ID 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n.toString()+": "+tip.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaVar",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // asignacion ::= creaAsignaVar FINEXP 
            {
              Object RESULT =null;
		int cvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = cv.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // asignacion ::= ID EQUIV literal FINEXP 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // asignacion ::= ID EQUIV llamaFunc FINEXP 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // asignacion ::= ID EQUIV input FINEXP 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // creaAsignaVar ::= creaVar EQUIV literal 
            {
              Object RESULT =null;
		int cvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object cv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = cv.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaAsignaVar",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // creaAsignaVar ::= creaVar EQUIV llamaFunc 
            {
              Object RESULT =null;
		int cvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object cv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = cv.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaAsignaVar",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // creaAsignaVar ::= creaVar EQUIV input 
            {
              Object RESULT =null;
		int cvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object cv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = cv.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaAsignaVar",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // literal ::= operacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // literal ::= CADENA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // literal ::= CARACTER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // literal ::= error 
            {
              Object RESULT =null;
		 manejoError("Error de literal"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // operacion ::= operacionLogica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // operacionAritmetica ::= operandoArit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // operacionAritmetica ::= PLUS_UN operandoArit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // operacionAritmetica ::= MINUS_UN operandoArit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operacionAritmetica ::= operacionAritmetica operadorArit operacionAritmetica 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // operacionAritmetica ::= LPARENT operacionAritmetica RPARENT 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // operacionAritmetica ::= MINUS operacionAritmetica 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // operadorArit ::= PLUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operadorArit ::= MINUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // operadorArit ::= TIMES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // operadorArit ::= DIV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // operadorArit ::= POWER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // operadorArit ::= MODULE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operandoArit ::= ENTERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operandoArit ::= DECIMAL 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operandoArit ::= ID 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // operacionRelacional ::= operacionAritmetica operadorRel operacionAritmetica 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionRelacional",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operadorRel ::= MAYOR_QUE 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operadorRel ::= MAYOR_IGUAL 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // operadorRel ::= MENOR_QUE 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // operadorRel ::= MENOR_IGUAL 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // operadorRel ::= DEQUIV 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // operadorRel ::= DIF 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // operacionLogica ::= operandoLog 
            {
              Object RESULT =null;
		int opLogicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opLogicright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opLogic = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = opLogic.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionLogica",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // operacionLogica ::= operacionRelacional 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionLogica",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // operacionLogica ::= operacionAritmetica 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionLogica",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // operacionLogica ::= operacionLogica operadorLog operacionLogica 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionLogica",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // operacionLogica ::= LPARENT operacionLogica RPARENT 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionLogica",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // operacionLogica ::= negacion operacionLogica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacionLogica",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // operandoLog ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoLog",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // operandoLog ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoLog",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // operadorLog ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLog",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // operadorLog ::= OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLog",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // negacion ::= NOT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("negacion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // negacion ::= EXCLAMACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("negacion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // llamaFunc ::= ID LPARENT parametrosLlamada RPARENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamaFunc",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // llamaFunc ::= ID LPARENT RPARENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamaFunc",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // parametrosLlamada ::= parametroLlamada 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosLlamada",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // parametrosLlamada ::= parametroLlamada COMA parametrosLlamada 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosLlamada",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // parametroLlamada ::= literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroLlamada",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // input ::= leeInt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("input",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // input ::= leeFloat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("input",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // leeInt ::= READ_INT LPARENT RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leeInt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // leeFloat ::= READ_FLOAT LPARENT RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leeFloat",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // output ::= escribeInt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("output",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // output ::= escribeFloat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("output",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // output ::= escribeString 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("output",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // escribeInt ::= PRINT_INT LPARENT ID RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribeInt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // escribeInt ::= PRINT_INT LPARENT ENTERO RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribeInt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // escribeFloat ::= PRINT_FLOAT LPARENT ID RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribeFloat",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // escribeFloat ::= PRINT_FLOAT LPARENT DECIMAL RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribeFloat",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // escribeString ::= PRINT_STRING LPARENT ID RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribeString",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // escribeString ::= PRINT_STRING LPARENT CADENA RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribeString",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // control ::= condicional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // control ::= ciclo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // condicional ::= condIf condsElif condElse 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // condicional ::= condIf condsElif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // condicional ::= condIf condElse 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // condicional ::= condIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // condIf ::= IF LPARENT operacionLogica RPARENT INIBLOQUE bloque FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condIf",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // condsElif ::= condElif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condsElif",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // condsElif ::= condElif condsElif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condsElif",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // condElif ::= ELIF LPARENT operacionLogica RPARENT INIBLOQUE bloque FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condElif",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // condElse ::= ELSE INIBLOQUE bloque FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condElse",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ciclo ::= cicloDoWhile 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ciclo ::= cicloFor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // cicloDoWhile ::= DO INIBLOQUE bloqueCiclo FINBLOQUE WHILE LPARENT operacionLogica RPARENT FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cicloDoWhile",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // cicloFor ::= FOR LPARENT creaAsignaVar FINEXP operacionLogica FINEXP asignacion RPARENT INIBLOQUE bloqueCiclo FINBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cicloFor",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // bloqueCiclo ::= sentenciasCiclo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueCiclo",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // sentenciasCiclo ::= sentenciaCiclo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasCiclo",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // sentenciasCiclo ::= sentenciaCiclo sentenciasCiclo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciasCiclo",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // sentenciaCiclo ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaCiclo",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // sentenciaCiclo ::= breakCiclo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaCiclo",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // breakCiclo ::= BREAK FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("breakCiclo",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // returnFunc ::= RETURN literal FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnFunc",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // asignaArreglo ::= asignaElementoArreglo FINEXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaArreglo",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // asignaArreglo ::= creaAsignaArreglo FINEXP 
            {
              Object RESULT =null;
		int creaArrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int creaArrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object creaArr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = creaArr.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaArreglo",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // arregloSinTam ::= tipoSubset ID LPARENT_CUAD RPARENT_CUAD 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = id.toString()+": "+tip.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arregloSinTam",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // creaArreglo ::= tipoArreglo FINEXP 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = tip.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaArreglo",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // creaAsignaArreglo ::= tipoArreglo EQUIV INIBLOQUE arregloValores FINBLOQUE 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = tip.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaAsignaArreglo",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // creaAsignaArreglo ::= arregloSinTam EQUIV INIBLOQUE arregloValores FINBLOQUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = a.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaAsignaArreglo",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // creaAsignaArreglo ::= arregloSinTam FINBLOQUE error 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 manejoError("No se puede declarar un arreglo sin tamaño.");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaAsignaArreglo",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // tipoArreglo ::= tipoSubset expArreglo 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp.toString()+": "+tip.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoArreglo",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // arregloValores ::= arregloValor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arregloValores",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // arregloValores ::= arregloValor COMA arregloValores 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arregloValores",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // arregloValor ::= CARACTER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arregloValor",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // arregloValor ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arregloValor",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // arregloValor ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arregloValor",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // cantidadArreglo ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cantidadArreglo",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // cantidadArreglo ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cantidadArreglo",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // tipoSubset ::= INT 
            {
              Object RESULT =null;
		 RESULT = "int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoSubset",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // tipoSubset ::= CHAR 
            {
              Object RESULT =null;
		 RESULT = "char"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoSubset",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // asignaElementoArreglo ::= expArreglo EQUIV ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaElementoArreglo",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // asignaElementoArreglo ::= expArreglo EQUIV CARACTER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaElementoArreglo",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // asignaElementoArreglo ::= expArreglo EQUIV ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaElementoArreglo",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // expArreglo ::= ID LPARENT_CUAD cantidadArreglo RPARENT_CUAD 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = id.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArreglo",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
