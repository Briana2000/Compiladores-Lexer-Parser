package ParserLexer;
import java_cup.runtime.*;
import java.util.HashMap;
import java.util.ArrayList;

// Aquí va la gramática BNF que hicimos solo que se pone con ::= en vez de la flecha 
// También se declaran los terminales y los no terminales por medio de los símbolos y las producciones

// CODIGO JAVA 
action code {:
    private HashMap<String, ArrayList<String>> listaTablaSimbolos = new HashMap<String, ArrayList<String>>();
    String currentHash;

    private void imprimirTablaSimbolos(){
        for(String key: listaTablaSimbolos.keySet()){
            System.out.println("-------------------------");
            System.out.println("");
            System.out.println("Tabla de símbolos: "+key);
            System.out.println("Valores: ");
            for(String item: listaTablaSimbolos.get(key)){
                System.out.println(item);
            }

            System.out.println("");
        }

    }

:}

parser code {:
    Lexer lex;

    @SuppressWarnings("deprecation")
    public parser(Lexer lex){
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }
    
:}

init with {: :}; // define como inicializar el parser
scan with {: return lex.next_token(); :}; // define como conectarse con el scanner


////// Terminales ///////

// Tipos de datos
terminal INT, CHAR, STRING, FLOAT, BOOLEAN;
// Operadores Logicos
terminal TRUE, FALSE;
// Funciones
terminal RETURN, MAIN;
// Estrucutras de control
terminal IF, ELIF, ELSE, DO, WHILE, FOR, BREAK;
// Entrada y salida
terminal READ_INT, READ_FLOAT, PRINT_INT, PRINT_FLOAT, PRINT_STRING;

// Operadores
terminal PLUS, MINUS, TIMES, DIV;
terminal POWER, MODULE, PLUS_UN, MINUS_UN;
terminal AND, OR, NOT, EXCLAMACION;
terminal MAYOR_QUE, MAYOR_IGUAL, MENOR_QUE, MENOR_IGUAL, DEQUIV, DIF;

// Miscelaneos
terminal EQUIV, LPARENT, RPARENT, LPARENT_CUAD, RPARENT_CUAD;
terminal INIBLOQUE, FINBLOQUE, COMA, FINEXP;

// Literales
terminal ENTERO, DECIMAL, CADENA, CARACTER;

// Identificadores
terminal ID;


////// NO Terminales ///////  
non terminal nuevoLenguaje, tipoVar;
non terminal funciones, funcion, funcionMain, tipoRet, iniFun, identifier, bloque;
non terminal parametros, parametro, sentencias, sentencia;
non terminal creaVar, asignacion, creaAsignaVar, usaVar;
non terminal llamaFunc, parametrosLlamada, parametroLlamada, returnFunc;
non terminal literal;
non terminal input, leeInt, leeFloat, output, escribeInt, escribeFloat, escribeString;
non terminal operacion, operacionAritmetica, operadorArit, operandoArit;
non terminal operacionLogica, operadorLog, operandoLog, negacion;
non terminal operacionRelacional, operadorRel;
non terminal control, ciclo, condicional, condIf, condsElif, condElif, condElse;
non terminal cicloDoWhile, cicloFor, bloqueCiclo, sentenciasCiclo, sentenciaCiclo, breakCiclo;
non terminal arregloSinTam, asignaElementoArreglo, expArreglo, cantidadArreglo; 
non terminal asignaArreglo, arregloValores, arregloValor, tipoArreglo, creaAsignaArreglo, creaArreglo;
non terminal tipoSubset;

//non terminal nuevoLenguaje, funciones, tipoVar, creaVar, arregloConTam, parteIzAsig;
//non terminal nuevoLenguaje, funciones, tipoVar, creaVar, arregloConTam, parteIzAsig;
//non terminal nuevoLenguaje, funciones, tipoVar, creaVar, arregloConTam, parteIzAsig;

////// precedencia ///////
precedence left PLUS, MINUS;
precedence left TIMES, DIV;
precedence left POWER, MODULE;

precedence left AND, OR;
precedence left NOT, EXCLAMACION;
precedence left LPARENT, LPARENT_CUAD, RPARENT, RPARENT_CUAD;

////// producción de inicio ///////

start with nuevoLenguaje;

////// producciones de la gramática ///////

nuevoLenguaje ::=       funcionMain {:System.out.println("Funcion main"); imprimirTablaSimbolos(); :}
                    |   funcionMain funciones {:System.out.println("Funciones y funcion main"); imprimirTablaSimbolos();:} ;


funcionMain ::= iniFun LPARENT RPARENT INIBLOQUE bloque FINBLOQUE ;

funciones ::=       funcion {: System.out.println("funcion");:}
                |   funciones funcion;

funcion ::=         iniFun LPARENT parametros RPARENT INIBLOQUE bloque FINBLOQUE 
                |   iniFun LPARENT RPARENT INIBLOQUE bloque FINBLOQUE ;

tipoRet ::=     INT {: RESULT = "int";:}
            |   FLOAT {: RESULT = "float";:}
            |   BOOLEAN {: RESULT = "boolean";:};

iniFun ::= tipoRet:tip identifier:id 
{:
           String tipoTabla;
           if(id.toString().equals("main")){
            tipoTabla = "tipo:main: "+tip.toString();
           }
           else{
            tipoTabla = "tipo:funcion: "+tip.toString();
           }
           ArrayList<String> listaSimbolos = new ArrayList<String>();
           currentHash = id.toString();
           listaSimbolos.add(tipoTabla);
           listaTablaSimbolos.put(currentHash, listaSimbolos);
           RESULT = tip.toString()+" "+id.toString();

:};

identifier ::=  MAIN {: RESULT = "main";:}
              | ID:id {: RESULT = id.toString();:} ;

parametros ::=      parametro
                |   parametro COMA parametros;

parametro ::= tipoVar:tip ID:id 
                {: listaTablaSimbolos.get(currentHash).add("Parámetro: "+id.toString()+": "+tip.toString());:} 
            | tipoSubset:tip ID:id
                {: listaTablaSimbolos.get(currentHash).add("Parámetro: "+id.toString()+": "+tip.toString());:} ; 

// creación de variables 
tipoVar ::=   FLOAT {: RESULT = "float";:}
            | STRING {: RESULT = "string";:}
            | BOOLEAN {: RESULT = "boolean";:} ;

bloque ::= sentencias;

sentencias ::=      sentencia
                |   sentencia sentencias;

sentencia ::=       creaVar:cv FINEXP
                    {:  System.out.println("Sentencia Crea variable"); 
                        listaTablaSimbolos.get(currentHash).add(cv.toString()); 
                    :}
                |   usaVar {:System.out.println("Sentencia Usa variable");:}
                |   asignacion:asign {:System.out.println("Sentencia Asignacion");
                        if(asign != null){
                            listaTablaSimbolos.get(currentHash).add(asign.toString());
                        }  
                    :}
                |   llamaFunc   {:System.out.println("Sentencia Llamada a funcion");:}
                |   output    {:System.out.println("Sentencia Salida");:}
                |   control {:System.out.println("Sentencia Control");:}
                |   returnFunc {:System.out.println("Sentencia Return");:}
                |   creaArreglo:creaArr 
                    {:System.out.println("Sentencia Creacion de arreglo");
                      listaTablaSimbolos.get(currentHash).add(creaArr.toString()); 
                    :}
                |   asignaArreglo:asigArr 
                    {:System.out.println("Sentencia Asignacion de arreglo");
                        if(asigArr != null){
                            listaTablaSimbolos.get(currentHash).add(asigArr.toString());
                        }  
                    :} ;

usaVar ::=      ID FINEXP
            |   PLUS_UN ID FINEXP
            |   MINUS_UN ID FINEXP;

creaVar ::=     tipoVar:tip ID:n  {: System.out.println("Variable: "+ n); RESULT = n.toString()+": "+tip.toString(); :}
            |   tipoSubset:tip ID:n  {: System.out.println("Variable: "+ n); RESULT = n.toString()+": "+tip.toString(); :} ;

asignacion ::=      creaAsignaVar:cv FINEXP {: RESULT = cv.toString(); :}
                |   ID:n EQUIV:n2 literal:n3 FINEXP {:System.out.println("Asignacion: "+ n + " = " + n3);:}
                |   ID:n EQUIV:n2 llamaFunc:n3 FINEXP {:System.out.println("Asignacion: "+ n + " = " + n3);:}
                |   ID:n EQUIV:n2 input:n3 FINEXP {:System.out.println("Asignacion: "+ n + " = " + n3);:};

creaAsignaVar ::=    creaVar:cv EQUIV literal {: RESULT = cv.toString();:}
                  |  creaVar:cv EQUIV llamaFunc {: RESULT = cv.toString();:}
                  |  creaVar:cv EQUIV input {: RESULT = cv.toString();:} ; 
 
                //|   tipoVar ID EQUIV arreglo FINEXP
                //|   tipoVar ID EQUIV arregloConTam FINEXP

literal ::=     operacion // operacion contiene operando aritmetico que a su vez contiene entero, decimal, id
            |   CADENA:n {:System.out.println("Cadena: "+ n); :}
            |   CARACTER:n {:System.out.println("Caracter: "+ n); :};

operacion ::=       operacionLogica ;

operacionAritmetica ::=     operandoArit
                        |   PLUS_UN operandoArit
                        |   MINUS_UN operandoArit 
                        |   operacionAritmetica operadorArit operacionAritmetica {:System.out.println("Operacion Arit +-*/ Arit");:}
                        |   LPARENT operacionAritmetica RPARENT {:System.out.println("Operacion Arit (Arit)");:}                            
                        |   MINUS operacionAritmetica {:System.out.println("Operacion Arit -Arit"); :} ;

operadorArit ::=    PLUS 
                |   MINUS 
                |   TIMES 
                |   DIV 
                |   POWER 
                |   MODULE ;

operandoArit ::=        ENTERO:n {:System.out.println("Entero: "+ n); :}
                    |   DECIMAL:n {:System.out.println("Decimal: "+ n); :}
                    |   ID:n {:System.out.println("ID: "+ n);:};

operacionRelacional ::=     operacionAritmetica operadorRel operacionAritmetica:e2 {:System.out.println( "Operacion Relacional");:};

operadorRel ::=     MAYOR_QUE {:System.out.println(">");:}
                |   MAYOR_IGUAL {:System.out.println(">=");:}
                |   MENOR_QUE {:System.out.println("<");:}
                |   MENOR_IGUAL {:System.out.println("<=");:}
                |   DEQUIV  {:System.out.println("==");:}
                |   DIF {:System.out.println("!=");:};

operacionLogica ::=     operandoLog:opLogic {: RESULT = opLogic.toString(); :}
                    |   operacionRelacional {:System.out.println("Operacion Rel");:}
                    |   operacionAritmetica {:System.out.println("Operacion Arit");:}
                    |   operacionLogica operadorLog operacionLogica {:System.out.println("Operacion Logica");:}
                    |   LPARENT operacionLogica RPARENT  {:System.out.println("Parentesis");:} %prec LPARENT
                    |   negacion operacionLogica; 

operandoLog ::=     TRUE
                |   FALSE ;


operadorLog ::=     AND
                |   OR;

negacion ::=        NOT
                |   EXCLAMACION;


llamaFunc ::=       ID LPARENT parametrosLlamada RPARENT
                |   ID LPARENT RPARENT;


parametrosLlamada ::=       parametroLlamada
                        |   parametroLlamada COMA parametrosLlamada;

parametroLlamada ::=    literal;
////// I/O ///////

// Input
input ::=       leeInt 
            |   leeFloat;
leeInt ::= READ_INT LPARENT RPARENT FINEXP;
leeFloat ::= READ_FLOAT LPARENT RPARENT FINEXP;

// Output
output ::=      escribeInt 
            |   escribeFloat
            |   escribeString;
        
escribeInt ::=      PRINT_INT LPARENT ID RPARENT FINEXP
                |   PRINT_INT LPARENT ENTERO RPARENT FINEXP;


escribeFloat ::=    PRINT_FLOAT LPARENT ID RPARENT FINEXP
                |   PRINT_FLOAT LPARENT DECIMAL RPARENT FINEXP;

escribeString ::= PRINT_STRING LPARENT ID RPARENT FINEXP
                | PRINT_STRING LPARENT CADENA RPARENT FINEXP;

////// Control de flujo ///////

control ::= condicional | ciclo;

condicional ::= condIf condsElif condElse
            |   condIf condsElif
            |   condIf condElse
            |   condIf;

condIf ::= IF LPARENT operacionLogica RPARENT INIBLOQUE bloque FINBLOQUE;

condsElif ::= condElif
            | condElif condsElif;

condElif ::= ELIF LPARENT operacionLogica RPARENT INIBLOQUE bloque FINBLOQUE;

condElse ::= ELSE INIBLOQUE bloque FINBLOQUE;

ciclo ::= cicloDoWhile
        | cicloFor;


cicloDoWhile ::=    DO INIBLOQUE bloqueCiclo FINBLOQUE WHILE LPARENT operacionLogica RPARENT FINEXP;

cicloFor ::= FOR LPARENT creaAsignaVar FINEXP operacionLogica FINEXP asignacion RPARENT INIBLOQUE bloqueCiclo FINBLOQUE;

bloqueCiclo ::= sentenciasCiclo;

sentenciasCiclo ::=     sentenciaCiclo
                    |   sentenciaCiclo sentenciasCiclo;

sentenciaCiclo ::=      sentencia
                    |   breakCiclo;

breakCiclo ::= BREAK FINEXP;
returnFunc ::= RETURN literal FINEXP;


// Arreglos

asignaArreglo ::=       asignaElementoArreglo FINEXP
                    |   creaAsignaArreglo:creaArr FINEXP {: RESULT = creaArr.toString();:};

arregloSinTam ::=       tipoSubset:tip ID:id LPARENT_CUAD RPARENT_CUAD {: RESULT = id.toString()+": "+tip.toString();:};

creaArreglo ::=     tipoArreglo:tip FINEXP {: RESULT = tip.toString();:};

creaAsignaArreglo ::=       tipoArreglo:tip EQUIV INIBLOQUE arregloValores FINBLOQUE {: RESULT = tip.toString();:}
                        |   arregloSinTam:a EQUIV INIBLOQUE arregloValores FINBLOQUE {: RESULT = a.toString();:};

tipoArreglo ::=     tipoSubset:tip expArreglo:exp {: RESULT = exp.toString()+": "+tip.toString(); :};

arregloValores ::=      arregloValor
                    |   arregloValor COMA arregloValores;

arregloValor ::=       CARACTER
                    |   ENTERO
                    |   ID;

cantidadArreglo ::=     ENTERO
                    |   ID;


tipoSubset ::=      INT {: RESULT = "int"; :}
                |   CHAR {: RESULT = "char"; :} ;

asignaElementoArreglo ::=   expArreglo EQUIV ENTERO
                        |   expArreglo EQUIV CARACTER
                        |   expArreglo EQUIV ID;

expArreglo  ::=     ID:id LPARENT_CUAD cantidadArreglo RPARENT_CUAD {: RESULT = id.toString(); :};
